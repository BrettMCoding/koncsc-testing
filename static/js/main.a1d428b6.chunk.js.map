{"version":3,"sources":["site_layout/character_bio/default.png","site_layout/character_sheet/ncs_2022.pdf","react-alert-template-basic.js","site_layout/user_management/services/AuthenticationService.js","site_layout/user_management/components/LoginComponent.js","site_layout/user_management/components/LogoutComponent.js","site_layout/user_management/components/NavCharacterList.js","site_layout/user_management/components/ConfirmationModal.js","site_layout/header/Navigation.js","site_layout/header/Header.js","site_layout/character_info/CharacterInfoInput.js","site_layout/character_info/CharacterInfoDropdownCountries.js","site_layout/character_info/CharacterInfoDropdownRaces.js","site_layout/character_info/CharacterInfo.js","site_layout/character_bio/CharacterBio.js","site_layout/resources/Resource.js","site_layout/resources/Resources.js","site_layout/skill_trees/Skill.js","site_layout/skill_trees/SkillTree.js","site_layout/user_management/components/RegisterNewUserComponent.js","site_layout/user_management/components/NewPasswordComponent.js","site_layout/user_management/components/ForgotPasswordComponent.js","site_layout/character_sheet/PrintCharacterSheet.js","App.js","index.js"],"names":["module","exports","ex","React","require","BaseIcon","_ref","color","_ref$pushRight","pushRight","undefined","children","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","style","marginRight","minWidth","InfoIcon","cx","cy","r","x1","y1","x2","y2","SuccessIcon","d","points","ErrorIcon","CloseIcon","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","alertStyle","borderStyle","borderColor","backgroundColor","padding","borderRadius","display","justifyContent","alignItems","boxShadow","fontFamily","boxSizing","buttonStyle","marginLeft","border","cursor","message","options","close","onClick","type","flex","whiteSpace","textAlign","username","password","axios","get","process","headers","authorization","this","createBasicAuthToken","window","btoa","localStorage","setItem","console","log","getItem","setupAxiosInterceptors","removeItem","user","token","interceptors","request","use","config","isUserLoggedIn","LoginComponent","props","APP_URL","useState","email","updateEmail","updatePassword","hasLoginFailed","setLoginFailed","showSuccessMessage","setSuccessMessage","alert","useAlert","className","name","value","onChange","event","AuthenticationService","executeBasicAuthenticationService","then","registerSuccessfulLogin","show","timeout","toggleModal","getUserLoggedInProp","loadCharacterList","catch","href","LogoutComponent","logout","NavCharacterList","characterList","map","character","id","setCurrentConfirmationModal","handleCharacter","characterName","level","race","ConfirmationModal","Modal","isOpen","confirmationModalIsOpen","toggle","toggleConfirmationModalIsOpen","ModalBody","ModalFooter","Button","Navigation","navbarIsOpen","setNavbarIsOpen","loginModalIsOpen","setLoginModalIsOpen","skillResetModalIsOpen","setSkillResetModalIsOpen","setConfirmationModalIsOpen","xpCalcModalIsOpen","setXpCalcModalIsOpen","xpCalcResultModalIsOpen","setXpCalcResultModalIsOpen","xpCalcInput","setXpCalcInput","downloadClickable","setDownloadClickable","toggleXpCalcModal","toggleXpCalcResultModal","calcResultMessage","setCalcResultMessage","toggleLoginModal","toggleSkillResetModalIsOpen","handleMethod","setHandleMethod","setMessage","setId","setUserLoggedIn","boolean","hideWhenNotLoggedInWrap","content","items","from","opacity","enter","leave","transitionProps","div","Navbar","light","expand","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","lockChanges","locked","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","saveCharacter","loadCharacter","deleteCharacter","disabled","printCharacterSheet","setTimeout","ModalHeader","resetSkills","placeholder","onInput","e","input","calculateLevelFromXp","isNaN","userClickedCalculateLevel","xp","calculateXpFromLevel","userClickedCalculateXp","Header","Container","Component","CharacterInfoInput","cName","infoName","displayName","maxLength","infoValue","characterInfoChange","CharacterInfoDropdownCountries","dropdownOpen","setDropdownOpen","countries","optionsMap","DropdownItem","Dropdown","setActiveFromChild","size","country","CharacterInfoDropdownRaces","races","CharacterInfo","Row","Col","nameClass","player","calculateSkillPointsRemaining","savedXp","CharacterBio","setIsOpen","collapseIsOpen","setCollapseIsOpen","characterPicture","url","setUrl","icon","faChevronUp","faChevronDown","src","characterBio","changeCharacterBio","onPaste","clipboardData","getData","changeCharacterPicture","Resource","removeResource","addResource","resourceName","resource","max","skillCss","cost","fillBarAnim","useSpring","ResourceBar","Filler","pointsGrantedPerSkillPoint","isLoaded","Resources","MAGIC_POINT_COST","resources","magicPoints","PRODUCTION_POINT_COST","productionPoints","CRAFT_POINT_COST","craftPoints","Skill","playerHasSkill","playerSkills","compareIds","some","skill","addSpaces","string","tier","checkedStyle","freeLanguages","find","foundSkill","checked","includes","playerCheckedASkillBox","toUpperCase","needsApproval","SkillTree","numOfSkillsInTree","skills","freeLangsNum","freeLangsNumGeneral","freeLangsNumSpecial","tree","treeName","sort","a","b","listPosition","filter","RegisterNewUserComponent","hasRegisterFailed","setRegisterFailed","errorMessage","setErrorMessage","registerClickable","setRegisterClickable","useEffect","document","title","persist","post","API_URL","res","err","response","data","requestRegisterNewUser","NewPasswordComponent","password2","updatePassword2","match","params","requestNewPassword","ForgotPasswordComponent","PDFDocument","PDFArray","PDFHexString","PDFNumber","breakTextIntoLines","PDFOperator","degrees","drawLinesOfText","Ops","PDFOperatorNames","PDFName","rgb","StandardFonts","asPDFName","PDFBool","PDFContentStream","pushGraphicsState","popGraphicsState","getAcroForm","pdfDoc","catalog","lookup","of","getAcroFields","acroForm","fieldRefs","lookupMaybe","fields","Array","idx","len","lockField","acroField","set","findAcroFieldByName","fieldName","fillAcroTextField","text","font","multiline","rect","N","multiLineAppearanceStream","singleLineAppearanceStream","context","obj","fromText","sizeAtHeight","lines","encodeText","textFieldAppearanceStream","t","widthOfTextAtSize","line","x","y","tag","dict","doc","Type","Subtype","FormType","BBox","Font","F0","ref","operators","BeginMarkedContent","rotate","xSkew","ySkew","lineHeight","EndMarkedContent","stream","register","PrintCharacterSheet","state","savedSkillPoints","fetch","KonCharacterSheet","arrayBuffer","pdfStream","load","registerFontkit","fontkit","embedFont","TimesRoman","timesRomanFont","HelveticaBold","helveticaBold","True","fillInField","field","Error","toString","magicPowerField","craftPointField","productionPointField","skillBox","s","roleplayingSkills1","roleplayingSkills2","chosen","druid","medium","merchant","status","skillName","push","roleplayTrees","forEach","save","pdfBytes","blob","Blob","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","Download","App","APP_VER","loadingSkills","combat","general","production","crafting","roleplaying","scholar","specialaccess","aegis","battle","nature","necromancy","compulsion","restoration","enchantment","defaultAvatar","sortSkillsByTree","setState","prevState","saveLocalCharacter","values","JSON","stringify","loadLocalCharacter","localStorageCharacter","parse","method","checkCharacterFreeLanguages","updatedInfo","replace","playerHasFaekinBonusLanguage","checkCharacterAvailableSkillsFromScholar","uncommonLanguages","removeSkillByName","playerHasVargainenBonusLanguage","numericValidation","addFreeLanguages","languageNamesArray","hasFreeLanguages","generalSkills","specialSkills","languageName","getLanguageByName","getLanguageByNameSpecialAccess","lang","removeSkill","calculateBaseSkillPoints","newSkillPointsRemaining","calculateSpentSkillPoints","spent","playerResources","checkRequirements","requiredSkill","requires","pSkills","pSkill","checkedSkill","madRamblings","playerIsFaekin","addSkill","playerIsDrake","playerHasDrakeBonusLanguage","playerIsVargainen","isUncommonLanguage","isRareLanguage","rareLanguages","isScholarRitual","rituals","canPlayerGetThisRitualSkill","refundDuplicateRitual","canPlayerGetThisRoleplayingSkill","doesPlayerHaveMagicPower","skillIsPrerequisite","isMagicTree","canPlayerRemoveThisNonRitualMagicSkill","scholarCanBeUnchecked","hasScholarSkills","isNewScholarSkill","isSpecialAccessSkillAttainable","doesPlayerHaveAnySpells","playerMagicTreeSkills","playerSpecialAccesSkills","specialAccesSkill","playerSkill","playerRPSkills","tierThreePlayerRPSkills","requirementSkillString","pSkill2","arrSkill","printCharacterSheetDisabled","URL","parseInt","isInt","NaN","parseFloat","clear","skillTree","exact","path","staate","component","withAlert","position","positions","TOP_CENTER","offset","transition","transitions","FADE","render","template","AlertTemplate","getElementById"],"mappings":"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","file":"static/js/main.a1d428b6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/default.79216e9e.png\";","module.exports = __webpack_public_path__ + \"static/media/ncs_2022.b04925b2.pdf\";","function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\r\n\r\nvar React = _interopDefault(require('react'));\r\n\r\nvar BaseIcon = function BaseIcon(_ref) {\r\n  var color = _ref.color,\r\n      _ref$pushRight = _ref.pushRight,\r\n      pushRight = _ref$pushRight === undefined ? true : _ref$pushRight,\r\n      children = _ref.children;\r\n  return React.createElement(\r\n    'svg',\r\n    {\r\n      xmlns: 'http://www.w3.org/2000/svg',\r\n      width: '24',\r\n      height: '24',\r\n      viewBox: '0 0 24 24',\r\n      fill: 'none',\r\n      stroke: color,\r\n      strokeWidth: '2',\r\n      strokeLinecap: 'round',\r\n      strokeLinejoin: 'round',\r\n      style: { marginRight: pushRight ? '20px' : '0', minWidth: 24 }\r\n    },\r\n    children\r\n  );\r\n};\r\n\r\nvar InfoIcon = function InfoIcon() {\r\n  return React.createElement(\r\n    BaseIcon,\r\n    { color: '#2E9AFE' },\r\n    React.createElement('circle', { cx: '12', cy: '12', r: '10' }),\r\n    React.createElement('line', { x1: '12', y1: '16', x2: '12', y2: '12' }),\r\n    React.createElement('line', { x1: '12', y1: '8', x2: '12', y2: '8' })\r\n  );\r\n};\r\n\r\nvar SuccessIcon = function SuccessIcon() {\r\n  return React.createElement(\r\n    BaseIcon,\r\n    { color: '#31B404' },\r\n    React.createElement('path', { d: 'M22 11.08V12a10 10 0 1 1-5.93-9.14' }),\r\n    React.createElement('polyline', { points: '22 4 12 14.01 9 11.01' })\r\n  );\r\n};\r\n\r\nvar ErrorIcon = function ErrorIcon() {\r\n  return React.createElement(\r\n    BaseIcon,\r\n    { color: '#FF0040' },\r\n    React.createElement('circle', { cx: '12', cy: '12', r: '10' }),\r\n    React.createElement('line', { x1: '12', y1: '8', x2: '12', y2: '12' }),\r\n    React.createElement('line', { x1: '12', y1: '16', x2: '12', y2: '16' })\r\n  );\r\n};\r\n\r\nvar CloseIcon = function CloseIcon() {\r\n  return React.createElement(\r\n    BaseIcon,\r\n    { color: '#FFFFFF', pushRight: false },\r\n    React.createElement('line', { x1: '18', y1: '6', x2: '6', y2: '18' }),\r\n    React.createElement('line', { x1: '6', y1: '6', x2: '18', y2: '18' })\r\n  );\r\n};\r\n\r\nvar _extends = Object.assign || function (target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var source = arguments[i];\r\n\r\n    for (var key in source) {\r\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n        target[key] = source[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return target;\r\n};\r\n\r\nvar alertStyle = {\r\n  borderStyle: 'solid',\r\n  borderColor: 'black',\r\n  backgroundColor: '#333',\r\n  color: 'white',\r\n  padding: '10px',\r\n  borderRadius: '1px',\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  boxShadow: '0px 2px 2px 2px rgba(0, 0, 0, 0.03)',\r\n  fontFamily: 'Arial',\r\n  width: '250px',\r\n  boxSizing: 'border-box'\r\n};\r\n\r\nvar buttonStyle = {\r\n  marginLeft: '20px',\r\n  border: 'none',\r\n  backgroundColor: 'transparent',\r\n  cursor: 'pointer',\r\n  color: '#FFFFFF'\r\n};\r\n\r\nvar AlertTemplate = function AlertTemplate(_ref) {\r\n  var message = _ref.message,\r\n      options = _ref.options,\r\n      style = _ref.style,\r\n      close = _ref.close;\r\n\r\n  return React.createElement(\r\n    'div',\r\n    { onClick: close, style: _extends({}, alertStyle, style) },\r\n    options.type === 'info' && React.createElement(InfoIcon, null),\r\n    options.type === 'success' && React.createElement(SuccessIcon, null),\r\n    options.type === 'error' && React.createElement(ErrorIcon, null),\r\n    React.createElement(\r\n      'span',\r\n      { style: { flex: 2, whiteSpace: 'initial', textAlign: 'center' } },\r\n      message\r\n    ),\r\n    React.createElement(\r\n      'button',\r\n      { style: buttonStyle },\r\n      React.createElement(CloseIcon, null)\r\n    )\r\n  );\r\n};\r\n\r\nmodule.exports = AlertTemplate;\r\n","import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_DOMAIN\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        \r\n        return axios.get(`${API_URL}/auth`,\r\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        let basicAuth = 'Basic ' + window.btoa(username + \":\" + password)\r\n\r\n        return basicAuth\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n\r\n        localStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        console.log(\"you are now logged in as: \")\r\n        console.log(localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME))\r\n        console.log(\"\\n\\n\\n\\n\\n\")\r\n        localStorage.setItem(\"USER_TOKEN\", this.createBasicAuthToken(username, password))\r\n        this.setupAxiosInterceptors(localStorage.getItem(\"USER_TOKEN\"))\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()\r\n","import React, { useState } from 'react';\r\nimport AuthenticationService from '../services/AuthenticationService';\r\nimport { useAlert } from 'react-alert';\r\n\r\nfunction LoginComponent(props) {\r\n    const APP_URL = process.env.REACT_APP_DOMAIN\r\n\r\n    const [email, updateEmail] = useState('');\r\n    const [password, updatePassword] = useState('');\r\n    const [hasLoginFailed, setLoginFailed] = useState(false);\r\n    const [showSuccessMessage, setSuccessMessage] = useState(false);\r\n    const alert = useAlert();\r\n\r\n    const loginClicked = () => {\r\n        ///console.log(\"\\n\\n\\n\\n\\n\")\r\n        //console.log(\"attempting to login\")\r\n        //console.log(\"\\n\\n\\n\\n\\n\")\r\n\r\n        AuthenticationService\r\n            .executeBasicAuthenticationService(email, password)\r\n            .then(() => {\r\n                AuthenticationService.registerSuccessfulLogin(email, password)\r\n                alert.show(\"Login Successful\", {type:'success', timeout: 5000})\r\n                // this.props.history.push(`/courses`)\r\n\r\n                props.toggleModal();\r\n                props.getUserLoggedInProp(AuthenticationService.isUserLoggedIn());\r\n                props.loadCharacterList(alert);\r\n\r\n            }).catch(() => {\r\n                setSuccessMessage(false);\r\n                setLoginFailed(true);\r\n                //console.log(\"Login Failed. Likely invalid credentials (401)\")\r\n                //console.log(\"\\n\\n\\n\\n\\n\")\r\n            })\r\n    }\r\n\r\n    const eventUpdateEmail = (event) => updateEmail(event.target.value);\r\n    const eventUpdatePassword = (event) => updatePassword(event.target.value);\r\n\r\n    return (\r\n        <div>\r\n        {!props.isUserLoggedIn &&\r\n                <div className=\"container form-group d-flex flex-column\">\r\n                    <h1 className=\"text-center\">Login</h1>\r\n\r\n                    {hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\r\n\r\n                    {showSuccessMessage && <div className=\"alert alert-success text-center\">Login Successful</div>}\r\n\r\n                    Email: <input type=\"text\" className=\"form-control\" name=\"email\" value={email} onChange={eventUpdateEmail}/>\r\n\r\n                    Password: <input type=\"password\" className=\"form-control\" name=\"password\" value={password} onChange={eventUpdatePassword}/>\r\n\r\n                    <button className=\"btn btn-lg btn-success p-1 mt-3 mb-2\" onClick={loginClicked}>Login</button>\r\n                    <div>\r\n                        <a href={APP_URL + '/#/register'} className=\"btn btn-outline-secondary text-center\">Create account</a>\r\n                        <a href={APP_URL + '/#/forgot'} className=\"btn btn-outline-secondary text-center\">Forgot your password?</a>\r\n                        \r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginComponent","import React from 'react';\r\nimport AuthenticationService from '../services/AuthenticationService'\r\nimport { useAlert } from 'react-alert';\r\n\r\nexport default function LogoutComponent(props) {\r\n    const alert = useAlert();\r\n\r\n    const logout = () => {\r\n        AuthenticationService.logout()\r\n        alert.show('Logout Successful', {type:'success', timeout:5000})\r\n        props.getUserLoggedInProp(AuthenticationService.isUserLoggedIn())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n                <button className=\"btn btn-danger\" onClick={logout}>Logout</button> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NavCharacterList(props) {\r\n    // return a div map of all users characters by id\r\n    // on click, handleMethod, message, and characterId is passed to our confirmationModal\r\n    // to have the user confirm before losing/overwriting data\r\n    \r\n    return props.characterList.map((character) => {\r\n            \r\n            return <div className=\"character-list-slot btn-success btn-sm\"\r\n\r\n            id={character.id} \r\n\r\n            onClick={() => \r\n                {props.setCurrentConfirmationModal(\r\n                    // pass handle method (save/load/delete)\r\n                    props.handleCharacter, \r\n                    // pass related save/load/delete message with character name\r\n                    (props.message + character.characterName + \")\"), \r\n                    // pass character id if user confirms choice\r\n                    character.id)}}>\r\n\r\n                    {/* displayed as \"Charactername. level race */}\r\n                    {character.characterName}.&nbsp;<br />Level&nbsp;{character.level}&nbsp;{character.race}\r\n                \r\n            </div>\r\n        });\r\n}\r\n","import React from 'react'\r\nimport { Modal, ModalBody, ModalFooter, Button } from 'reactstrap'\r\n\r\nexport default function ConfirmationModal(props) {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={props.confirmationModalIsOpen} toggle={props.toggleConfirmationModalIsOpen}>\r\n                <ModalBody>\r\n                    {props.message}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button className=\" m-auto w-50 \" color=\"secondary\" onClick={props.toggleConfirmationModalIsOpen}>Cancel</Button>\r\n                    <Button className=\" m-auto w-50 \" color=\"success\" onClick={() => {props.handleCharacter(props.id, props.alert);props.toggleConfirmationModalIsOpen()}}>Confirm</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport LoginComponent from '../user_management/components/LoginComponent';\r\nimport LogoutComponent from '../user_management/components/LogoutComponent';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n    // NavbarText\r\n} from 'reactstrap';\r\nimport { animated } from 'react-spring';\r\nimport { Transition } from 'react-spring/renderprops';\r\nimport AuthenticationService from '../user_management/services/AuthenticationService';\r\nimport NavCharacterList from '../user_management/components/NavCharacterList';\r\nimport ConfirmationModal from '../user_management/components/ConfirmationModal';\r\nimport { useAlert } from 'react-alert';\r\nimport { setCharacterSpacing } from 'pdf-lib';\r\n\r\n// Navigation is the house for our character / user management\r\n\r\nfunction Navigation(props) {\r\n  const [navbarIsOpen, setNavbarIsOpen] = useState(false);\r\n  const [loginModalIsOpen, setLoginModalIsOpen] = useState(false);\r\n  const [skillResetModalIsOpen, setSkillResetModalIsOpen] = useState(false);\r\n  const [confirmationModalIsOpen, setConfirmationModalIsOpen] = useState(false);\r\n  const [xpCalcModalIsOpen, setXpCalcModalIsOpen] = useState(false);\r\n  const [xpCalcResultModalIsOpen, setXpCalcResultModalIsOpen] = useState(false);\r\n  const [xpCalcInput, setXpCalcInput] = useState(\"\");\r\n\r\n\r\n  // alert popup system\r\n  const alert = useAlert();\r\n\r\n  // log state test button\r\n  // const logs = () => {console.log(props.staate)}\r\n\r\n  // download PDF button wrapped in a timeout function\r\n  const [downloadClickable, setDownloadClickable] = useState(true);\r\n\r\n  const downloadClicked = () => {\r\n    // downloadclickable is used as a disabled bool for the button in nav\r\n    setDownloadClickable(false);\r\n    props.printCharacterSheet()\r\n\r\n    // print it and re-enable the button after 2 seconds\r\n    setTimeout(() => {\r\n        setDownloadClickable(true)\r\n        }, 2000)\r\n    \r\n  }\r\n\r\n  // navbar collapse/expand\r\n  const toggleNavbar = () => setNavbarIsOpen(!navbarIsOpen);\r\n\r\n  // xp calc modal\r\n  const toggleXpCalcModal = () => setXpCalcModalIsOpen(!xpCalcModalIsOpen);\r\n  const toggleXpCalcResultModal = () => setXpCalcResultModalIsOpen(!xpCalcResultModalIsOpen);\r\n  \r\n\r\n  const [calcResultMessage, setCalcResultMessage] = useState(\"\");\r\n\r\n  const userClickedCalculateXp = (input) => {\r\n    let xp = props.calculateXpFromLevel(input);\r\n    if (!isNaN(xp)) {\r\n        setCalcResultMessage(\"You have at least \"+xp+\" XP\");\r\n    } else {\r\n        setCalcResultMessage(\"Invalid input. Please input a number between 1 and... like 99999 or something\");\r\n    }\r\n    toggleXpCalcResultModal();\r\n  }\r\n\r\n  const userClickedCalculateLevel = (input) => {\r\n    let level = props.calculateLevelFromXp(input);\r\n    if (!isNaN(level)) {\r\n        setCalcResultMessage(\"With \" + input + \" XP, you are level \" + level);\r\n    } else {\r\n        setCalcResultMessage(\"Invalid input. Please input a number between 1 and... like 99999 or something\");\r\n    }\r\n    toggleXpCalcResultModal();\r\n  }\r\n\r\n\r\n  // login modal\r\n  const toggleLoginModal = () => setLoginModalIsOpen(isUserLoggedIn ? false : !loginModalIsOpen);\r\n\r\n  // skill reset modal\r\n  const toggleSkillResetModalIsOpen = () => {\r\n    setSkillResetModalIsOpen(!skillResetModalIsOpen)};\r\n\r\n  // confirmation modal\r\n  // the confirmationModal is setup to handle Save/Load/Delete based on the user \r\n  // clicking a character in one of our NavCharacterLists\r\n  const toggleConfirmationModalIsOpen = () => {\r\n    setConfirmationModalIsOpen(!confirmationModalIsOpen)};\r\n    \r\n    // handleMethod is Save/Load/Delete character, set by whichever list option is clicked\r\n    const [handleMethod, setHandleMethod] = useState(\"\");\r\n    // message is added to confirmationModal as \"are you sure you want to save/load/delete?\" similarly to the handleMethod\r\n    const [message, setMessage] = useState(\"\");\r\n    // id is added to confirmationModal, \r\n    const [id, setId] = useState(null);\r\n\r\n  // when the user clicks to save/load/delete a character,\r\n  // a confirmationModal is setup with the following args\r\n  // and then displayed to make sure the user meant to take that action \r\n  const setCurrentConfirmationModal = (handleMethod, message, id) => {\r\n    setHandleMethod(() => handleMethod);\r\n    setMessage(message);\r\n    setId(id);\r\n    toggleConfirmationModalIsOpen();\r\n  }\r\n\r\n  // local state isUserLoggedIn is a little clunky, but updating local State makes rendering changes\r\n  // to the buttons and lists easier\r\n  const [isUserLoggedIn, setUserLoggedIn] = useState(AuthenticationService.isUserLoggedIn());\r\n  const getUserLoggedInProp = (boolean) => {\r\n    setUserLoggedIn(boolean);\r\n  }\r\n\r\n  // using react-spring render-props API to make an animation transition\r\n  // this will hide the character list features when user is not logged in\r\n  const hideWhenNotLoggedInWrap = (content) => {\r\n      // Transition object controls opacity animation.\r\n      // Used to show/hide content on login/logout\r\n    return <div className=\"align-items-center d-flex\"><Transition\r\n        items={isUserLoggedIn}\r\n        from={{ opacity: 0 }}\r\n        enter={{ opacity: 1 }}\r\n        leave={{ opacity: 0 }}>\r\n        {isUserLoggedIn => isUserLoggedIn && ((transitionProps) => <animated.div style={transitionProps}> \r\n            \r\n            {/* below content arg is whatever element we want to show when user logs in */}\r\n            {content}\r\n\r\n    </animated.div>)}</Transition></div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <Navbar className=\"navbar navbar-dark\" light expand=\"md\">\r\n        <NavbarToggler onClick={toggleNavbar} />\r\n\r\n        <Collapse isOpen={navbarIsOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n\r\n            <NavItem className=\"align-items-center d-flex\">\r\n              <NavLink href=\"http://kingdomsofnovitas.net/\">kingdomsofnovitas.net</NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem className=\"align-items-center d-flex\">\r\n              <NavLink href=\"https://www.facebook.com/groups/KingdomsOfNovitas/\">Facebook</NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n                <NavLink>\r\n                     <button className=\"navButton\" onClick={toggleSkillResetModalIsOpen} >Reset Skills</button>\r\n                </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n                <NavLink>\r\n                     <button className=\"navButton\" onClick={toggleXpCalcModal} >XP Calculator</button>\r\n                </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n                <NavLink>\r\n                     <button className=\"navButton\" onClick={props.lockChanges} >{props.locked ? \"Unl\" : \"L\"}ock Editing</button>\r\n                </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem className=\"align-items-center d-flex\">\r\n                { isUserLoggedIn && <LogoutComponent getUserLoggedInProp={getUserLoggedInProp} /> }\r\n\r\n                { !isUserLoggedIn &&<Button color=\"success\" onClick={toggleLoginModal}>Login</Button>}\r\n            </NavItem>\r\n\r\n            {hideWhenNotLoggedInWrap(\r\n                <NavItem>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                    Save\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                    <NavCharacterList characterList={props.characterList} handleCharacter={props.saveCharacter} setCurrentConfirmationModal={setCurrentConfirmationModal} message={\"Are you sure you want to save this character? (Character in slot: \"}/>\r\n                    <div className=\"character-list-slot btn-success btn-sm\" onClick={()=>{setCurrentConfirmationModal(props.saveCharacter, \"Are you sure you want to save a new character?\")}}>New Character</div>\r\n                </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n            </NavItem>\r\n            )}\r\n            {hideWhenNotLoggedInWrap(\r\n            <NavItem>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                    Load\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                    <NavCharacterList characterList={props.characterList} handleCharacter={props.loadCharacter} setCurrentConfirmationModal={setCurrentConfirmationModal} message={\"Are you sure you want to load this character? (Character: \"}/>\r\n                </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n            </NavItem>\r\n            )}\r\n            {hideWhenNotLoggedInWrap(\r\n            <NavItem>\r\n                    <UncontrolledDropdown nav inNavbar>\r\n                    <DropdownToggle nav caret>\r\n                        Delete\r\n                    </DropdownToggle>\r\n                    <DropdownMenu right>\r\n                        <NavCharacterList characterList={props.characterList} handleCharacter={props.deleteCharacter} setCurrentConfirmationModal={setCurrentConfirmationModal} message={\"Are you sure you want to load this character? (Character: \"}/>\r\n                    </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n            </NavItem>\r\n            )}\r\n\r\n            <NavItem>\r\n                <NavLink>\r\n                     <button className=\"navButton\" disabled={!downloadClickable} onClick={downloadClicked} >Download PDF</button>\r\n                </NavLink>\r\n            </NavItem>\r\n\r\n          </Nav>\r\n        </Collapse>\r\n                \r\n                {/* // login modal */}\r\n                <Modal isOpen={loginModalIsOpen} toggle={toggleLoginModal}>\r\n                    <ModalHeader toggle={toggleLoginModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <LoginComponent isUserLoggedIn={isUserLoggedIn} getUserLoggedInProp={getUserLoggedInProp} toggleModal={toggleLoginModal} loadCharacterList={props.loadCharacterList}/>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                            <Button className=\" m-auto w-50 \" color=\"secondary\" onClick={toggleLoginModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                {/* confirm skill reset modal */}\r\n                <Modal isOpen={skillResetModalIsOpen} toggle={toggleSkillResetModalIsOpen}>\r\n                    <ModalBody>\r\n                        <div>Are you sure you want to reset your skills? (Unsaved changes will be lost)</div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button className=\" m-auto w-50 \" color=\"secondary\" onClick={toggleSkillResetModalIsOpen}>Cancel</Button>\r\n                        <Button className=\" m-auto w-50 \" color=\"success\" onClick={() => {props.resetSkills(); toggleSkillResetModalIsOpen();}}>Reset Skills</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                {/* xp calc modal */}\r\n                <Modal isOpen={xpCalcModalIsOpen} toggle={toggleXpCalcModal}>\r\n                    <ModalBody>\r\n                        <input className=\" m-auto w-100 xpinput\" placeholder=\"type in an amount of experience, or a level\" onInput={e => {setXpCalcInput(e.target.value)}}></input>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button className=\" mt-auto ml-auto mr-auto mb-3 w-33 \" color=\"secondary\" onClick={toggleXpCalcModal}>Cancel</Button>\r\n                        <Button className=\" mt-auto ml-auto mr-auto mb-3 w-33 \" color=\"success\" onClick={() => {toggleXpCalcModal(); userClickedCalculateLevel(xpCalcInput);}}>Calculate Level from XP</Button>\r\n                        <Button className=\" mt-auto ml-auto mr-auto mb-3 w-33 \" color=\"success\" onClick={() => {toggleXpCalcModal(); userClickedCalculateXp(xpCalcInput);}}>Calculate XP from Level</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                {/* xp calc result modal */}\r\n                <Modal isOpen={xpCalcResultModalIsOpen} toggle={toggleXpCalcResultModal}>\r\n                    <ModalBody>\r\n                        <div>{calcResultMessage}</div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button className=\" m-auto w-100 \" color=\"success\" onClick={() => {toggleXpCalcResultModal(); setXpCalcInput(\"\");}}>OK</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                {/* confirm save/load/delete modal */}\r\n                <ConfirmationModal confirmationModalIsOpen={confirmationModalIsOpen}\r\n                toggleConfirmationModalIsOpen={toggleConfirmationModalIsOpen}\r\n                handleCharacter={handleMethod} message={message} id={id} alert={alert} />\r\n               \r\n        </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport {Container} from 'reactstrap';\r\n\r\n// Header contains our title and the Navigation bar\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <div className=\"header-title\">\r\n                        <h1>KINGDOMS OF NOVITAS</h1>\r\n                        <h2>Online Character Sheet | Skill Calculator</h2>\r\n                    </div>\r\n                    <Navigation \r\n                        lockChanges={this.props.lockChanges} \r\n                        resetSkills={this.props.resetSkills}\r\n                        locked={this.props.locked} \r\n                        saveCharacter={this.props.saveCharacter} \r\n                        loadCharacter={this.props.loadCharacter} \r\n                        deleteCharacter={this.props.deleteCharacter} \r\n                        characterList={this.props.characterList} \r\n                        loadCharacterList={this.props.loadCharacterList}\r\n                        printCharacterSheet={this.props.printCharacterSheet}\r\n                        calculateXpFromLevel={this.props.calculateXpFromLevel}\r\n                        calculateLevelFromXp={this.props.calculateLevelFromXp}\r\n                        // passed to button for testing\r\n                        // staate={this.props.staate}\r\n                        />\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Nav.propTypes = {\r\n//     lockChanges: PropTypes.func.isRequired\r\n// }\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction CharacterInfoInput(props) {\r\n    // the display for character info where the input should be text\r\n    let cName = \"info-input\";\r\n    if (props.infoName === \"characterName\") {\r\n        cName += \" name\";\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {props.displayName}:<br />&nbsp;\r\n        <input \r\n            className={cName}\r\n            type=\"text\" \r\n            placeholder={props.placeholder} \r\n            maxLength={props.maxLength} \r\n            value={props.infoValue} \r\n            disabled={props.lockChanges} \r\n            onChange = {e => {\r\n                props.characterInfoChange(props.infoName, e.target.value)}}/>\r\n        </div>\r\n);\r\n\r\n}\r\n\r\nexport default CharacterInfoInput;","import React, { useState } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nexport default function CharacterInfoDropdownCountries(props) {\r\n    // the display for character info where the input should be a drop down\r\n    \r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    // countries placeholder\r\n    const countries = props.countries\r\n\r\n    const optionsMap = (countries === undefined ? <div>Loading countries...</div> : countries.map(i => ( <DropdownItem className=\"info-dropdown-item\" disabled={props.lockChanges} key={i.name} onClick={(e) => {props.characterInfoChange(\"country\", i.name)}}>{i.name}</DropdownItem> )))\r\n\r\n    const toggle = () => setDropdownOpen(dropdownOpen => !dropdownOpen);\r\n\r\n    return (\r\n        <div>Country:\r\n            <Dropdown isOpen={dropdownOpen} toggle={toggle} setActiveFromChild={true} size=\"md\">\r\n                <DropdownToggle caret className=\"navButton p-0 pl-2\">\r\n                    <span className={(props.country === \"\" ? \"\" : \"mock-input-dropdown\")}>\r\n                    {(props.country === \"\" ? \"Select a country\" : props.country)}\r\n                    </span>\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {optionsMap}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nexport default function CharacterInfoDropdownRaces(props) {\r\n    // the display for character info where the input should be a drop down\r\n    \r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    // races placeholder\r\n    const races = props.races\r\n\r\n    const optionsMap = (races === undefined ? <div>Loading races...</div> : races.map(i => ( <DropdownItem className=\"info-dropdown-item\" key={i.name} disabled={props.lockChanges} onClick={(e) => {props.characterInfoChange(\"race\", i.name)}}>{i.name}</DropdownItem> )))\r\n\r\n    const toggle = () => setDropdownOpen(dropdownOpen => !dropdownOpen);\r\n\r\n    return (\r\n        <div>Race:\r\n            <Dropdown isOpen={dropdownOpen} toggle={toggle} setActiveFromChild={true} size=\"md\">\r\n                <DropdownToggle caret className=\"navButton p-0 pl-2\">\r\n                    <span className={(props.race === \"\" ? \"\" : \"mock-input-dropdown\")}>\r\n                    {(props.race === \"\" ? \"Select a race\" : props.race)}</span>\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {optionsMap}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react';\r\nimport { Container, Row, Col, } from 'reactstrap';\r\nimport CharacterInfoInput from './CharacterInfoInput';\r\nimport CharacterInfoDropdownCountries from './CharacterInfoDropdownCountries';\r\nimport CharacterInfoDropdownRaces from './CharacterInfoDropdownRaces';\r\n\r\nexport class CharacterInfo extends Component {\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"characterinfo-box\">\r\n                                <div className=\"characterinfo-content\">\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <CharacterInfoInput \r\n                                                className=\"inputbox\"\r\n                                                displayName=\"Character Name\"\r\n                                                infoName=\"characterName\" \r\n                                                infoValue={this.props.characterName}\r\n                                                maxLength=\"50\"\r\n                                                placeholder=\"Enter a Character Name\"\r\n                                                characterInfoChange={this.props.characterInfoChange}\r\n                                                lockChanges={this.props.lockChanges}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                                <CharacterInfoDropdownRaces \r\n                                                    characterInfoChange={this.props.characterInfoChange}\r\n                                                    race={this.props.race}\r\n                                                    races={this.props.races}\r\n                                                    lockChanges={this.props.lockChanges} />\r\n                                        </Col>\r\n\r\n                                        <Col>\r\n                                            <CharacterInfoDropdownCountries \r\n                                                characterInfoChange={this.props.characterInfoChange}\r\n                                                country={this.props.country}\r\n                                                countries={this.props.countries}\r\n                                                lockChanges={this.props.lockChanges} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <CharacterInfoInput \r\n                                            className=\"inputbox\"\r\n                                            nameClass=\" name\"\r\n                                            displayName=\"Player\"\r\n                                            infoName=\"player\" \r\n                                            infoValue={this.props.player}\r\n                                            maxLength=\"32\"\r\n                                            placeholder=\"Enter a player name\"\r\n                                            characterInfoChange={this.props.characterInfoChange}/>\r\n                                        </Col>\r\n                                        \r\n                                        <Col>\r\n                                            <CharacterInfoInput \r\n                                            className=\"inputbox\"\r\n                                            displayName=\"Level\"\r\n                                            infoName=\"level\" \r\n                                            infoValue={this.props.level}\r\n                                            maxLength=\"3\"\r\n                                            placeholder=\"1\"\r\n                                            characterInfoChange={this.props.characterInfoChange}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"skillpointsremaining\">Skill Points Remaining: <div className=\"mock-input\">&nbsp;&nbsp;{this.props.calculateSkillPointsRemaining()}</div></div>\r\n                                        </Col>\r\n                                        \r\n                                        <Col>\r\n                                            <CharacterInfoInput \r\n                                                className=\"inputbox\"\r\n                                                displayName=\"Saved XP\"\r\n                                                infoName=\"savedXp\" \r\n                                                infoValue={this.props.savedXp}\r\n                                                maxLength=\"3\"\r\n                                                placeholder=\"0\"\r\n                                                lockChanges={this.props.lockChanges}\r\n                                                characterInfoChange={this.props.characterInfoChange}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CharacterInfo","import React, { useState } from 'react'\r\nimport { Container, } from 'reactstrap';\r\nimport { Modal,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Button, \r\n    Collapse} from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronDown, faChevronUp} from '@fortawesome/free-solid-svg-icons'\r\n\r\n    \r\nexport default function CharacterBio(props) {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [collapseIsOpen, setCollapseIsOpen] = useState(false);\r\n    const [url, setUrl] = useState(props.characterPicture)\r\n\r\n    return (\r\n            <div>\r\n                <Container>\r\n                        {/* COLLAPSING HEADER */}\r\n                        <h3 className=\"collapser-header mb-0 d-flex justify-content-between\">\r\n                        <button className=\"btn-sm btn-dark float-left\" onClick={() => setCollapseIsOpen(!collapseIsOpen)}><FontAwesomeIcon icon={collapseIsOpen ? faChevronUp : faChevronDown} /></button>\r\n\r\n                        <span className=\"text-align-center justify-content-center\">Character Bio</span>\r\n\r\n                        <button className=\"btn-sm btn-dark float-right\" onClick={() => setCollapseIsOpen(!collapseIsOpen)}><FontAwesomeIcon icon={collapseIsOpen ? faChevronUp : faChevronDown} /></button></h3>\r\n                    <Collapse isOpen={collapseIsOpen}>\r\n\r\n\r\n                        <div className=\"character-bio mb-0 mt-0 d-flex flex-wrap flex-row\">\r\n                            {/* CHARACTER PICTURE BOX */}\r\n                            <div className=\"imgbox p-2\">\r\n                                <div className=\"imgbox-overlay\" onClick={() => {if (!props.lockChanges) {setIsOpen(!isOpen)}}}></div>\r\n\r\n                                <img className=\"character-picture pd-2\" src={props.characterPicture}></img>\r\n\r\n                                <div className=\"imgboxtext\">\r\n                                    change picture\r\n                                </div>\r\n                            </div>\r\n\r\n                            {/* CHARACTER BIOGRAPHY TEXTBOX */}\r\n                                <textarea value={props.characterBio} className=\"character-bio-text m-2 pd-2 flex-grow-1\" type=\"text\" placeholder=\"Enter a character description\" maxLength=\"100000\" disabled={props.lockChanges} onInput={e => {props.changeCharacterBio(e.target.value)}} />\r\n                            {/* </div> */}\r\n\r\n                        </div>\r\n                    </Collapse>\r\n                </Container>\r\n\r\n                {/* character picture URL changer modal */}\r\n                <Modal isOpen={isOpen} >\r\n                    <ModalBody>\r\n                        <div>Please enter URL for your character picture</div>\r\n                            \r\n                        <div>Image will be resized to 246x246</div>\r\n                        \r\n                        <div>(must be a direct image link)</div>\r\n\r\n                        <input className=\"character-bio-input\" maxLength=\"100000\" type=\"text\" placeholder=\"enter URL\" onInput={e => {setUrl(e.target.value)}} onPaste={e => {setUrl(e.clipboardData.getData('Text'))}}/>\r\n\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n\r\n                        <Button className=\" m-auto w-50 \" color=\"secondary\" onClick={() => setIsOpen(!isOpen)}>Cancel</Button>\r\n\r\n                        <Button className=\" m-auto w-50 \" color=\"success\" onClick={() => {props.changeCharacterPicture(url); setIsOpen(!isOpen)}}>OK</Button>\r\n\r\n                    </ModalFooter>\r\n                </Modal>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {Row} from 'reactstrap';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nexport default function Resource(props) {\r\n    // simplify prop drilling\r\n    const { removeResource, addResource, lockChanges } = props.props;\r\n    const { resourceName, resource, max, skillCss, cost, displayName } = props;\r\n    \r\n    // Resource bar step\r\n    const step = () => {\r\n        if (max === 20) {\r\n            return 5;\r\n        }\r\n        return 10;\r\n    }\r\n\r\n    // calculated width % string, send to Filler\r\n    const fillBarAnim = useSpring({ width: resource ? resource * step() + '%' : 0 + '%' })\r\n\r\n    // Resource ProgressBar\r\n    const ResourceBar = () => {\r\n        return (\r\n            <div className=\"progress-bar\">\r\n                <div className=\"bar-text\">{displayName}: {resource} / {max}</div>\r\n                <Filler />\r\n            </div>\r\n            )\r\n    }\r\n      \r\n    // ANIMATION CALL ON CLICKING TOO FAST LEAKING MEMORY?\r\n    const Filler = () => {\r\n        return <animated.div className={\"filler \" + skillCss} style={fillBarAnim} />\r\n    }\r\n\r\n    const isLoaded = (resource) => {\r\n        // if the props aren't loaded and they come back as undefined,\r\n        // render the component as \"Loading...\"\r\n        return (resource === undefined) ? <div>Loading...</div> : \r\n\r\n            <Row className=\"d-flex flex-nowrap justify-content-center rscrow\">\r\n\r\n            <button type=\"button\" className=\"btn btn-danger btn-sm rscbtn\" disabled={lockChanges} onClick={() => {\r\n                removeResource(resourceName)\r\n            }}>\r\n\r\n                -\r\n\r\n            </button>\r\n            \r\n            <ResourceBar />\r\n\r\n            <button type=\"button\" className=\"btn btn-success btn-sm rscbtn\" disabled={lockChanges} onClick={() => {\r\n                addResource(resourceName, cost, max)\r\n            }} >\r\n                \r\n                +\r\n                \r\n            </button>\r\n\r\n            <div className=\"resource-cost\">{cost * props.pointsGrantedPerSkillPoint}</div>\r\n\r\n            </Row>\r\n\r\n\r\n            };\r\n\r\n    return isLoaded(resource);\r\n}\r\n","import React, { useState } from 'react'\r\nimport Resource from './Resource';\r\nimport { Collapse } from 'reactstrap' \r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronDown, faChevronUp} from '@fortawesome/free-solid-svg-icons'\r\n\r\nexport default function Resources(props) {\r\n    const [collapseIsOpen, setCollapseIsOpen] = useState(false);\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"resourcebox mt-3\">\r\n\r\n\r\n                {/* With resources, the cost is set locally and not in the database, unlike skills. */}\r\n                        <h3 className=\"collapser-header mb-2 d-flex justify-content-between\">\r\n                        <button className=\"btn-sm btn-dark float-left\" onClick={() => setCollapseIsOpen(!collapseIsOpen)}><FontAwesomeIcon icon={collapseIsOpen ? faChevronUp : faChevronDown} /></button>\r\n\r\n                        <span className=\"text-align-center justify-content-center resources\">Resources</span>\r\n\r\n                        <button className=\"btn-sm btn-dark float-right\" onClick={() => setCollapseIsOpen(!collapseIsOpen)}><FontAwesomeIcon icon={collapseIsOpen ? faChevronUp : faChevronDown} /></button></h3>\r\n\r\n                    {/* <h3 className=\"resources\">Resources</h3> */}\r\n\r\n                    <Collapse isOpen={collapseIsOpen}>\r\n\r\n                    {/* Magic Power */}\r\n                    <Resource props={props} \r\n                                displayName={\"Magic Power\"} \r\n                                cost={props.MAGIC_POINT_COST} \r\n                                max={20}\r\n                                pointsGrantedPerSkillPoint={\"1\"}\r\n                                \r\n                                resourceName={\"magicPoints\"}\r\n\r\n                                resource={props.resources.magicPoints}\r\n                                skillCss={\"magic\"}\r\n                    />\r\n                    \r\n                    {/* Production */}\r\n                    <Resource props={props} \r\n                                displayName={\"Production\"} \r\n                                cost={props.PRODUCTION_POINT_COST} \r\n                                max={20} \r\n                                pointsGrantedPerSkillPoint={\"2\"}\r\n\r\n                                resourceName={\"productionPoints\"}\r\n\r\n                                resource={props.resources.productionPoints}\r\n                                skillCss={\"production\"}\r\n                    />\r\n\r\n                    {/* Craft */}\r\n                    <Resource props={props}\r\n                                displayName={\"Craft\"} \r\n                                cost={props.CRAFT_POINT_COST} \r\n                                max={20}\r\n                                pointsGrantedPerSkillPoint={\"2\"} \r\n\r\n                                resourceName={\"craftPoints\"}\r\n\r\n                                resource={props.resources.craftPoints}\r\n                                skillCss={\"craft\"}\r\n                    />\r\n\r\n                    </Collapse> \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Skill(props){\r\n\r\n    // local management. re-enable if skill checking is bugged,\r\n    // as well as lines 44 & 47\r\n    //const [isChecked, setIsChecked] = useState(false);\r\n\r\n    const playerHasSkill = (playerSkills) => { \r\n        // if state.playerskills are undefined, return false\r\n        return (playerSkills === undefined) ?\r\n            false : compareIds(playerSkills)\r\n    }\r\n    \r\n    // search playerskills for a match\r\n    const compareIds = (playerSkills) => {\r\n\r\n        return playerSkills.some(skill => skill.id === props.skill.id);\r\n\r\n    }\r\n\r\n   const addSpaces = (string) => {\r\n           if (props.skill.tier === 2) {\r\n                return '  ';\r\n           } else if (props.skill.tier === 3) {\r\n                return '    ';\r\n           } else if (props.skill.tier === 4) {\r\n                return '      ';\r\n           } else if (props.skill.tier === 5) {\r\n                return '        ';\r\n           } else if (props.skill.tier === 6) {\r\n            return '          ';\r\n       }\r\n   }\r\n\r\n   const checkedStyle = playerHasSkill(props.playerSkills) ? \" checked\" : \"\";\r\n\r\n   // check if this skill was located in the free language array\r\n   if (props.freeLanguages[0] !== undefined){\r\n        if (props.freeLanguages.find(foundSkill => foundSkill.name === props.skill.name)) {\r\n            return <div className={\"skill row d-flex flex-nowrap checked\"}>\r\n                        <div className={\"skillBody col pl-1 checked\"}>\r\n                            <p>\r\n                            <input disabled={true} type=\"checkbox\" checked={true} /> \r\n                                {' '} {addSpaces(props.skill.name)}\r\n                                {props.skill.name}\r\n                            </p>\r\n                            </div>\r\n                        <div className=\"skillCost d-inline-flex flex-nowrap pr-1\">{props.skill.cost}</div>\r\n                    </div>\r\n        }\r\n    }\r\n\r\n    // YOU CANNOT TAKE MAD RAMBLINGS. NO ONE CAN.\r\n    if (props.skill.name.includes(\"Mad Ramblings\")) {\r\n        return <div className={\"skill row d-flex flex-nowrap madramblings\"}>\r\n                    <div className={\"skillBody col pl-1\"}>\r\n                        <p>\r\n                        <input disabled={props.lockChanges} type=\"checkbox\" checked={false} \r\n                        \r\n                            onChange={e => {\r\n\r\n                            //(setIsChecked(\r\n                                props.playerCheckedASkillBox(props.skill, e.target.checked)\r\n                            ;\r\n                            //);\r\n                        }}/>\r\n                         \r\n                            {' '} {addSpaces(props.skill.name)}\r\n                            {props.skill.name.toUpperCase()}\r\n                        </p>\r\n                        </div>\r\n                    <div className=\"skillCost d-inline-flex flex-nowrap pr-1\">?</div>\r\n                </div>\r\n    }\r\n\r\n    const needsApproval = () => {\r\n    // if skill requires approval, modify string\r\n        if (props.skill.needsApproval === 1) {\r\n            return \"*\"\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"skill row d-flex flex-nowrap \" + checkedStyle}>\r\n            <div className={\"skillBody col pl-1\" + checkedStyle}>\r\n                <p>\r\n                <input disabled={props.lockChanges} type=\"checkbox\" checked={playerHasSkill(props.playerSkills)} \r\n                \r\n                    onChange={e => {\r\n\r\n                        //(setIsChecked(\r\n                            props.playerCheckedASkillBox(props.skill, e.target.checked)\r\n                        ;\r\n                        //);\r\n                }}/> \r\n                    {' '} {addSpaces(props.skill.name)}\r\n                    {props.skill.name}{needsApproval()}\r\n                </p>\r\n                </div>\r\n            <div className=\"skillCost d-inline-flex flex-nowrap pr-1\">{props.skill.cost}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skill\r\n","import React, { useState } from 'react'\r\nimport { Collapse } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronDown, faChevronUp } from '@fortawesome/free-solid-svg-icons'\r\nimport Skill from './Skill';\r\n\r\nexport default function SkillTree(props){\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    const numOfSkillsInTree = props.skills.length;\r\n\r\n    var freeLangsNum = 0;\r\n    var freeLangsNumGeneral = 0;\r\n    var freeLangsNumSpecial = 0;\r\n    for (let skill in props.freeLanguages) {\r\n        if (props.freeLanguages[skill].tree == \"general\") {\r\n            freeLangsNumGeneral++;\r\n        }\r\n        if (props.freeLanguages[skill].tree == \"specialaccess\") {\r\n            freeLangsNumSpecial++;\r\n        }\r\n    }\r\n    if (props.treeName === \"General\") {\r\n        freeLangsNum = freeLangsNumGeneral;\r\n    }\r\n    if (props.treeName === \"Special Access Skills\") {\r\n        freeLangsNum = freeLangsNumSpecial;\r\n    }\r\n\r\n  // display amount of player skills in a given tree\r\n    const numOfPlayerSkillsInTree = () => {\r\n        let playerTreeSkills = props.playerSkills.filter(skill => skill.tree === props.tree).length\r\n        return playerTreeSkills\r\n\r\n    }\r\n    \r\n    props.skills.sort((a,b) => (a.listPosition > b.listPosition) ? 1 : ((b.listPosition > a.listPosition) ? -1 : 0));\r\n\r\n    const skills = props.skills.map((skill) => (\r\n            <Skill key={skill.id} skill={skill} playerCheckedASkillBox={props.playerCheckedASkillBox} lockChanges={props.lockChanges} playerSkills={props.playerSkills} freeLanguages={props.freeLanguages} />\r\n        ))\r\n\r\n        // this is where the list of skills in a tree is generated.   \r\n\r\n    return (\r\n        <div>\r\n                <h3><button className=\"btn-sm btn-dark float-left\" onClick={toggle}><FontAwesomeIcon icon={isOpen ? faChevronUp : faChevronDown} /></button>\r\n\r\n                {props.treeName} {numOfPlayerSkillsInTree() + freeLangsNum} / {numOfSkillsInTree}\r\n\r\n                <button className=\"btn-sm btn-dark float-right\" onClick={toggle}><FontAwesomeIcon icon={isOpen ? faChevronUp : faChevronDown} /></button></h3>\r\n            <Collapse isOpen={isOpen}>\r\n                {skills}\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default function RegisterNewUserComponent() {\r\n    const API_URL = process.env.REACT_APP_API_DOMAIN\r\n    const APP_URL = process.env.REACT_APP_DOMAIN\r\n\r\n    const [email, updateEmail] = useState('');\r\n    const [hasRegisterFailed, setRegisterFailed] = useState(false);\r\n    const [showSuccessMessage, setSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [registerClickable, setRegisterClickable] = useState(true);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Register Account\"\r\n     }, []);\r\n\r\n    const eventUpdateEmail = (event) => updateEmail(event.target.value);\r\n\r\n    const requestRegisterNewUser = (email) => {\r\n        setRegisterClickable(false);\r\n        let url = API_URL + '/register'\r\n        return axios.post(url,\r\n            { \"email\": email })\r\n            .then((res) => {\r\n                console.log(res)\r\n                setSuccessMessage(true)\r\n                setRegisterFailed(false)\r\n            }).catch((err) => {\r\n                setErrorMessage(err.response.data)\r\n                setRegisterFailed(true)\r\n                setRegisterClickable(true);\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container form-group d-flex flex-column\">\r\n                <h1 className=\"text-center\">Register New User</h1>\r\n\r\n                    {hasRegisterFailed && <div className=\"alert alert-warning\">{\"Error: \" + errorMessage}</div>}\r\n\r\n                    {showSuccessMessage && <div className=\"alert alert-success text-center\">Registration Successful. A confirmation email has been sent to the provided email address. Please click the activation link in the email to continue</div>}\r\n\r\n                    {!showSuccessMessage &&\r\n                    <>\r\n                    Email: <input type=\"text\" className=\"form-control\" name=\"email\" value={email} onChange={eventUpdateEmail}/>\r\n\r\n                    <button className=\"btn btn-lg btn-success p-1 mt-3 mb-2\" disabled={!registerClickable} onClick={(event) => {event.persist(); requestRegisterNewUser(email);}}>Register</button>\r\n                    </>\r\n                    }\r\n                    <a href={APP_URL} className=\"text-center m-auto w-50 btn btn-secondary\">Back to homepage</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default function NewPasswordComponent(props) {\r\n    const API_URL = process.env.REACT_APP_API_DOMAIN\r\n    const APP_URL = process.env.REACT_APP_DOMAIN\r\n\r\n    const [password, updatePassword] = useState('');\r\n    const [password2, updatePassword2] = useState('');\r\n    const [hasRegisterFailed, setRegisterFailed] = useState(false);\r\n    const [showSuccessMessage, setSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        document.title = \"Enter New Password\"\r\n     }, []);\r\n\r\n    const eventUpdatePassword = (event) => updatePassword(event.target.value);\r\n    const eventUpdatePassword2 = (event) => updatePassword2(event.target.value);\r\n\r\n    console.log(props)\r\n\r\n    const requestNewPassword = (password, password2) => {\r\n        let url = API_URL + '/confirm?token=';\r\n        return axios.post(url + props.match.params.token,\r\n            { \"p1\": password,\r\n                \"p2\": password2 })\r\n            .then((res) => {\r\n                console.log(res)\r\n                setSuccessMessage(true)\r\n                setRegisterFailed(false)\r\n            }).catch((err) => {\r\n                setErrorMessage(err.response.data)\r\n                setRegisterFailed(true)\r\n            })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container form-group d-flex flex-column\">\r\n            <h1 className=\"text-center\">Enter New Password</h1>\r\n\r\n                    {hasRegisterFailed && <div className=\"alert alert-warning\">{\"Error: \" + errorMessage}</div>}\r\n\r\n                    {showSuccessMessage && <div className=\"alert alert-success text-center\">Password accepted. You may now log in normally. Thank you.</div>}\r\n\r\n                    {!showSuccessMessage &&\r\n                    <>\r\n                    Password: <input type=\"password\" className=\"form-control\" name=\"password\" value={password} onChange={eventUpdatePassword}/>\r\n\r\n                    Confirm Password: <input type=\"password\" className=\"form-control\" name=\"password2\" value={password2} onChange={eventUpdatePassword2}/>\r\n\r\n\r\n                    <button className=\"btn btn-lg btn-success p-1 mt-3 mb-2\" onClick={(event) => {event.persist(); requestNewPassword(password, password2);}}>Submit</button>\r\n                    </>\r\n                    }\r\n                    <a href={APP_URL} className=\"text-center m-auto w-50 btn btn-secondary\">Back to homepage</a>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default function ForgotPasswordComponent() {\r\n    const API_URL = process.env.REACT_APP_API_DOMAIN\r\n    const APP_URL = process.env.REACT_APP_DOMAIN\r\n\r\n    const [email, updateEmail] = useState('');\r\n    const [hasRegisterFailed, setRegisterFailed] = useState(false);\r\n    const [showSuccessMessage, setSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [registerClickable, setRegisterClickable] = useState(true);\r\n\r\n    useEffect(() => {\r\n        document.title = \"Forgot Password\"\r\n     }, []);\r\n\r\n    const eventUpdateEmail = (event) => updateEmail(event.target.value);\r\n\r\n    const requestRegisterNewUser = (email) => {\r\n        setRegisterClickable(false);\r\n        let url = API_URL + '/forgot'\r\n        return axios.post(url,\r\n            { \"email\": email })\r\n            .then((res) => {\r\n                console.log(res)\r\n                setSuccessMessage(true)\r\n                setRegisterFailed(false)\r\n            }).catch((err) => {\r\n                setErrorMessage(err.response.data)\r\n                setRegisterFailed(true)\r\n                setRegisterClickable(true);\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container form-group d-flex flex-column\">\r\n            <h1 className=\"text-center\">Forgot Password?</h1>\r\n\r\n                    {hasRegisterFailed && <div className=\"alert alert-warning\">{\"Error: \" + errorMessage}</div>}\r\n\r\n                    {showSuccessMessage && <div className=\"alert alert-success text-center\">An email has been sent to the provided email address. Please click the forgot password link in the email to continue</div>}\r\n\r\n                    {!showSuccessMessage &&\r\n                    <>\r\n                    Email: <input type=\"text\" className=\"form-control\" name=\"email\" value={email} onChange={eventUpdateEmail}/>\r\n\r\n                    <button className=\"btn btn-lg btn-success p-1 mt-3 mb-2\" disabled={!registerClickable} onClick={(event) => {event.persist(); requestRegisterNewUser(email);}}>Submit</button>\r\n                    </>\r\n                    }\r\n                <a href={APP_URL} className=\"text-center m-auto w-50 btn btn-secondary\">Back to homepage</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import Download from 'downloadjs';\r\nimport Blob from 'blob';\r\nimport KonCharacterSheet from './ncs_2022.pdf';\r\nimport fontkit from '@pdf-lib/fontkit';\r\n\r\nconst { PDFDocument,\r\n    PDFArray,\r\n    PDFHexString,\r\n    PDFNumber,\r\n    breakTextIntoLines,\r\n    PDFOperator,\r\n    degrees,\r\n    drawLinesOfText,\r\n    PDFOperatorNames: Ops,\r\n    PDFName,\r\n    rgb,\r\n    StandardFonts,\r\n    asPDFName,\r\n    PDFBool,\r\n    PDFContentStream,\r\n    pushGraphicsState,\r\n    popGraphicsState } = require('pdf-lib');\r\n\r\n    const getAcroForm = pdfDoc => {\r\n        return pdfDoc.catalog.lookup(PDFName.of('AcroForm'));\r\n    };\r\n  \r\n  const getAcroFields = pdfDoc => {\r\n    const acroForm = getAcroForm(pdfDoc);\r\n    if (!acroForm) return [];\r\n  \r\n    const fieldRefs = acroForm.lookupMaybe(PDFName.of('Fields'), PDFArray);\r\n    if (!fieldRefs) return [];\r\n  \r\n    const fields = new Array(fieldRefs.size());\r\n    for (let idx = 0, len = fieldRefs.size(); idx < len; idx++) {\r\n      fields[idx] = fieldRefs.lookup(idx);\r\n    }\r\n    return fields;\r\n  };\r\n\r\n  const lockField = acroField => {\r\n    acroField.set(PDFName.of('Ff'), PDFNumber.of(1 << 0 /* Read Only */));\r\n  };\r\n  \r\n  const findAcroFieldByName = (pdfDoc, name) => {\r\n    const acroFields = getAcroFields(pdfDoc);\r\n    return acroFields.find(acroField => {\r\n      const fieldName = acroField.get(PDFName.of('T'));\r\n      return !!fieldName && fieldName.value === name;\r\n    });\r\n  };\r\n  \r\n  const fillAcroTextField = (acroField, text, font, multiline = false) => {\r\n    const rect = acroField.lookup(PDFName.of('Rect'), PDFArray);\r\n    const width =\r\n      rect.lookup(2, PDFNumber).value() - rect.lookup(0, PDFNumber).value();\r\n    const height =\r\n      rect.lookup(3, PDFNumber).value() - rect.lookup(1, PDFNumber).value();\r\n  \r\n    const N = multiline\r\n      ? multiLineAppearanceStream(font, text, width, height)\r\n      : singleLineAppearanceStream(font, text, width, height);\r\n  \r\n    acroField.set(PDFName.of('AP'), acroField.context.obj({ N }));\r\n    acroField.set(PDFName.of('Ff'), PDFNumber.of(1 /* Read Only */));\r\n    acroField.set(PDFName.of('V'), PDFHexString.fromText(text));\r\n  };\r\n  \r\n  const beginMarkedContent = tag =>\r\n    PDFOperator.of(Ops.BeginMarkedContent, [asPDFName(tag)]);\r\n  \r\n  const endMarkedContent = () => PDFOperator.of(Ops.EndMarkedContent);\r\n  \r\n  const singleLineAppearanceStream = (font, text, width, height) => {\r\n    const size = font.sizeAtHeight(height - 5);\r\n    // const lineWidth = font.widthOfTextAtSize(text, fillingSize);\r\n    const lines = [font.encodeText(text)];\r\n    const x = 0;\r\n    const y = height - size;\r\n    return textFieldAppearanceStream(font, size, lines, x, y, width, height);\r\n  };\r\n  \r\n  const multiLineAppearanceStream = (font, text, width, height) => {\r\n    const size = 12;\r\n    // const lineWidth = font.widthOfTextAtSize(text, fillingSize);\r\n    const textWidth = t => font.widthOfTextAtSize(t, size);\r\n    const lines = breakTextIntoLines(text, [' '], width, textWidth).map(line =>\r\n      font.encodeText(line),\r\n    );\r\n    const x = 0;\r\n    const y = height - size;\r\n    return textFieldAppearanceStream(font, size, lines, x, y, width, height);\r\n  };\r\n  \r\n  const textFieldAppearanceStream = (font, size, lines, x, y, width, height) => {\r\n    const dict = font.doc.context.obj({\r\n      Type: 'XObject',\r\n      Subtype: 'Form',\r\n      FormType: 1,\r\n      BBox: [0, 0, width, height],\r\n      Resources: { Font: { F0: font.ref } },\r\n    });\r\n  \r\n    const operators = [\r\n      beginMarkedContent('Tx'),\r\n      pushGraphicsState(),\r\n      ...drawLinesOfText(lines, {\r\n        color: rgb(1, 0, 0),\r\n        font: 'F0',\r\n        size: size,\r\n        rotate: degrees(0),\r\n        xSkew: degrees(0),\r\n        ySkew: degrees(0),\r\n        x: x,\r\n        y: y,\r\n        lineHeight: size + 2,\r\n      }),\r\n      popGraphicsState(),\r\n      endMarkedContent(),\r\n    ];\r\n  \r\n    const stream = PDFContentStream.of(dict, operators);\r\n  \r\n    return font.doc.context.register(stream);\r\n  };\r\n\r\n  \r\n  \r\n  export default async function PrintCharacterSheet(state, savedSkillPoints) {\r\n\r\n    const pdfStream = await fetch(KonCharacterSheet).then(res => res.arrayBuffer())\r\n\r\n    const pdfDoc = await PDFDocument.load(pdfStream)\r\n\r\n    pdfDoc.registerFontkit(fontkit);\r\n    const timesRomanFont = await pdfDoc.embedFont(StandardFonts.TimesRoman);\r\n    const helveticaBold = await pdfDoc.embedFont(StandardFonts.HelveticaBold);\r\n\r\n    const acroForm = getAcroForm(pdfDoc);\r\n    acroForm.set(PDFName.of('NeedAppearances'), PDFBool.True);\r\n\r\n    const fillInField = (fieldName, text, font, multiline = false) => {\r\n        const field = findAcroFieldByName(pdfDoc, fieldName);\r\n        if (!field) throw new Error(`Missing AcroField: ${fieldName}`);\r\n        fillAcroTextField(field, text, font, multiline);\r\n      };\r\n\r\n    // fill in character info\r\n    fillInField('CharacterName', state.characterName, timesRomanFont);\r\n    fillInField('Race', state.race, timesRomanFont);\r\n    fillInField('Country', state.country, timesRomanFont);\r\n    fillInField('Player', state.player, timesRomanFont);\r\n    fillInField('SavedSkillPoints', savedSkillPoints.toString(), timesRomanFont);\r\n    fillInField('Level', state.level.toString(), timesRomanFont);\r\n    fillInField('SavedXp', state.savedXp.toString(), timesRomanFont);\r\n\r\n    // fill resources\r\n    for (let i = 0; i < state.resources.magicPoints; i++) {\r\n\r\n        let fieldName = (\"Magic Power \" + (i+1))\r\n\r\n        let magicPowerField =\r\n        findAcroFieldByName(pdfDoc, fieldName);\r\n        if (magicPowerField !== undefined) {\r\n            magicPowerField.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            magicPowerField.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n    // craft and production count by 2, so divide i by half\r\n    for (let i = 0; i <= state.resources.craftPoints; i++) {\r\n        let fieldName = ('Craft ' + (i/2))\r\n\r\n        let craftPointField =\r\n        findAcroFieldByName(pdfDoc, fieldName);\r\n        if (craftPointField !== undefined) {\r\n            craftPointField.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            craftPointField.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n\r\n    for (let i = 1; i <= state.resources.productionPoints; i++) {\r\n        let fieldName = ('Production ' + (i/2))\r\n\r\n        let productionPointField =\r\n        findAcroFieldByName(pdfDoc, fieldName);\r\n        if (productionPointField !== undefined) {\r\n            productionPointField.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            productionPointField.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n\r\n    // fill skills\r\n    for (let skill in state.playerHasSkill) {\r\n        let skillBox = findAcroFieldByName(pdfDoc, state.playerHasSkill[skill].name);\r\n        if (skillBox !== undefined) {\r\n            skillBox.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            skillBox.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n\r\n    // fill free languages\r\n    for (let skill in state.freeLanguages) {\r\n        let skillBox = findAcroFieldByName(pdfDoc, state.freeLanguages[skill].name);\r\n        if (skillBox !== undefined) {\r\n            skillBox.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            skillBox.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n\r\n    // fill roleplaying skills ////////////////////////////////////////////////////////////////////////////////////////\r\n    let roleplayingSkills1 = [];\r\n    let roleplayingSkills2 = [];\r\n\r\n    let chosen = [];\r\n    let druid = [];\r\n    let medium = [];\r\n    let merchant = [];\r\n    let status = [];\r\n    for (let s in state.playerHasSkill) {\r\n        \r\n        if (state.playerHasSkill[s].tree === \"roleplaying\") {\r\n            let skill = state.playerHasSkill[s]\r\n            let skillName = skill.name\r\n\r\n            if (skillName.includes(\"Chosen\")) {\r\n                chosen.push(skill);\r\n            }\r\n\r\n            if (skillName.includes(\"Druid\")) {\r\n                druid.push(skill);\r\n            }\r\n\r\n            if (skillName.includes(\"Medium\")) {\r\n                medium.push(skill);\r\n            }\r\n\r\n            if (skillName.includes(\"Merchant\")) {\r\n                merchant.push(skill);\r\n            }\r\n\r\n            if (skillName.includes(\"Status\")) {\r\n                status.push(skill);\r\n            }\r\n\r\n        }\r\n    }\r\n    chosen.sort();\r\n    druid.sort();\r\n    medium.sort();\r\n    merchant.sort();\r\n    status.sort();\r\n\r\n    let roleplayTrees = [chosen, druid, medium, merchant, status];\r\n\r\n    roleplayTrees.sort((a,b)=>b.length-a.length);\r\n\r\n    if (roleplayTrees[0].length > 0) {\r\n        roleplayingSkills1 = roleplayTrees[0];\r\n\r\n        for (let i=1; i<= roleplayingSkills1.length; i++) {\r\n            let skillBox = findAcroFieldByName(pdfDoc, \"roleplaying_1_\" + i + \"_box\");\r\n\r\n            if (skillBox !== undefined) {\r\n                skillBox.set(PDFName.of('V'), PDFName.of('Yes'));\r\n                skillBox.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n            }\r\n\r\n            fillInField(\"roleplaying_1_\" + i, roleplayingSkills1[i-1].name, helveticaBold);\r\n        }\r\n    }\r\n\r\n    if (roleplayTrees[1].length > 0) {\r\n        roleplayingSkills2 = roleplayTrees[1];\r\n\r\n        for (let i=1; i<= roleplayingSkills2.length; i++) {\r\n            let skillBox = findAcroFieldByName(pdfDoc, \"roleplaying_2_\" + i + \"_box\");\r\n\r\n            if (skillBox !== undefined) {\r\n                skillBox.set(PDFName.of('V'), PDFName.of('Yes'));\r\n                skillBox.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n            }\r\n\r\n            fillInField(\"roleplaying_2_\" + i, roleplayingSkills2[i-1].name, helveticaBold);\r\n        }\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n\r\n\r\n\r\n\r\n    // Now make all the fields read-only\r\n    const acroFields = getAcroFields(pdfDoc);\r\n    acroFields.forEach(field => lockField(field));\r\n    \r\n    const pdfBytes = await pdfDoc.save();\r\n    \r\n    const blob = new Blob([pdfBytes], {type: \"application/pdf\"})\r\n\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n\r\n    // Trigger the browser to download the PDF document\r\n    Download(blob, \"\" + state.characterName + \" \" + mm + \"-\" + dd + \"-\" + yyyy + \".pdf\")\r\n};","import React from 'react';\r\nimport { Container, Row, Col } from 'reactstrap';\r\nimport Header from './site_layout/header/Header';\r\nimport CharacterInfo from './site_layout/character_info/CharacterInfo';\r\nimport CharacterBio from './site_layout/character_bio/CharacterBio';\r\nimport Resources from './site_layout/resources/Resources';\r\nimport SkillTree from './site_layout/skill_trees/SkillTree';\r\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport defaultAvatar from './site_layout/character_bio/default.png'\r\n\r\nimport RegisterNewUserComponent from './site_layout/user_management/components/RegisterNewUserComponent';\r\nimport NewPasswordComponent from './site_layout/user_management/components/NewPasswordComponent';\r\nimport ForgotPasswordComponent from './site_layout/user_management/components/ForgotPasswordComponent';\r\nimport AuthenticationService from './site_layout/user_management/services/AuthenticationService';\r\nimport PrintCharacterSheet from './site_layout/character_sheet/PrintCharacterSheet';\r\n\r\nimport { withAlert } from 'react-alert';\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n\r\n        APP_VER: \"1.1.1\",\r\n        // TOP LEVEL REACT STATE:::\r\n        \r\n        // All of our character information is stored in state. It is overwritten with a localstorage character (if any),\r\n        // or a Database character when selected by the logged in user\r\n        \r\n        // All of a logged in user's characters are stored in characterList\r\n        \r\n        // All of our skills are loaded into skilltree arrays, and player skills are loaded into the playerHasSkill array\r\n        \r\n        // The switch for enabling/disabling skills is also stored here\r\n\r\n        // character info\r\n        id: \"\",\r\n        characterName: \"\",\r\n        country: \"\",\r\n        player: \"\",\r\n        race: \"\",\r\n        level: 0,\r\n        savedXp: 0,\r\n\r\n        // languages a character has for free (to be stored/retrieved from a relational table)\r\n        freeLanguages: [],\r\n\r\n        // character's owned skills\r\n        playerHasSkill: [],\r\n\r\n        // list of characters owned by logged in user\r\n        characterList: [],\r\n\r\n        // list of Races\r\n        races: [],\r\n\r\n        // list of Countries\r\n        countries: [],\r\n        \r\n        // RESOURCES\r\n        resources: {\r\n            magicPoints: 0,\r\n            craftPoints: 0,\r\n            productionPoints: 0,\r\n        },\r\n\r\n        // Cost is tracked in state instead of database using these constant values\r\n            MAGIC_POINT_COST: 1,\r\n        \r\n            // Costs 1 point to get 2 Skill points\r\n            CRAFT_POINT_COST: 0.5,\r\n            PRODUCTION_POINT_COST: 0.5,\r\n        \r\n        // LOCK BUTTONS TO PREVENT EDITING\r\n        locked: false,\r\n\r\n        // SKILLS BEING LOADED?\r\n        loadingSkills: false,\r\n\r\n        // SKILL TREES\r\n        combat: [],\r\n        general: [],\r\n        production: [],\r\n        crafting: [],\r\n        roleplaying: [],\r\n        scholar: [],\r\n        specialaccess: [],\r\n        aegis: [],\r\n        battle: [],\r\n        nature: [],\r\n        necromancy: [],\r\n        compulsion: [],\r\n        restoration: [],\r\n        enchantment: [],\r\n\r\n        // CHARACTER BIO PICTURE LINK\r\n        characterPicture: defaultAvatar,\r\n\r\n        characterBio: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = \"Kingdoms of Novitas | Character Sheet\"\r\n        // componentDidMount is called when react successfully inserts a component into the DOM. \r\n        // We then check if the user is logged in to load their characters\r\n        // Then we load all of our tables from the database\r\n        // Then we load whatever the user had in localStorage, if anything\r\n\r\n        // Check APP_VER in localstorage. If changed, clear user's localStorage\r\n        console.log(this.state.APP_VER)\r\n            if (this.state.APP_VER !== localStorage.getItem(\"APP_VER\")) {\r\n                localStorage.clear();\r\n                localStorage.setItem(\"APP_VER\", this.state.APP_VER);\r\n            }\r\n\r\n        if (AuthenticationService.isUserLoggedIn()) {\r\n            AuthenticationService.setupAxiosInterceptors(localStorage.getItem(\"USER_TOKEN\"));\r\n            this.loadCharacterList(this.props.alert);\r\n        };\r\n\r\n        // loading skills flag for 'loading...' div\r\n        this.setState({loadingSkills: true});\r\n\r\n        let skills = [];\r\n        axios.get(process.env.REACT_APP_API_DOMAIN + '/skills')\r\n            .then(res => {\r\n                // an array of skill objects was obtained from the database\r\n                skills = [...res.data];\r\n                // sort them\r\n                this.sortSkillsByTree(skills);\r\n                this.setState(({loadingSkills: false}), function () {\r\n                    this.checkCharacterFreeLanguages();\r\n                })\r\n                });\r\n\r\n        let countries = [];\r\n        axios.get(process.env.REACT_APP_API_DOMAIN + '/countries')\r\n            .then(res => {\r\n                // country list obtained\r\n                countries = [...res.data];\r\n                this.setState({countries: countries});\r\n\r\n                });\r\n\r\n        let races = [];\r\n        axios.get(process.env.REACT_APP_API_DOMAIN + '/races')\r\n            .then(res => {\r\n                // race list obtained\r\n                races = [...res.data];\r\n\r\n                this.setState(({races: races}), function () {\r\n                    this.checkCharacterFreeLanguages();\r\n                    });\r\n                \r\n                });\r\n\r\n        if (localStorage.getItem(\"character\") !== null){\r\n            this.loadLocalCharacter()\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Called when state or props update, so we use it to update the localStorage character\r\n        this.saveLocalCharacter()\r\n    }\r\n\r\n    sortSkillsByTree = (skills) => {\r\n        // Called in componentDidUpdate. Called when we get skills from database\r\n\r\n        // keys in state currently empty arrays\r\n        for (let key in this.state) {\r\n            for (let skill in skills) {\r\n                // if state key is the same as skill tree\r\n                if (key === skills[skill].tree) {\r\n                    // state is immutable, and batches updates. We spread the previous state (prevState) and then add the skill so that the correct previous value + new value is added\r\n                    this.setState(prevState => ({\r\n                        [key]: [...prevState[key], skills[skill]]\r\n                    }));\r\n                }\r\n            }\r\n        } \r\n    };\r\n\r\n    saveLocalCharacter = () => {\r\n        // called by componentDidUpdate\r\n\r\n        let values = this.state\r\n\r\n        let character = {\r\n            characterName: values.characterName,\r\n            player: values.player,\r\n            race: values.race,\r\n            country: values.country,\r\n            level: values.level,\r\n            savedXp: values.savedXp,\r\n            magicPoints: values.resources.magicPoints,\r\n            craftPoints: values.resources.craftPoints,\r\n            productionPoints: values.resources.productionPoints,\r\n            skills: values.playerHasSkill,\r\n            // bio info\r\n            characterPicture: values.characterPicture,\r\n            characterBio: values.characterBio\r\n        }\r\n\r\n        localStorage.setItem(\"character\", JSON.stringify(character))\r\n    }\r\n\r\n    loadLocalCharacter = () => {\r\n        // CALLED BY: componentDidMount\r\n        // load character from localStorage, if any\r\n\r\n        var localStorageCharacter = JSON.parse(localStorage.getItem(\"character\"));\r\n\r\n        let resources = {\r\n            magicPoints: localStorageCharacter.magicPoints,\r\n            craftPoints: localStorageCharacter.craftPoints,\r\n            productionPoints: localStorageCharacter.productionPoints\r\n\r\n        }\r\n        \r\n        this.setState(prevState =>({\r\n            ...prevState,\r\n            \r\n            characterName: localStorageCharacter.characterName,\r\n            player: localStorageCharacter.player,\r\n            race: localStorageCharacter.race,\r\n            country: localStorageCharacter.country,\r\n            level: localStorageCharacter.level,\r\n            savedXp: localStorageCharacter.savedXp,\r\n            resources: resources,\r\n            playerHasSkill: localStorageCharacter.skills,\r\n            // bio info\r\n            characterPicture: localStorageCharacter.characterPicture,\r\n            characterBio: localStorageCharacter.characterBio\r\n        }))\r\n    }\r\n    \r\n    loadCharacterList = (alert) => {\r\n        // CALLED BY: componentDidMount, saveCharacter, loadCharacter,\r\n                    // loginClicked (Header -> Navigation -> LoginComponent)\r\n        // load all characters owned by current user\r\n\r\n        let url = process.env.REACT_APP_API_DOMAIN + '/characters'\r\n        return axios({\r\n            method: 'get',\r\n            url: url})\r\n            .then((res) => {\r\n                this.setState(() =>({\r\n                    characterList: [...res.data]\r\n                }))\r\n                \r\n            })\r\n            .catch((err) => {\r\n                //console.log(err.response.data)\r\n                alert.show(\"Error loading character list.\\n\" + err.response.data.status + \" \" + err.response.data.message, {timeout: 5000, type: 'error'})\r\n            })\r\n        }\r\n    \r\n        \r\n        saveCharacter = (id, alert) => {\r\n            // CALLED BY: Navigation(onClick(new Character)) (Header -> Navigation) \r\n            // CALLED BY: ConfirmationModal(onClick) (Header -> Navigation -> ConfirmationModal)\r\n            // Save character to database. If an ID is provided, it will overwrite the database character with the matching ID\r\n            // Ownership of the character is checked on the backend, so the user cannot overwrite a character that does not\r\n            // belong to them\r\n        \r\n            // alert is passed in, because App.js this.props.alert is not accessible.\r\n\r\n        let values = this.state\r\n\r\n        let character = {\r\n            id: id,\r\n            characterName: values.characterName,\r\n            player: values.player,\r\n            race: values.race,\r\n            country: values.country,\r\n            level: values.level,\r\n            savedXp: values.savedXp,\r\n            magicPoints: values.resources.magicPoints,\r\n            craftPoints: values.resources.craftPoints,\r\n            productionPoints: values.resources.productionPoints,\r\n            skills: values.playerHasSkill,\r\n            // bio info\r\n            characterPicture: values.characterPicture,\r\n            characterBio: values.characterBio\r\n        }\r\n\r\n        let url = process.env.REACT_APP_API_DOMAIN + '/character'\r\n        return axios({\r\n            method: 'post',\r\n            url: url,\r\n            data: character })\r\n            .then((res) => {\r\n                \r\n                // reload the character list on success\r\n                this.loadCharacterList(alert);\r\n\r\n                // alert arg use\r\n                alert.show(\"Character Saved\", {timeout: 5000, type: 'success'})\r\n            }).catch((err) => {\r\n\r\n                // console.log(err.response.data)\r\n                alert.show(\"Error saving character. \\n\" + err.response.data.status + \" \" + err.response.data.message, {timeout: 5000, type: 'error'})\r\n            })\r\n        \r\n    }\r\n    \r\n    loadCharacter = (id, alert) => {\r\n        // load a user selected character from the database\r\n        \r\n        let url = process.env.REACT_APP_API_DOMAIN + '/character'\r\n        return axios({\r\n            method: 'get',\r\n            url: url,\r\n            params: {\"id\":id}})\r\n            .then((res) => {\r\n                // react doesnt like nested state, so we need to make a nest for our resources first\r\n                // due to the way we stored them in this.state\r\n                var resources = {magicPoints: res.data.magicPoints,\r\n                                    productionPoints: res.data.productionPoints,\r\n                                craftPoints: res.data.craftPoints}\r\n\r\n                this.setState(prevState =>({\r\n                    ...prevState,\r\n\r\n                    id : res.data.id,\r\n                    characterName: res.data.characterName,\r\n                    race: res.data.race,\r\n                    player: res.data.player,\r\n                    country: res.data.country,\r\n                    level: res.data.level,\r\n                    savedXp: res.data.savedXp,\r\n\r\n                    // resource nest made above\r\n                    resources: resources,\r\n\r\n                    // list of user skills\r\n                    playerHasSkill: res.data.skills,\r\n\r\n                    // bio info\r\n                    characterPicture: res.data.characterPicture,\r\n                    characterBio: res.data.characterBio\r\n\r\n                }), function () {\r\n                    this.checkCharacterFreeLanguages();\r\n                })\r\n                alert.show(\"Character Loaded\", {timeout: 5000, type: 'success'})\r\n            })\r\n            .catch((err) => {\r\n                // console.log(err.response.data)\r\n                alert.show(\"Error loading character. \\n\" + err.response.data.status + \" \" + err.response.data.message, {timeout: 5000, type: 'error'})\r\n            })\r\n\r\n    }\r\n\r\n    deleteCharacter = (id, alert) => {\r\n        let url = process.env.REACT_APP_API_DOMAIN + '/character'\r\n        return axios({\r\n            method: 'delete',\r\n            url: url,\r\n            params: {\"id\":id}})\r\n            .then((res) => {\r\n                // console.log(res.data)\r\n                this.loadCharacterList(alert)\r\n                alert.show(\"Character Deleted\", {timeout: 5000, type: 'success'})\r\n            })\r\n            .catch((err) => {\r\n                // console.log(err.response.data)\r\n                alert.show(\"Error deleting character. \\n\" + err.response.data.status + \" \" + err.response.data.message, {timeout: 5000, type: 'error'})\r\n            })\r\n\r\n    }\r\n\r\n    resetSkills = () => {\r\n        let resetResources = {\r\n            magicPoints: 0,\r\n            craftPoints: 0,\r\n            productionPoints: 0 }\r\n            \r\n        this.setState({ playerHasSkill: [],\r\n                        resources: resetResources\r\n                    });\r\n        this.calculateSkillPointsRemaining();\r\n        this.props.alert.show(\"Character Reset\", {timeout: 5000, type: 'success'})\r\n    }\r\n\r\n    characterInfoChange = (infoName, updatedInfo) => {\r\n        // CALLED BY:\r\n        // CharacterInfo -> CharacterInfoInput(onChange)\r\n\r\n        if (infoName === \"savedXp\" ||\r\n            infoName === \"level\") {\r\n            updatedInfo = updatedInfo.replace(/[^0-9]/, \"\");\r\n        }\r\n\r\n        // if infoName is \"race\", check to see if player has free uncommon languages that need to be removed from the new race\r\n        if (infoName === \"race\") {\r\n\r\n            // if the player has uncommon languages, are any of them free? if so, remove one\r\n            if (this.playerHasFaekinBonusLanguage()) {\r\n\r\n                // if the player is changing out of faekin\r\n                if (!updatedInfo.includes(\"Faekin\")) {\r\n                    let obj = this.checkCharacterAvailableSkillsFromScholar()\r\n\r\n                    // if obj is false, player has no scholar. remove the only language they have (will be the bonus language) else if they have scholar, only remove 1\r\n                    if (obj == false || obj.uncommonLanguages <= 0) {\r\n\r\n                        if (this.removeSkillByName(\"Diabolic\")){\r\n                            this.props.alert.show(\"Language: Diabolic has been removed due to race change\", {timeout: 5000, type: 'info'})\r\n                        } else if (this.removeSkillByName(\"Sylvan\")) {\r\n                            this.props.alert.show(\"Language: Sylvan has been removed due to race change\", {timeout: 5000, type: 'info'})\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            // if the player has uncommon languages, are any of them free? if so, remove one\r\n            if (this.playerHasFaekinBonusLanguage()) {\r\n\r\n                // if the player is changing out of faekin\r\n                if (!updatedInfo.includes(\"Faekin\")) {\r\n                    let obj = this.checkCharacterAvailableSkillsFromScholar()\r\n\r\n                    // if obj is false, player has no scholar. remove the only language they have (will be the bonus language) else if they have scholar, only remove 1\r\n                    if (obj == false || obj.uncommonLanguages <= 0) {\r\n\r\n                        if (this.removeSkillByName(\"Diabolic\")){\r\n                            this.props.alert.show(\"Language: Diabolic has been removed due to race change\", {timeout: 5000, type: 'info'})\r\n                        } else if (this.removeSkillByName(\"Sylvan\")) {\r\n                            this.props.alert.show(\"Language: Sylvan has been removed due to race change\", {timeout: 5000, type: 'info'})\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (this.playerHasVargainenBonusLanguage()) {\r\n\r\n                // if the player is changing out of vargainen\r\n                if (!updatedInfo.includes(\"Vargainen\")) {\r\n                    let obj = this.checkCharacterAvailableSkillsFromScholar()\r\n\r\n                    // if obj is false, player has no scholar. remove the only language they have (will be the bonus language) else if they have scholar, only remove 1\r\n                    if (obj == false || obj.uncommonLanguages <= 0) {\r\n\r\n                        if (this.removeSkillByName(\"Andaranian\")){\r\n                            this.props.alert.show(\"Language: Andaranian has been removed due to race change\", {timeout: 5000, type: 'info'})\r\n                        };\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // if the infoName is \"level\", we need to update players skill points remaining.\r\n        this.setState({[infoName]: updatedInfo}, function() {\r\n            this.calculateSkillPointsRemaining();\r\n            this.checkCharacterFreeLanguages();\r\n        });  \r\n    }\r\n\r\n    numericValidation = (input) => {\r\n        if (input.match('[0-9]') === null) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // does not include uncommon (scholar) languages\r\n    checkCharacterFreeLanguages = () => {\r\n        let playerSkills = this.state.playerHasSkill;\r\n        let generalSkills = this.state.general\r\n\r\n        switch (this.state.race) {\r\n            case \"Human\":\r\n                this.addFreeLanguages([\"Language: Common\"]);\r\n                break;\r\n            case \"Drake\":\r\n                this.addFreeLanguages([\"Language: Draconic\", \"Language: Common\"]);\r\n                break;\r\n            case \"Snow Goblin\":\r\n                this.addFreeLanguages([\"Language: Snow Goblin\", \"Language: Common\"]);\r\n                break;\r\n            case \"Elf\":\r\n                this.addFreeLanguages([\"Language: Elvish\", \"Language: Common\"]);\r\n                break;\r\n            case \"Earthkin\":\r\n                this.addFreeLanguages([\"Language: Terran\", \"Language: Common\"]);\r\n                break;\r\n            case \"Faekin Elf\":\r\n                this.addFreeLanguages([\"Language: Elvish\", \"Language: Common\"]);\r\n                break;\r\n            case \"Faekin Earthkin\":\r\n                this.addFreeLanguages([\"Language: Terran\", \"Language: Common\"]);\r\n                break;\r\n            case \"Faekin Human\":\r\n                this.addFreeLanguages([\"Language: Common\"]);\r\n                break;\r\n            // vargainen's get andaranian, but because it is special access it requires additional functionality\r\n            case \"Vargainen Human\":\r\n                this.addFreeLanguages([\"Language: Common\", \"Language: Andaranian\"]);\r\n                break;\r\n            case \"Vargainen Earthkin\":\r\n                this.addFreeLanguages([\"Language: Common\", \"Language: Andaranian\"]);\r\n                break;\r\n            case \"Vargainen Elf\":\r\n                this.addFreeLanguages([\"Language: Common\", \"Language: Andaranian\"]);\r\n                break;\r\n            case \"Vargainen Verduran\":\r\n                this.addFreeLanguages([\"Language: Common\", \"Language: Andaranian\"]);\r\n                break;\r\n            case \"Verduran\":\r\n                this.addFreeLanguages([\"Language: Common\"]);\r\n                break;\r\n        }\r\n    }\r\n\r\n    addFreeLanguages = (languageNamesArray) => {\r\n        // grant free language skills based on race to character\r\n        let hasFreeLanguages = [];\r\n        let generalSkills = this.state.general\r\n        let specialSkills = this.state.specialaccess\r\n\r\n        for (let languageName in languageNamesArray) {\r\n                let getLanguageByName = generalSkills.find(skill => skill.name === languageNamesArray[languageName])\r\n                let getLanguageByNameSpecialAccess = specialSkills.find(skill => skill.name === languageNamesArray[languageName])\r\n\r\n                if (getLanguageByName !== undefined) {\r\n                    hasFreeLanguages.push(getLanguageByName);\r\n                }\r\n                \r\n                if (getLanguageByNameSpecialAccess !== undefined) {\r\n                    hasFreeLanguages.push(getLanguageByNameSpecialAccess);\r\n                }\r\n        }\r\n\r\n\r\n        this.setState(prevState => ({\r\n            freeLanguages: hasFreeLanguages }), function() {\r\n                for (let lang in hasFreeLanguages) {\r\n                    this.removeSkill(hasFreeLanguages[lang]);\r\n                }\r\n        });  \r\n    }\r\n    \r\n    calculateBaseSkillPoints = () => { \r\n        // CALLED BY: calculateSkillPointsRemaining\r\n        // a level 0 character has 10 skill points. Every level after that is +2\r\n\r\n        return this.state.level === 0 ? 10 : (this.state.level * 2) + 10\r\n    }\r\n\r\n\r\n    calculateSkillPointsRemaining = () => {\r\n        // used anytime our skill points need to be updated or checked\r\n\r\n        var newSkillPointsRemaining = this.calculateBaseSkillPoints();\r\n\r\n        newSkillPointsRemaining -= this.calculateSpentSkillPoints();\r\n\r\n        return newSkillPointsRemaining;\r\n    }\r\n\r\n    calculateSpentSkillPoints = () => {\r\n        // CALLED BY: calculateSkillPointsRemaining\r\n        // this function is used to determine the total accumulated cost of the characters skills + resources\r\n        var spent = 0;\r\n        var playerSkills = this.state.playerHasSkill;\r\n        var playerResources = this.state.resources;\r\n\r\n        for (let skill in playerSkills) {\r\n            spent += playerSkills[skill].cost;\r\n        }\r\n\r\n        spent += (playerResources.craftPoints * this.state.CRAFT_POINT_COST) + \r\n                (playerResources.productionPoints * this.state.PRODUCTION_POINT_COST) + \r\n                (playerResources.magicPoints * this.state.MAGIC_POINT_COST);\r\n\r\n        return spent;\r\n    }\r\n\r\n    checkRequirements = (skill) => {\r\n        // return true if player meets requirements for skill\r\n    \r\n        // skill.requires is a string that is equal to anotherSkill.name required for skill\r\n        let requiredSkill = skill.requires\r\n\r\n        // skill does not have a required skill\r\n        if (requiredSkill === \"\" || requiredSkill === null) {\r\n            //console.log(\"no required skill found (requiredSkill === \" + requiredSkill + \")\");\r\n            return true; \r\n        }\r\n\r\n        // player's skills array\r\n        let pSkills = this.state.playerHasSkill;\r\n\r\n        for (let pSkill in pSkills) {\r\n            // if one of the player's skill contains the required skill name\r\n            if (requiredSkill.includes(pSkills[pSkill].name)) {\r\n                //console.log(\"required skill string includes: \" + pSkills[pSkill].name);\r\n                // we're good\r\n                return true;\r\n            }\r\n        }\r\n        //console.log(\"checkRequirements returned false\")\r\n        return false;\r\n    }\r\n    \r\n    playerCheckedASkillBox = (checkedSkill, e) => {\r\n        \r\n        // CALLED BY Skill.js(checkBox onChange) (SkillTree.js -> Skill.js)\r\n\r\n        // Mad Ramblings is not attainable outside of plot. I got creative with it's CSS and a custom alert\r\n        if(checkedSkill.name.includes(\"Mad Ramblings\")) {\r\n            this.props.alert.show(this.madRamblings(), {timeout: 5000, type: 'error'})\r\n            return false;\r\n        }\r\n\r\n        // add or remove a skill on checkbox change\r\n            // make sure enough skill points are available\r\n            // make sure requirements are met?\r\n            // add skill to playerHasSkill Array, or remove it\r\n\r\n        if (!this.checkRequirements(checkedSkill)) {\r\n            // console.log(\"You do not meet the requirements for \" + checkedSkill.name)\r\n            this.props.alert.show(\"You do not meet the requirements for \" + checkedSkill.name, {timeout: 5000, type: 'error'})\r\n            return false;\r\n        };\r\n \r\n        // if adding a checkbox was detected\r\n        if (e) {\r\n\r\n            // is it a special access skill?\r\n            // check if player has scholar, then check if he has any uncommon, rare, or scholar ritual skills available to learn\r\n            if(checkedSkill.tree == \"specialaccess\") {\r\n\r\n                // if the skill is also a faekin bonus language\r\n                if (checkedSkill.name.includes(\"Diabolic\") || checkedSkill.name.includes(\"Sylvan\")){\r\n                    \r\n                    // If the player is a faekin, and does NOT yet have their bonus language, add it\r\n                    if (this.playerIsFaekin()) {\r\n                        if (!this.playerHasFaekinBonusLanguage()) {\r\n                            return this.addSkill(checkedSkill);\r\n                        }\r\n                    }\r\n\r\n                    // if player has 0 scholar skills // the skill is a faekin language\r\n                    if (this.checkCharacterAvailableSkillsFromScholar() == false) {\r\n                        this.props.alert.show(\"Scholar/Faekin is required for Sylvan / Diabolic\", {timeout: 5000, type: 'error'})\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // if the skill is also drake bonus language\r\n                if (checkedSkill.name.includes(\"Draconic\")){\r\n\r\n                    // If the player is vargainen, and does NOT yet have their bonus language, add it\r\n                    if (this.playerIsDrake()) {\r\n                        if (!this.playerHasDrakeBonusLanguage()) {\r\n                            return this.addSkill(checkedSkill);\r\n                        }\r\n                    }\r\n\r\n                    \r\n                    // if player has 0 scholar skills // the skill is language: draconic\r\n                    if (this.checkCharacterAvailableSkillsFromScholar() == false) {\r\n                        this.props.alert.show(\"Scholar/Drake is required for Draconic\", {timeout: 5000, type: 'error'})\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n\r\n                // if the skill is also a vargainen bonus language\r\n                if (checkedSkill.name.includes(\"Andaranian\")){\r\n\r\n                    // If the player is vargainen, and does NOT yet have their bonus language, add it\r\n                    if (this.playerIsVargainen()) {\r\n                        if (!this.playerHasVargainenBonusLanguage()) {\r\n                            return this.addSkill(checkedSkill);\r\n                        }\r\n                    }\r\n\r\n                    \r\n                    // if player has 0 scholar skills // the skill is language: andaranian\r\n                    if (this.checkCharacterAvailableSkillsFromScholar() == false) {\r\n                        this.props.alert.show(\"Scholar/Vargainen is required for Andaranian\", {timeout: 5000, type: 'error'})\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                // if player has 0 scholar skills // the skill is a faekin language\r\n                if (this.checkCharacterAvailableSkillsFromScholar() == false) {\r\n                    this.props.alert.show(\"Scholar is required for Special Access Skills\", {timeout: 5000, type: 'error'})\r\n                    return false;\r\n                }\r\n\r\n                if (this.isUncommonLanguage(checkedSkill)){\r\n                    if (this.checkCharacterAvailableSkillsFromScholar().uncommonLanguages <= 0) {\r\n                        this.props.alert.show(\"You don't have any available uncommon languages\", {timeout: 5000, type: 'error'})\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n                if (this.isRareLanguage(checkedSkill)) {\r\n                    if (this.checkCharacterAvailableSkillsFromScholar().rareLanguages <= 0) {\r\n                        this.props.alert.show(\"You don't have any available rare languages\", {timeout: 5000, type: 'error'})\r\n                        return false;\r\n                    }\r\n                }\r\n                \r\n                if (this.isScholarRitual(checkedSkill)) {\r\n                    if (this.checkCharacterAvailableSkillsFromScholar().rituals <= 0) {\r\n                        this.props.alert.show(\"You don't have any available scholar rituals\", {timeout: 5000, type: 'error'})\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if(checkedSkill.tree != \"specialaccess\" && checkedSkill.name.includes(\"Ritual\")) {\r\n                if (!this.canPlayerGetThisRitualSkill(checkedSkill, checkedSkill.tree)){\r\n                    return false;\r\n                } \r\n            }\r\n\r\n            // Is it a special access ritual? Does the player already have the non-special access version?\r\n            if (checkedSkill.name.includes(\"Ritual\") && checkedSkill.tree == \"specialaccess\") {\r\n                this.refundDuplicateRitual(checkedSkill);\r\n            }\r\n\r\n            // check the cost        \r\n            if (this.calculateSkillPointsRemaining() - checkedSkill.cost < 0) {\r\n                // console.log(\"You do not have enough skill points for \" + checkedSkill.name);\r\n                this.props.alert.show(\"You do not have enough skill points for \" + checkedSkill.name, {timeout: 5000, type: 'error'})\r\n                return false;\r\n            };\r\n\r\n            // roleplaying skill rules\r\n            if (checkedSkill.tree === \"roleplaying\") {\r\n                if (!this.canPlayerGetThisRoleplayingSkill(checkedSkill)) {\r\n                    return false;\r\n                }\r\n            }\r\n\r\n            //check if it's a spell, and the player has at least one point of magic\r\n            if (checkedSkill.tree === \"aegis\" ||\r\n            checkedSkill.tree === \"enchantment\" ||\r\n            checkedSkill.tree === \"necromancy\" ||\r\n            checkedSkill.tree === \"restoration\" ||\r\n            checkedSkill.tree === \"compulsion\" ||\r\n            checkedSkill.tree === \"battle\" ||\r\n            checkedSkill.tree === \"nature\"){\r\n                if (!this.doesPlayerHaveMagicPower()) {\r\n                    this.props.alert.show(\"You must have a point in Magic Power before learning spells\", {timeout: 5000, type: 'error'})\r\n                    return false;\r\n                }\r\n            }\r\n\r\n\r\n            // warn if skill needs approval\r\n            if (checkedSkill.needsApproval === 1) {\r\n                this.props.alert.show(\"Asterisked skills will require Plot Marshal approval\", {timeout: 5000, type: 'info'})\r\n            }\r\n\r\n            // add skill\r\n            return this.addSkill(checkedSkill);\r\n            \r\n\r\n        // player is attempting to uncheck a skill\r\n        } else {\r\n\r\n            // if the skill is a prerequisite, don't remove it\r\n            if (this.skillIsPrerequisite(checkedSkill)) {\r\n                return true;\r\n            }\r\n\r\n            // if it's a magic tree, and not a ritual skill, is player attempting to remove a school spell?\r\n            if (this.isMagicTree(checkedSkill.tree)) {\r\n                if (!checkedSkill.name.includes(\"Ritual\")) {\r\n                    if (!this.canPlayerRemoveThisNonRitualMagicSkill(checkedSkill, checkedSkill.tree)) {\r\n                        return false;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // check if player needs scholar for special access skills before allowing uncheck\r\n            if (checkedSkill.tree === \"scholar\") {\r\n                if (!this.scholarCanBeUnchecked()) {\r\n                    this.props.alert.show(\"Scholar is required for your amount of special access skills\", {timeout: 5000, type: 'error'})\r\n                    return true;\r\n                }\r\n            }\r\n\r\n            // remove\r\n            return this.removeSkill(checkedSkill);\r\n        }\r\n    }\r\n\r\n    isUncommonLanguage(skill) {\r\n        if (skill.name.includes(\"Language\") && skill.tree === \"specialaccess\" && skill.tier !== 2) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isRareLanguage(skill) {\r\n        if (skill.name.includes(\"Language\") && skill.tree === \"specialaccess\" && skill.tier === 2) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isScholarRitual(skill) {\r\n        if (skill.name.includes(\"Ritual\") && skill.tree === \"specialaccess\") {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    isMagicTree(tree) {\r\n        switch (tree) {\r\n            case \"aegis\":\r\n                return true;\r\n            case \"battle\":\r\n                return true;\r\n            case \"nature\":\r\n                return true;\r\n            case \"necromancy\":\r\n                return true;\r\n            case \"compulsion\":\r\n                return true;\r\n            case \"restoration\":\r\n                return true;\r\n            case \"enchantment\":\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // create an array of player owned scholar skills to determine how many uncommon/rare languages and rituals are available to the player,\r\n    // and return it as an object\r\n    checkCharacterAvailableSkillsFromScholar=()=> {\r\n        let hasScholarSkills = [];\r\n        let uncommonLanguages = 0;\r\n        let rituals = 0;\r\n        let rareLanguages = 0\r\n\r\n        for (let skill in this.state.playerHasSkill) {\r\n            if (this.state.playerHasSkill[skill].tree == \"scholar\") {\r\n                hasScholarSkills.push(skill);\r\n            }\r\n        }\r\n\r\n        let obj = {\r\n            uncommonLanguages: uncommonLanguages,\r\n            rituals: rituals,\r\n            rareLanguages: rareLanguages,\r\n            hasScholarSkills: hasScholarSkills\r\n        }\r\n\r\n        // if the player is a Faekin and has Sylvan or Diabolic, let them have another uncommon language point\r\n        if (this.playerHasFaekinBonusLanguage()) {\r\n            obj.uncommonLanguages++;\r\n        }\r\n\r\n        // if the player is Vargainen and has Andaranian, let them have another uncommon language point\r\n        if (this.playerHasVargainenBonusLanguage()) {\r\n            obj.uncommonLanguages++;\r\n        }\r\n        \r\n\r\n        if (hasScholarSkills.length == 0) {\r\n            // error popup: no scholar skills (make sure racial languages not effected)\r\n            return false;\r\n        }\r\n\r\n        switch (hasScholarSkills.length) {\r\n            case 1:\r\n                obj.uncommonLanguages += 1;\r\n                obj.rituals += 1;\r\n                obj.rareLanguages += 0;\r\n                break;\r\n            case 2:\r\n                obj.uncommonLanguages += 2;\r\n                obj.rituals += 3;\r\n                obj.rareLanguages += 0;\r\n                break;\r\n            case 3:\r\n                obj.uncommonLanguages += 4;\r\n                obj.rituals += 5;\r\n                obj.rareLanguages += 0;\r\n                break;\r\n            case 4:\r\n                obj.uncommonLanguages += 5;\r\n                obj.rituals += 7;\r\n                obj.rareLanguages += 1;\r\n                break;\r\n            case 5:\r\n                obj.uncommonLanguages += 5;\r\n                obj.rituals += 7;\r\n                obj.rareLanguages += 2;\r\n                break;\r\n        } \r\n\r\n        for (let skill in this.state.playerHasSkill) {\r\n            if (this.state.playerHasSkill[skill].tree == \"specialaccess\") {\r\n\r\n                if (this.state.playerHasSkill[skill].name.includes(\"Language\")) {\r\n                    if (this.state.playerHasSkill[skill].tier == 2) {\r\n                        obj.rareLanguages--;\r\n                    } else {\r\n                        obj.uncommonLanguages--;\r\n                    }\r\n                }\r\n\r\n                if (this.state.playerHasSkill[skill].name.includes(\"Rituals\")) {\r\n                    obj.rituals--;\r\n                }\r\n            }\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    \r\n\r\n    // logic for scholar skills. Launch a Modal with special access skills attainable with current Scholar Rank?\r\n    isNewScholarSkill=(checkedSkill)=>{\r\n\r\n    }\r\n\r\n    // used for removing specific skills by special rules\r\n    removeSkillByName(skillName, skillTree) {\r\n        if (arguments.length == 2) {\r\n            for (let skill in this.state.playerHasSkill) {\r\n                if (this.state.playerHasSkill[skill].name.includes(skillName) && this.state.playerHasSkill[skill].tree === skillTree) {\r\n                    this.removeSkill(this.state.playerHasSkill[skill])\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let skill in this.state.playerHasSkill) {\r\n            if (this.state.playerHasSkill[skill].name.includes(skillName)) {\r\n                this.removeSkill(this.state.playerHasSkill[skill])\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    playerIsFaekin() {\r\n        if (this.state.race.includes(\"Faekin\")) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    // if player is faekin and has a faekin bonus language.\r\n    playerHasFaekinBonusLanguage(){\r\n\r\n        if (this.playerIsFaekin()) {\r\n\r\n            for (let skill in this.state.playerHasSkill) {\r\n                if (this.state.playerHasSkill[skill].name.includes(\"Diabolic\") || this.state.playerHasSkill[skill].name.includes(\"Sylvan\")) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    playerIsDrake() {\r\n        if (this.state.race.includes(\"Drake\")){\r\n            return true;\r\n        }\r\n    }\r\n\r\n    playerHasDrakeBonusLanguage() {\r\n        if (this.playerIsDrake()) {\r\n\r\n            for (let skill in this.state.playerHasSkill) {\r\n                if (this.state.playerHasSkill[skill].name.includes(\"Drake\")) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    playerIsVargainen() {\r\n        if (this.state.race.includes(\"Vargainen\")){\r\n            return true;\r\n        }\r\n    }\r\n\r\n    playerHasVargainenBonusLanguage() {\r\n\r\n        if (this.playerIsVargainen()) {\r\n\r\n            for (let skill in this.state.playerHasSkill) {\r\n                if (this.state.playerHasSkill[skill].name.includes(\"Andaranian\")) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Check to see if player can attain special access skill. Scholar or racial\r\n    isSpecialAccessSkillAttainable=(checkedSkill)=>{\r\n        // is faekin? sylvan or diabolic. If player has one, and selects the other, does player have available language from scholar\r\n\r\n        // allow X uncommon languages, Y rare languages, Z rituals from K rank of scholar\r\n        // if no skills available, send error\r\n    }\r\n\r\n    doesPlayerHaveMagicPower=()=>{\r\n        return this.state.resources.magicPoints > 0;\r\n    }\r\n\r\n    doesPlayerHaveAnySpells=()=>{\r\n        for (let skill in this.state.playerHasSkill) {\r\n            let tree = this.state.playerHasSkill[skill].tree\r\n            if (tree === \"aegis\" ||\r\n            tree === \"enchantment\" ||\r\n            tree === \"necromancy\" ||\r\n            tree === \"restoration\" ||\r\n            tree === \"compulsion\" ||\r\n            tree === \"battle\" ||\r\n            tree === \"nature\") {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Ritual skills (non-special access) require school mastery\r\n    canPlayerGetThisRitualSkill = (skill, tree) => {\r\n\r\n        // filter for player magic tree skills\r\n        let playerMagicTreeSkills = this.state.playerHasSkill.filter(skill => skill.tree === tree);\r\n\r\n        let playerSpecialAccesSkills = this.state.playerHasSkill.filter(skill => skill.tree === \"specialaccess\")\r\n\r\n        for (let specialAccesSkill in playerSpecialAccesSkills) {\r\n            if (playerSpecialAccesSkills[specialAccesSkill].name.includes(skill.name)) {\r\n                this.props.alert.show(\"You already have \" + playerSpecialAccesSkills[specialAccesSkill].name, {timeout: 5000, type: 'error'})\r\n                return false;\r\n            }\r\n        }\r\n\r\n        if (playerMagicTreeSkills.length == this.state[tree].length - 1){\r\n            return true;\r\n        }\r\n\r\n        this.props.alert.show(\"You must master this magic school to learn \" + skill.name, {timeout: 5000, type: 'error'})\r\n                return false;\r\n    }\r\n\r\n    canPlayerRemoveThisNonRitualMagicSkill = (skill, tree) => {\r\n        \r\n        // filter for player magic tree skills\r\n        let playerMagicTreeSkills = this.state.playerHasSkill.filter(skill => skill.tree === tree);\r\n\r\n        let hasRitual = playerMagicTreeSkills.filter(skill => skill.name.includes(\"Ritual\"))\r\n\r\n        if (hasRitual.length > 0){\r\n            this.props.alert.show(\"You must unlearn this schools Rituals to remove \" + skill.name, {timeout: 5000, type: 'error'})\r\n            return false;\r\n        }\r\n\r\n        \r\n        return true;\r\n    }\r\n\r\n    // see if player has a non-special access ritual of the same name\r\n    refundDuplicateRitual = (skill) => {\r\n        let playerSkills = this.state.playerHasSkill;\r\n\r\n        for (let playerSkill in playerSkills) {\r\n            if (skill.name.includes(playerSkills[playerSkill].name) && playerSkills[playerSkill].tree != \"specialaccess\") {\r\n                this.removeSkill(playerSkills[playerSkill]);\r\n                this.props.alert.show(\"Duplicate skill. \" + playerSkill.name + \" has been removed and refunded\", {timeout: 5000, type: 'info'})\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    canPlayerGetThisRoleplayingSkill = (skill) => {\r\n    // A Character can only have 5 levels in one roleplaying skill tree,\r\n    // And 2 levels in another maximum\r\n\r\n        // filter for player RP skills\r\n        let playerRPSkills = this.state.playerHasSkill.filter(skill => skill.tree === \"roleplaying\");\r\n\r\n        // filter for tier one skills\r\n        let tierOnePlayerRPSkills = playerRPSkills.filter(skill => skill.name.includes(\"1\"))\r\n\r\n        // if the player has two tier ones already, he is inelligible for another tier one\r\n        if (tierOnePlayerRPSkills.length === 2) {\r\n            if (skill.name.includes(\"1\")) {\r\n                this.props.alert.show(\"You cannot have more than two types of roleplaying skills\", {timeout: 5000, type: 'error'})\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // filter for tier three skills\r\n        let tierThreePlayerRPSkills = playerRPSkills.filter(skill => skill.name.includes(3))\r\n\r\n        // if player has any\r\n        if (tierThreePlayerRPSkills.length !== 0) {\r\n\r\n            // if player has one already, inelligible for another\r\n            if (skill.name.includes(3) && tierThreePlayerRPSkills.length === 1) {\r\n                this.props.alert.show(\"You cannot have more than one roleplaying skill above 2nd level\", {timeout: 5000, type: 'error'})\r\n                return false;\r\n            }\r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    // checks to see if a skill player is unchecking is a required prerequisite that shouldn't be removed\r\n    skillIsPrerequisite = (skill) => {\r\n        // don't allow player to remove a skillpoint if it's a necessary requirement for another skill the player has\r\n\r\n        // THIS FUNCTION IS ATROCIOUS\r\n\r\n        let pSkills = this.state.playerHasSkill;\r\n\r\n        for (let pSkill in pSkills) {\r\n\r\n            // current iterations required skills\r\n            let requirementSkillString = pSkills[pSkill].requires\r\n\r\n            // if the current playerskill has a prerequisite skill\r\n            if (requirementSkillString !== \"\" && requirementSkillString !== null) {\r\n\r\n                // if it includes the skill we are trying to remove, [and it's in the same tree], it's a requirement\r\n                if (requirementSkillString.includes(skill.name) && pSkills[pSkill].tree === skill.tree) {\r\n\r\n                    // if it includes a pipe, there's another prerequisite\r\n                    if(requirementSkillString.includes(\"|\")) {\r\n\r\n                        // iterate again\r\n                        for (let pSkill2 in pSkills) {\r\n\r\n                            // if the current playerskill has a prerequisite skill\r\n                            if (requirementSkillString !== \"\" && requirementSkillString !== null) {\r\n\r\n                                // if the NEW FOUND SKILL is required by the FIRST FOUND SKILL\r\n                                // but it does not equal the SKILL BEING REMOVED\r\n                                // the player still meets the requirements\r\n                                // (this took me way too long and it seems overcomplicated)\r\n                                if (skill.name !== pSkills[pSkill2].name && requirementSkillString.includes(pSkills[pSkill2].name)  && pSkills[pSkill2].tree === skill.tree) {\r\n                                    //console.log(skill.name + \" is a prerequisite for \" + pSkills[pSkill].name + \", but player has \" + pSkills[pSkill2].name + \", which is also a prerequisite\")\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                        // console.log(\"Cannot remove \" + skill.name + \". It is a prerequisite for \" + pSkills[pSkill].name)\r\n                        this.props.alert.show(\"Cannot remove \" + skill.name + \". It is a prerequisite for \" + pSkills[pSkill].name, {timeout: 5000, type: 'error'})\r\n                        return true;    \r\n                }\r\n            }\r\n\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // checks to see player has few enough special access skills to allow scholar rank to be unchecked\r\n    scholarCanBeUnchecked = (skill) => {\r\n        let obj = this.checkCharacterAvailableSkillsFromScholar();\r\n\r\n        switch (obj.hasScholarSkills.length) {\r\n            case 1:\r\n                if (obj.rituals <= 0 ||\r\n                    obj.uncommonLanguages <= 0) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 2:\r\n                if (obj.rituals <= 0 ||\r\n                    obj.uncommonLanguages <= 0) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 3:\r\n                if (obj.rituals <= 0||\r\n                    obj.uncommonLanguages <= 0) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 4:\r\n                if (obj.rituals <= 0 ||\r\n                    obj.uncommonLanguages <= 0 ||\r\n                    obj.rareLanguages <= 0) {\r\n                    return false;\r\n                }\r\n                break;\r\n            case 5:\r\n                if (obj.rareLanguages <= 0) {\r\n                    return false;\r\n                }\r\n            }\r\n        return true;\r\n    }\r\n\r\n    addResource = (resourceName, cost, max) => {\r\n        // CALLED BY: Resources.js -> Resource.js(onClick)\r\n\r\n        if (this.calculateSkillPointsRemaining() - cost < 0) {\r\n            this.props.alert.show(\"You do not have enough skill points\", {type:'error'});\r\n            return false;\r\n        };\r\n\r\n        // check if player maxed out resource amount already\r\n        if (this.state.resources[resourceName] >= max) {\r\n                // console.log(resourceName + \" limit reached\")\r\n                return false;\r\n        };\r\n\r\n        // local resources variable\r\n        let resources = this.state.resources\r\n        \r\n        // add to this resource\r\n        // hard coded rule to give non magic points +2 per skill\r\n        if (resourceName===\"magicPoints\"){\r\n            resources[resourceName] += 1;\r\n        } else {\r\n            resources[resourceName] += 2;\r\n        }\r\n\r\n        // add new resources to state and calc SPR\r\n        this.setState({resources}, () => {this.calculateSkillPointsRemaining()});\r\n\r\n        return true;\r\n    }\r\n\r\n    removeResource = (resourceName) => {\r\n         // CALLED BY: Resources.js -> Resource.js(onClick)\r\n        \r\n        let resources = this.state.resources\r\n         \r\n        if (resources[resourceName] === 0) {\r\n            // console.log(\"you can't go below 0, you idiot\")\r\n            return false;\r\n        }\r\n\r\n        if (resourceName === \"magicPoints\") {\r\n            if (resources[resourceName] === 1) {\r\n                if (this.doesPlayerHaveAnySpells()) {\r\n                    this.props.alert.show(\"Cannot have 0 Magic Power while knowing spells\", {timeout: 5000, type: 'error'})\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n\r\n        \r\n        // hard coded rule to give non magic points +2 per skill\r\n        if (resourceName===\"magicPoints\"){\r\n            resources[resourceName] -= 1;\r\n        } else {\r\n            resources[resourceName] -= 2;\r\n        }\r\n\r\n        this.setState({resources});\r\n    }\r\n\r\n    addSkill = (skill) => {\r\n        // called by playerCheckedASkillBox\r\n\r\n        this.setState(prevState => ({\r\n            playerHasSkill: ([...prevState.playerHasSkill, skill]) }), function ()   {\r\n                this.calculateSkillPointsRemaining()\r\n        });\r\n        // console.log(\"You have added the \" + skill.name + \" skill\")\r\n        return true;\r\n        }\r\n   \r\n    removeSkill = (skill) => {\r\n        // called by playerCheckedASkillBox\r\n\r\n        this.setState(prevState => ({\r\n            // filter previous state.playerhasskill array to return a new array without matching skill\r\n            playerHasSkill: prevState.playerHasSkill.filter(arrSkill => arrSkill.name !== skill.name)\r\n        }), function () {\r\n            this.calculateSkillPointsRemaining()\r\n        })\r\n\r\n        // console.log(\"You have removed the \" + skill.name + \" skill\")\r\n        return false;\r\n    }\r\n\r\n\r\n    lockChanges = () => {\r\n        // disable inputs on playerInfo, resources, and skill checkboxes\r\n        \r\n        this.props.alert.show(\"Character editing \" + (this.state.locked ? \"unl\" : \"l\") + \"ocked\")\r\n\r\n        this.setState(prevState => ({locked: !prevState.locked}));\r\n\r\n        this.calculateSkillPointsRemaining();\r\n    }\r\n\r\n    printCharacterSheet = () => {\r\n        PrintCharacterSheet(this.state, this.calculateSkillPointsRemaining())\r\n    }\r\n\r\n    printCharacterSheetDisabled = () => {\r\n        this.props.alert.show(\"Sorry! Download PDF is currently disabled for updating\", {timeout: 5000, type: 'error'})\r\n    }\r\n\r\n    changeCharacterPicture = (URL) => {\r\n        this.setState({characterPicture: URL})\r\n    }\r\n\r\n    changeCharacterBio = (text) => {\r\n        this.setState({characterBio: text})\r\n    }\r\n\r\n    calculateXpFromLevel = (input) => {\r\n        let level = parseInt(input);\r\n        if (this.isInt(level)) {\r\n            if (level < 0) {\r\n                return NaN;\r\n            } else if (level <= 20) {\r\n                return level * 5;\r\n            } else if (level > 20) {\r\n                level = level - 20;\r\n                return level * 10 + 100;\r\n            } else {\r\n                return NaN;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    calculateLevelFromXp = (input) => {\r\n        let xp = parseInt(input);\r\n        if (this.isInt(xp)) {\r\n            if (xp < 0) {\r\n                return NaN;\r\n            } else if (xp <= 100) {\r\n                return xp / 5;\r\n            } else if (xp > 100) {\r\n                xp = xp - 100;\r\n                return xp / 10 + 20;\r\n            }\r\n        } else {\r\n            return NaN;\r\n        }\r\n    }\r\n\r\n    isInt = (value) => {\r\n        var x;\r\n        if (isNaN(value)) {\r\n            return false;\r\n        }\r\n        x = parseFloat(value);\r\n        return (x | 0) === x;\r\n    }\r\n\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    madRamblings() {\r\n        return \"THE HIDE BEHIND THE HELMETS MUST BE CRUCIFIED. ONE OF US, ONE OF US, WILL TAKE THE MOST DANGEROUS SHOT OF THEIR LIVES, and AT THIS MOMENT IT IS ME. WITH ANOTHER PRAYER, THIS CLIMB WILL BE OVER. CHILD, HEAR MY SONG, AND LIVE. HERILO ERIK JOHNSON He must find him. Defending the castle itself would probably do no good. Johnson had no idea how many armed men there were in the fortress, how close they might be, how many there mighbe in the houses beyond. But he had to try. He would turn back. He had come too far. His heart pounded. His pulse grew harder. The time is now. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIMIS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOWTHE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIMIS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOWTHE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIMIS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOWTHE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIMIS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOWTHE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIMIS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW. THE TIME IS NOW.\";\r\n    }\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n    // MAD RAMBLINGS EASTER EGG TEXT\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n\r\n                            <Header \r\n                                lockChanges={this.lockChanges}\r\n                                resetSkills={this.resetSkills}\r\n                                locked={this.state.locked} \r\n                                saveCharacter={this.saveCharacter} \r\n                                loadCharacter={this.loadCharacter} \r\n                                deleteCharacter={this.deleteCharacter} \r\n                                characterList={this.state.characterList} \r\n                                loadCharacterList={this.loadCharacterList}\r\n                                printCharacterSheet={this.printCharacterSheet}\r\n                                calculateXpFromLevel={this.calculateXpFromLevel}\r\n                                calculateLevelFromXp={this.calculateLevelFromXp}\r\n                                \r\n                                // pass state to a button for testing\r\n                                staate={this.state} >\r\n                            </Header>\r\n\r\n                            <CharacterInfo\r\n                                races={this.state.races}\r\n                                countries={this.state.countries}\r\n                                level={this.state.level}\r\n                                characterName={this.state.characterName}\r\n                                country={this.state.country}\r\n                                player={this.state.player}\r\n                                race={this.state.race}\r\n                                savedXp={this.state.savedXp}\r\n                                characterInfoChange={this.characterInfoChange}\r\n                                lockChanges={this.state.locked}\r\n                                calculateSkillPointsRemaining={this.calculateSkillPointsRemaining}\r\n                            />\r\n\r\n                            <CharacterBio \r\n                                characterPicture={this.state.characterPicture}\r\n                                characterBio={this.state.characterBio}\r\n                                changeCharacterPicture={this.changeCharacterPicture}\r\n                                changeCharacterBio={this.changeCharacterBio}\r\n                                lockChanges={this.state.locked}\r\n                            />\r\n\r\n                            <Container>\r\n                                {this.state.loadingSkills ? <div>Loading skills. Please wait...</div> : <>\r\n                                \r\n                                <Resources \r\n                                    resources={this.state.resources}\r\n                                    addResource={this.addResource} \r\n                                    removeResource={this.removeResource} \r\n                                    lockChanges={this.state.locked} \r\n                                    MAGIC_POINT_COST={this.state.MAGIC_POINT_COST}\r\n                                    PRODUCTION_POINT_COST={this.state.PRODUCTION_POINT_COST}\r\n                                    CRAFT_POINT_COST={this.state.CRAFT_POINT_COST}\r\n                                />\r\n                                \r\n                                <Row>\r\n                                    <Col className=\"skilltree\">\r\n\r\n                                        <div className=\"combat\">\r\n                                            <SkillTree \r\n                                                treeName=\"Combat\"\r\n                                                tree=\"combat\"\r\n                                                skills={this.state.combat} \r\n                                                playerSkills={this.state.playerHasSkill}\r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} \r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"general\">\r\n                                            <SkillTree \r\n                                                treeName=\"General\"\r\n                                                tree=\"general\"\r\n                                                skills={this.state.general} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                        <div className=\"nature\">\r\n                                            <SkillTree \r\n                                                treeName=\"Nature\"\r\n                                                tree=\"nature\"\r\n                                                skills={this.state.nature} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                        <div className=\"necromancy\">\r\n                                            <SkillTree \r\n                                                treeName=\"Necromancy\"\r\n                                                tree=\"necromancy\"\r\n                                                skills={this.state.necromancy} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n\r\n                                        <div className=\"compulsion\">\r\n                                            <SkillTree \r\n                                                treeName=\"Compulsion\"\r\n                                                tree=\"compulsion\"\r\n                                                skills={this.state.compulsion} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    <Col className=\"skilltree\">\r\n\r\n                                        <div className=\"production\">\r\n                                                <SkillTree \r\n                                                treeName=\"Production\"\r\n                                                tree=\"production\"\r\n                                                skills={this.state.production} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                        {/* class production for text CSS */}\r\n                                        <div className=\"production\">\r\n                                                <SkillTree \r\n                                                treeName=\"Crafting\"\r\n                                                tree=\"crafting\"\r\n                                                skills={this.state.crafting} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                        \r\n                                        <div className=\"aegis\">\r\n                                                <SkillTree \r\n                                                treeName=\"Aegis\"\r\n                                                tree=\"aegis\"\r\n                                                skills={this.state.aegis} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n\r\n                                        <div className=\"battle\">\r\n                                            <SkillTree \r\n                                                treeName=\"Battle\"\r\n                                                tree=\"battle\"\r\n                                                skills={this.state.battle} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n\r\n                                        <div className=\"enchantment\">\r\n                                            <SkillTree \r\n                                                treeName=\"Enchantment\"\r\n                                                tree=\"enchantment\"\r\n                                                skills={this.state.enchantment} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    <Col className=\"skilltree\">\r\n\r\n                                        <div className=\"roleplaying\">\r\n                                            <SkillTree \r\n                                                treeName=\"Roleplaying\"\r\n                                                tree=\"roleplaying\"\r\n                                                skills={this.state.roleplaying} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n\r\n                                        <div className=\"roleplaying\">\r\n                                            <SkillTree \r\n                                                treeName=\"Scholar\"\r\n                                                tree=\"scholar\"\r\n                                                skills={this.state.scholar} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n\r\n                                        <div className=\"roleplaying\">\r\n                                            <SkillTree \r\n                                                treeName=\"Special Access Skills\"\r\n                                                tree=\"specialaccess\"\r\n                                                skills={this.state.specialaccess} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                    \r\n                                        <div className=\"restoration\">\r\n                                            <SkillTree \r\n                                                treeName=\"Restoration\"\r\n                                                tree=\"restoration\"\r\n                                                skills={this.state.restoration} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row> </>\r\n                                }\r\n\r\n                            </Container>\r\n                        </Route>\r\n\r\n                        <Route path=\"/register\" exact component={RegisterNewUserComponent} />\r\n\r\n                        <Route path=\"/forgot\" exact component={ForgotPasswordComponent} />\r\n                        {/* :token in path creates a string prop equal to all characters after /newpass called token */}\r\n                        <Route path=\"/newpass:token\" exact component={NewPasswordComponent} /> \r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withAlert()(App);\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport {render} from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\r\nimport AlertTemplate from './react-alert-template-basic'\r\n\r\n// optional cofiguration\r\nconst options = {\r\n    // you can also just use 'bottom center'\r\n    position: positions.TOP_CENTER,\r\n    timeout: 3000,\r\n    offset: '30px',\r\n    // you can also just use 'scale'\r\n    transition: transitions.FADE\r\n  }\r\n  \r\nconst Root = () => (\r\n    <AlertProvider template={AlertTemplate} {...options}>\r\n        <App />\r\n    </AlertProvider>\r\n)\r\n\r\nrender(<Root />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}