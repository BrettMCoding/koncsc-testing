{"version":3,"sources":["react-alert-template-basic.js","site_layout/user_management/services/AuthenticationService.js","site_layout/user_management/components/LoginComponent.js","site_layout/user_management/components/LogoutComponent.js","site_layout/user_management/components/NavCharacterList.js","site_layout/user_management/components/ConfirmationModal.js","site_layout/header/Navigation.js","site_layout/header/Header.js","site_layout/character_info/CharacterInfoInput.js","site_layout/character_info/CharacterInfoDropdownCountries.js","site_layout/character_info/CharacterInfoDropdownRaces.js","site_layout/character_info/CharacterInfo.js","site_layout/resources/Resource.js","site_layout/resources/Resources.js","site_layout/skill_trees/Skill.js","site_layout/skill_trees/SkillTree.js","site_layout/user_management/components/RegisterNewUserComponent.js","site_layout/user_management/components/NewPasswordComponent.js","site_layout/user_management/components/ForgotPasswordComponent.js","site_layout/character_sheet/PrintCharacterSheet.js","App.js","index.js"],"names":["ex","React","require","BaseIcon","_ref","color","_ref$pushRight","pushRight","undefined","children","createElement","xmlns","width","height","viewBox","fill","stroke","strokeWidth","strokeLinecap","strokeLinejoin","style","marginRight","minWidth","InfoIcon","cx","cy","r","x1","y1","x2","y2","SuccessIcon","d","points","ErrorIcon","CloseIcon","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","alertStyle","borderStyle","borderColor","backgroundColor","padding","borderRadius","display","justifyContent","alignItems","boxShadow","fontFamily","boxSizing","buttonStyle","marginLeft","border","cursor","module","exports","message","options","close","onClick","type","flex","whiteSpace","textAlign","username","password","axios","get","process","headers","authorization","this","createBasicAuthToken","window","btoa","localStorage","setItem","console","log","getItem","setupAxiosInterceptors","removeItem","user","token","interceptors","request","use","config","isUserLoggedIn","LoginComponent","props","APP_URL","useState","email","updateEmail","updatePassword","hasLoginFailed","setLoginFailed","showSuccessMessage","setSuccessMessage","alert","useAlert","className","name","value","onChange","event","AuthenticationService","executeBasicAuthenticationService","then","registerSuccessfulLogin","show","timeout","toggleModal","getUserLoggedInProp","loadCharacterList","catch","href","LogoutComponent","logout","NavCharacterList","characterList","map","character","id","setCurrentConfirmationModal","handleCharacter","characterName","level","race","ConfirmationModal","Modal","isOpen","confirmationModalIsOpen","toggle","toggleConfirmationModalIsOpen","ModalBody","ModalFooter","Button","Navigation","navbarIsOpen","setNavbarIsOpen","loginModalIsOpen","setLoginModalIsOpen","skillResetModalIsOpen","setSkillResetModalIsOpen","setConfirmationModalIsOpen","toggleLoginModal","toggleSkillResetModalIsOpen","handleMethod","setHandleMethod","setMessage","setId","setUserLoggedIn","boolean","hideWhenNotLoggedInWrap","content","items","from","opacity","enter","leave","transitionProps","div","Navbar","light","expand","NavbarToggler","Collapse","navbar","Nav","NavItem","NavLink","lockChanges","locked","UncontrolledDropdown","nav","inNavbar","DropdownToggle","caret","DropdownMenu","right","saveCharacter","loadCharacter","deleteCharacter","ModalHeader","resetSkills","Header","Container","Component","CharacterInfoInput","displayName","placeholder","maxLength","infoValue","disabled","e","characterInfoChange","infoName","CharacterInfoDropdownCountries","dropdownOpen","setDropdownOpen","countries","optionsMap","DropdownItem","Dropdown","setActiveFromChild","size","country","CharacterInfoDropdownRaces","races","CharacterInfo","Row","Col","player","calculateSkillPointsRemaining","savedXp","Resource","removeResource","addResource","resourceName","resource","max","skillCss","cost","fillBarAnim","useSpring","ResourceBar","Filler","pointsGrantedPerSkillPoint","isLoaded","Resources","MAGIC_POINT_COST","resources","magicPoints","PRODUCTION_POINT_COST","productionPoints","CRAFT_POINT_COST","craftPoints","Skill","playerHasSkill","playerSkills","compareIds","some","skill","addSpaces","string","tier","checkedStyle","freeLanguages","find","foundSkill","checked","playerCheckedASkillBox","SkillTree","setIsOpen","numOfSkillsInTree","skills","freeLangsNum","treeName","icon","faChevronUp","faChevronDown","filter","tree","toLowerCase","RegisterNewUserComponent","hasRegisterFailed","setRegisterFailed","errorMessage","setErrorMessage","useEffect","document","title","persist","post","API_URL","res","err","response","data","requestRegisterNewUser","NewPasswordComponent","password2","updatePassword2","match","params","requestNewPassword","ForgotPasswordComponent","PDFName","PDFDocument","PDFBool","PDFArray","PDFNumber","PDFString","getAcroForm","pdfDoc","catalog","lookup","of","findAcroFieldByName","acroForm","fieldRefs","lookupMaybe","fields","Array","idx","len","getAcroFields","acroField","fieldName","fillInField","text","fontSize","field","Error","set","fillAcroTextField","PrintCharacterSheet","state","savedSkillPoints","a","fetch","arrayBuffer","True","magicPowerField","craftPointField","productionPointField","skillBox","save","pdfBytes","blob","Blob","FileSaver","saveAs","App","loadingSkills","combat","general","production","roleplaying","aegis","battle","nature","necromancy","compulsion","restoration","enchantment","sortSkillsByTree","setState","prevState","saveLocalCharacter","values","JSON","stringify","loadLocalCharacter","localStorageCharacter","parse","method","url","status","checkCharacterFreeLanguages","updatedInfo","addFreeLanguages","languageNamesArray","hasFreeLanguages","generalSkills","languageName","getLanguageByName","push","lang","removeSkill","calculateBaseSkillPoints","newSkillPointsRemaining","calculateSpentSkillPoints","spent","playerResources","checkRequirements","requiredSkill","requires","pSkills","pSkill","includes","checkedSkill","canPlayerGetThisRoleplayingSkill","addSkill","skillIsRequired","playerRPSkills","tierThreePlayerRPSkills","requirementSkillString","pSkill2","arrSkill","printCharacterSheet","exact","path","staate","component","withAlert","position","positions","TOP_CENTER","offset","transition","transitions","FADE","render","template","AlertTemplate","getElementById"],"mappings":"6FAEA,IAF0BA,EAEtBC,GAFsBD,EAEEE,EAAQ,KAFyB,kBAAPF,GAAoB,YAAaA,EAAMA,EAAE,QAAcA,EAIzGG,EAAW,SAAkBC,GAC/B,IAAIC,EAAQD,EAAKC,MACbC,EAAiBF,EAAKG,UACtBA,OAA+BC,IAAnBF,GAAsCA,EAClDG,EAAWL,EAAKK,SACpB,OAAOR,EAAMS,cACX,MACA,CACEC,MAAO,6BACPC,MAAO,KACPC,OAAQ,KACRC,QAAS,YACTC,KAAM,OACNC,OAAQX,EACRY,YAAa,IACbC,cAAe,QACfC,eAAgB,QAChBC,MAAO,CAAEC,YAAad,EAAY,OAAS,IAAKe,SAAU,KAE5Db,IAIAc,EAAW,WACb,OAAOtB,EAAMS,cACXP,EACA,CAAEE,MAAO,WACTJ,EAAMS,cAAc,SAAU,CAAEc,GAAI,KAAMC,GAAI,KAAMC,EAAG,OACvDzB,EAAMS,cAAc,OAAQ,CAAEiB,GAAI,KAAMC,GAAI,KAAMC,GAAI,KAAMC,GAAI,OAChE7B,EAAMS,cAAc,OAAQ,CAAEiB,GAAI,KAAMC,GAAI,IAAKC,GAAI,KAAMC,GAAI,QAI/DC,EAAc,WAChB,OAAO9B,EAAMS,cACXP,EACA,CAAEE,MAAO,WACTJ,EAAMS,cAAc,OAAQ,CAAEsB,EAAG,uCACjC/B,EAAMS,cAAc,WAAY,CAAEuB,OAAQ,4BAI1CC,EAAY,WACd,OAAOjC,EAAMS,cACXP,EACA,CAAEE,MAAO,WACTJ,EAAMS,cAAc,SAAU,CAAEc,GAAI,KAAMC,GAAI,KAAMC,EAAG,OACvDzB,EAAMS,cAAc,OAAQ,CAAEiB,GAAI,KAAMC,GAAI,IAAKC,GAAI,KAAMC,GAAI,OAC/D7B,EAAMS,cAAc,OAAQ,CAAEiB,GAAI,KAAMC,GAAI,KAAMC,GAAI,KAAMC,GAAI,SAIhEK,EAAY,WACd,OAAOlC,EAAMS,cACXP,EACA,CAAEE,MAAO,UAAWE,WAAW,GAC/BN,EAAMS,cAAc,OAAQ,CAAEiB,GAAI,KAAMC,GAAI,IAAKC,GAAI,IAAKC,GAAI,OAC9D7B,EAAMS,cAAc,OAAQ,CAAEiB,GAAI,IAAKC,GAAI,IAAKC,GAAI,KAAMC,GAAI,SAI9DM,EAAWC,OAAOC,QAAU,SAAUC,GACxC,IAAK,IAAIC,EAAI,EAAGA,EAAIC,UAAUC,OAAQF,IAAK,CACzC,IAAIG,EAASF,UAAUD,GAEvB,IAAK,IAAII,KAAOD,EACVN,OAAOQ,UAAUC,eAAeC,KAAKJ,EAAQC,KAC/CL,EAAOK,GAAOD,EAAOC,IAK3B,OAAOL,GAGLS,EAAa,CACfC,YAAa,QACbC,YAAa,QACbC,gBAAiB,OACjB9C,MAAO,QACP+C,QAAS,OACTC,aAAc,MACdC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,UAAW,sCACXC,WAAY,QACZ9C,MAAO,QACP+C,UAAW,cAGTC,EAAc,CAChBC,WAAY,OACZC,OAAQ,OACRX,gBAAiB,cACjBY,OAAQ,UACR1D,MAAO,WA4BT2D,EAAOC,QAzBa,SAAuB7D,GACzC,IAAI8D,EAAU9D,EAAK8D,QACfC,EAAU/D,EAAK+D,QACf/C,EAAQhB,EAAKgB,MACbgD,EAAQhE,EAAKgE,MAEjB,OAAOnE,EAAMS,cACX,MACA,CAAE2D,QAASD,EAAOhD,MAAOgB,EAAS,GAAIY,EAAY5B,IACjC,SAAjB+C,EAAQG,MAAmBrE,EAAMS,cAAca,EAAU,MACxC,YAAjB4C,EAAQG,MAAsBrE,EAAMS,cAAcqB,EAAa,MAC9C,UAAjBoC,EAAQG,MAAoBrE,EAAMS,cAAcwB,EAAW,MAC3DjC,EAAMS,cACJ,OACA,CAAEU,MAAO,CAAEmD,KAAM,EAAGC,WAAY,UAAWC,UAAW,WACtDP,GAEFjE,EAAMS,cACJ,SACA,CAAEU,MAAOwC,GACT3D,EAAMS,cAAcyB,EAAW,U,kQCjEtB,M,0HAlDuBuC,EAAUC,GAExC,OAAOC,IAAMC,IAAN,UARCC,+CAQD,SACH,CAAEC,QAAS,CAAEC,cAAeC,KAAKC,qBAAqBR,EAAUC,Q,2CAGnDD,EAAUC,GAG3B,MAFgB,SAAWQ,OAAOC,KAAKV,EAAW,IAAMC,K,8CAKpCD,EAAUC,GAE9BU,aAAaC,QAlB2B,oBAkBeZ,GACvDa,QAAQC,IAAI,8BACZD,QAAQC,IAAIH,aAAaI,QApBe,sBAqBxCF,QAAQC,IAAI,cACZH,aAAaC,QAAQ,aAAcL,KAAKC,qBAAqBR,EAAUC,IACvEM,KAAKS,uBAAuBL,aAAaI,QAAQ,iB,+BAIjDJ,aAAaM,WA3B2B,uB,uCAgCxC,OAAa,OADFN,aAAaI,QA/BgB,uB,4CAqCxC,IAAIG,EAAOP,aAAaI,QArCgB,qBAsCxC,OAAa,OAATG,EAAsB,GACnBA,I,6CAGYC,GAAQ,IAAD,OAC1BjB,IAAMkB,aAAaC,QAAQC,KACvB,SAACC,GAIG,OAHI,EAAKC,mBACLD,EAAOlB,QAAQC,cAAgBa,GAE5BI,S,cCcRE,MA9Df,SAAwBC,GACpB,IAAMC,EAAUvB,wCADW,EAGEwB,mBAAS,IAHX,mBAGpBC,EAHoB,KAGbC,EAHa,OAIQF,mBAAS,IAJjB,mBAIpB3B,EAJoB,KAIV8B,EAJU,OAKcH,oBAAS,GALvB,mBAKpBI,EALoB,KAKJC,EALI,OAMqBL,oBAAS,GAN9B,mBAMpBM,EANoB,KAMAC,EANA,KAOrBC,EAAQC,cA6Bd,OACI,8BACEX,EAAMF,gBACA,yBAAKc,UAAU,2CACX,wBAAIA,UAAU,eAAd,SAECN,GAAkB,yBAAKM,UAAU,uBAAf,uBAElBJ,GAAsB,yBAAKI,UAAU,mCAAf,oBAL3B,UAOW,2BAAO1C,KAAK,OAAO0C,UAAU,eAAeC,KAAK,QAAQC,MAAOX,EAAOY,SAbrE,SAACC,GAAD,OAAWZ,EAAYY,EAAM7E,OAAO2E,UAMjD,aASc,2BAAO5C,KAAK,WAAW0C,UAAU,eAAeC,KAAK,WAAWC,MAAOvC,EAAUwC,SAd/E,SAACC,GAAD,OAAWX,EAAeW,EAAM7E,OAAO2E,UAgBnD,4BAAQF,UAAU,uCAAuC3C,QAzCpD,WAKjBgD,EACKC,kCAAkCf,EAAO5B,GACzC4C,MAAK,WACFF,EAAsBG,wBAAwBjB,EAAO5B,GACrDmC,EAAMW,KAAK,mBAAoB,CAACnD,KAAK,UAAWoD,QAAS,MAGzDtB,EAAMuB,cACNvB,EAAMwB,oBAAoBP,EAAsBnB,kBAChDE,EAAMyB,kBAAkBf,MAEzBgB,OAAM,WACLjB,GAAkB,GAClBF,GAAe,QAuBX,SACA,6BACI,uBAAGoB,KAAM1B,EAAU,cAAeW,UAAU,yCAA5C,kBACA,uBAAGe,KAAM1B,EAAU,YAAaW,UAAU,yCAA1C,6BCrDT,SAASgB,EAAgB5B,GACpC,IAAMU,EAAQC,cAQd,OACI,6BACQ,4BAAQC,UAAU,iBAAiB3C,QARhC,WACXgD,EAAsBY,SACtBnB,EAAMW,KAAK,oBAAqB,CAACnD,KAAK,UAAWoD,QAAQ,MACzDtB,EAAMwB,oBAAoBP,EAAsBnB,oBAKxC,W,iJCbD,SAASgC,EAAiB9B,GAKrC,OAAOA,EAAM+B,cAAcC,KAAI,SAACC,GAExB,OAAO,yBAAKrB,UAAU,yCAEtBsB,GAAID,EAAUC,GAEdjE,QAAS,WACJ+B,EAAMmC,4BAEHnC,EAAMoC,gBAELpC,EAAMlC,QAAUmE,EAAUI,cAAgB,IAE3CJ,EAAUC,MAGTD,EAAUI,cAdZ,QAciC,6BAdjC,YAcmDJ,EAAUK,MAd7D,OAc0EL,EAAUM,SCpBxF,SAASC,EAAkBxC,GAGtC,OACI,6BACI,kBAACyC,EAAA,EAAD,CAAOC,OAAQ1C,EAAM2C,wBAAyBC,OAAQ5C,EAAM6C,+BACxD,kBAACC,EAAA,EAAD,KACK9C,EAAMlC,SAEX,kBAACiF,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQpC,UAAU,gBAAgB3G,MAAM,YAAYgE,QAAS+B,EAAM6C,+BAAnE,UACA,kBAACG,EAAA,EAAD,CAAQpC,UAAU,gBAAgB3G,MAAM,UAAUgE,QAAS,WAAO+B,EAAMoC,gBAAgBpC,EAAMkC,GAAIlC,EAAMU,OAAOV,EAAM6C,kCAArH,cC+LLI,MAhLf,SAAoBjD,GAAQ,IAAD,EACeE,oBAAS,GADxB,mBAClBgD,EADkB,KACJC,EADI,OAEuBjD,oBAAS,GAFhC,mBAElBkD,EAFkB,KAEAC,EAFA,OAGiCnD,oBAAS,GAH1C,mBAGlBoD,EAHkB,KAGKC,EAHL,OAIqCrD,oBAAS,GAJ9C,mBAIlByC,EAJkB,KAIOa,EAJP,KAOnB9C,EAAQC,cASR8C,EAAmB,kBAAMJ,GAAoBvD,KAA0BsD,IAGvEM,EAA8B,WAClCH,GAA0BD,IAKtBT,EAAgC,WACpCW,GAA4Bb,IA1BL,EA6BiBzC,mBAAS,IA7B1B,mBA6BhByD,EA7BgB,KA6BFC,EA7BE,OA+BO1D,mBAAS,IA/BhB,mBA+BhBpC,EA/BgB,KA+BP+F,EA/BO,QAiCH3D,mBAAS,MAjCN,qBAiChBgC,GAjCgB,MAiCZ4B,GAjCY,MAsCnB3B,GAA8B,SAACwB,EAAc7F,EAASoE,GAC1D0B,GAAgB,kBAAMD,KACtBE,EAAW/F,GACXgG,GAAM5B,GACNW,KA1CuB,GA+CiB3C,mBAASe,EAAsBnB,kBA/ChD,qBA+ClBA,GA/CkB,MA+CFiE,GA/CE,MAgDnBvC,GAAsB,SAACwC,GAC3BD,GAAgBC,IAKZC,GAA0B,SAACC,GAG/B,OAAO,yBAAKtD,UAAU,6BAA4B,kBAAC,aAAD,CAC9CuD,MAAOrE,GACPsE,KAAM,CAAEC,QAAS,GACjBC,MAAO,CAAED,QAAS,GAClBE,MAAO,CAAEF,QAAS,KACjB,SAAAvE,GAAc,OAAIA,GAAmB,SAAC0E,GAAD,OAAqB,kBAAC,IAASC,IAAV,CAAczJ,MAAOwJ,GAG3EN,SAKX,OACE,6BACI,kBAACQ,EAAA,EAAD,CAAQ9D,UAAU,qBAAqB+D,OAAK,EAACC,OAAO,MACpD,kBAACC,EAAA,EAAD,CAAe5G,QA5DA,kBAAMkF,GAAiBD,MA8DtC,kBAAC4B,EAAA,EAAD,CAAUpC,OAAQQ,EAAc6B,QAAM,GACpC,kBAACC,EAAA,EAAD,CAAKpE,UAAU,UAAUmE,QAAM,GAE7B,kBAACE,EAAA,EAAD,CAASrE,UAAU,6BACjB,kBAACsE,EAAA,EAAD,CAASvD,KAAK,iCAAd,0BAGF,kBAACsD,EAAA,EAAD,CAASrE,UAAU,6BACjB,kBAACsE,EAAA,EAAD,CAASvD,KAAK,sDAAd,aAGF,kBAACsD,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACK,4BAAQtE,UAAU,YAAY3C,QAASyF,GAAvC,kBAIT,kBAACuB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACK,4BAAQtE,UAAU,YAAY3C,QAAS+B,EAAMmF,aAAenF,EAAMoF,OAAS,MAAQ,IAAnF,iBAIT,kBAACH,EAAA,EAAD,CAASrE,UAAU,6BACbd,IAAkB,kBAAC8B,EAAD,CAAiBJ,oBAAqBA,MAEvD1B,IAAiB,kBAACkD,EAAA,EAAD,CAAQ/I,MAAM,UAAUgE,QAASwF,GAAjC,UAGvBQ,GACG,kBAACgB,EAAA,EAAD,KACA,kBAACI,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAClC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,QAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACf,kBAAC7D,EAAD,CAAkBC,cAAe/B,EAAM+B,cAAeK,gBAAiBpC,EAAM4F,cAAezD,4BAA6BA,GAA6BrE,QAAS,uEAC/J,yBAAK8C,UAAU,yCAAyC3C,QAAS,WAAKkE,GAA4BnC,EAAM4F,cAAe,oDAAvH,qBAKP3B,GACD,kBAACgB,EAAA,EAAD,KACI,kBAACI,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAClC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,QAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACf,kBAAC7D,EAAD,CAAkBC,cAAe/B,EAAM+B,cAAeK,gBAAiBpC,EAAM6F,cAAe1D,4BAA6BA,GAA6BrE,QAAS,mEAKtKmG,GACD,kBAACgB,EAAA,EAAD,KACQ,kBAACI,EAAA,EAAD,CAAsBC,KAAG,EAACC,UAAQ,GAClC,kBAACC,EAAA,EAAD,CAAgBF,KAAG,EAACG,OAAK,GAAzB,UAGA,kBAACC,EAAA,EAAD,CAAcC,OAAK,GACf,kBAAC7D,EAAD,CAAkBC,cAAe/B,EAAM+B,cAAeK,gBAAiBpC,EAAM8F,gBAAiB3D,4BAA6BA,GAA6BrE,QAAS,qEASzK,kBAAC2E,EAAA,EAAD,CAAOC,OAAQU,EAAkBR,OAAQa,GACrC,kBAACsC,EAAA,EAAD,CAAanD,OAAQa,GAArB,SACA,kBAACX,EAAA,EAAD,KACI,kBAAC,EAAD,CAAgBhD,eAAgBA,GAAgB0B,oBAAqBA,GAAqBD,YAAakC,EAAkBhC,kBAAmBzB,EAAMyB,qBAEtJ,kBAACsB,EAAA,EAAD,KACQ,kBAACC,EAAA,EAAD,CAAQpC,UAAU,gBAAgB3G,MAAM,YAAYgE,QAASwF,GAA7D,YAKZ,kBAAChB,EAAA,EAAD,CAAOC,OAAQY,EAAuBV,OAAQc,GAC1C,kBAACZ,EAAA,EAAD,KACI,4GAEJ,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAQpC,UAAU,gBAAgB3G,MAAM,YAAYgE,QAAS+B,EAAM6C,+BAAnE,UACA,kBAACG,EAAA,EAAD,CAAQpC,UAAU,gBAAgB3G,MAAM,UAAUgE,QAAS,WAAO+B,EAAMgG,cAAetC,MAAvF,kBAKR,kBAAClB,EAAD,CAAmBG,wBAAyBA,EAC5CE,8BAA+BA,EAC/BT,gBAAiBuB,EAAc7F,QAASA,EAASoE,GAAIA,GAAIxB,MAAOA,OCjKjEuF,E,iLA7BP,OACI,6BACI,kBAACC,EAAA,EAAD,KACI,yBAAKtF,UAAU,gBACX,mDACA,0EAEJ,kBAAC,EAAD,CACIuE,YAAatG,KAAKmB,MAAMmF,YACxBa,YAAanH,KAAKmB,MAAMgG,YACxBZ,OAAQvG,KAAKmB,MAAMoF,OACnBQ,cAAe/G,KAAKmB,MAAM4F,cAC1BC,cAAehH,KAAKmB,MAAM6F,cAC1BC,gBAAiBjH,KAAKmB,MAAM8F,gBAC5B/D,cAAelD,KAAKmB,MAAM+B,cAC1BN,kBAAmB5C,KAAKmB,MAAMyB,0B,GAjBjC5H,IAAMsM,WCaZC,MAjBf,SAA4BpG,GAExB,OACI,6BACKA,EAAMqG,YADX,IACwB,6BADxB,OAEA,2BAAOnI,KAAK,OACRoI,YAAatG,EAAMsG,YACnBC,UAAWvG,EAAMuG,UACjBzF,MAAOd,EAAMwG,UACbC,SAAUzG,EAAMmF,YAChBpE,SAAY,SAAA2F,GACR1G,EAAM2G,oBAAoB3G,EAAM4G,SAAUF,EAAEvK,OAAO2E,Y,iBCVpD,SAAS+F,EAA+B7G,GAAO,MAGlBE,oBAAS,GAHS,mBAGnD4G,EAHmD,KAGrCC,EAHqC,KAMpDC,EAAYhH,EAAMgH,UAElBC,OAA4B7M,IAAd4M,EAA0B,qDAAkCA,EAAUhF,KAAI,SAAA5F,GAAC,OAAM,kBAAC8K,EAAA,EAAD,CAActG,UAAU,qBAAqB3C,QAAS,SAACyI,GAAO1G,EAAM2G,oBAAoB,UAAWvK,EAAEyE,QAASzE,EAAEyE,SAIrN,OACI,wCACI,kBAACsG,EAAA,EAAD,CAAUzE,OAAQoE,EAAclE,OAJzB,kBAAMmE,GAAgB,SAAAD,GAAY,OAAKA,MAIEM,oBAAoB,EAAMC,KAAK,MAC3E,kBAAC7B,EAAA,EAAD,CAAgBC,OAAK,EAAC7E,UAAU,sBAC5B,0BAAMA,UAA8B,KAAlBZ,EAAMsH,QAAiB,GAAK,uBAC1B,KAAlBtH,EAAMsH,QAAiB,mBAAqBtH,EAAMsH,UAGxD,kBAAC5B,EAAA,EAAD,KACKuB,KCrBN,SAASM,EAA2BvH,GAAO,MAGdE,oBAAS,GAHK,mBAG/C4G,EAH+C,KAGjCC,EAHiC,KAMhDS,EAAQxH,EAAMwH,MAEdP,OAAwB7M,IAAVoN,EAAsB,iDAA8BA,EAAMxF,KAAI,SAAA5F,GAAC,OAAM,kBAAC8K,EAAA,EAAD,CAActG,UAAU,qBAAqB3C,QAAS,SAACyI,GAAO1G,EAAM2G,oBAAoB,OAAQvK,EAAEyE,QAASzE,EAAEyE,SAItM,OACI,qCACI,kBAACsG,EAAA,EAAD,CAAUzE,OAAQoE,EAAclE,OAJzB,kBAAMmE,GAAgB,SAAAD,GAAY,OAAKA,MAIEM,oBAAoB,EAAMC,KAAK,MAC3E,kBAAC7B,EAAA,EAAD,CAAgBC,OAAK,EAAC7E,UAAU,sBAC5B,0BAAMA,UAA2B,KAAfZ,EAAMuC,KAAc,GAAK,uBAC1B,KAAfvC,EAAMuC,KAAc,gBAAkBvC,EAAMuC,OAElD,kBAACmD,EAAA,EAAD,KACKuB,KCjBd,IAwFQQ,EAxFf,iLAIQ,OACI,6BACI,kBAACvB,EAAA,EAAD,KACQ,kBAACwB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAK/G,UAAU,qBACf,yBAAKA,UAAU,yBACX,kBAAC8G,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CACI/G,UAAU,WACVyF,YAAY,iBACZO,SAAS,gBACTJ,UAAW3H,KAAKmB,MAAMqC,cACtBkE,UAAU,KACVD,YAAY,yBACZK,oBAAqB9H,KAAKmB,MAAM2G,oBAChCxB,YAAatG,KAAKmB,MAAMmF,gBAGpC,kBAACuC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACQ,kBAACJ,EAAD,CACIZ,oBAAqB9H,KAAKmB,MAAM2G,oBAChCpE,KAAM1D,KAAKmB,MAAMuC,KACjBiF,MAAO3I,KAAKmB,MAAMwH,SAG9B,kBAACG,EAAA,EAAD,KACI,kBAACd,EAAD,CACIF,oBAAqB9H,KAAKmB,MAAM2G,oBAChCW,QAASzI,KAAKmB,MAAMsH,QACpBN,UAAWnI,KAAKmB,MAAMgH,cAGlC,kBAACU,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAAC,EAAD,CACA/G,UAAU,WACVyF,YAAY,SACZO,SAAS,SACTJ,UAAW3H,KAAKmB,MAAM4H,OACtBrB,UAAU,KACVD,YAAY,sBACZK,oBAAqB9H,KAAKmB,MAAM2G,uBAGpC,kBAACgB,EAAA,EAAD,KACI,kBAAC,EAAD,CACA/G,UAAU,WACVyF,YAAY,QACZO,SAAS,QACTJ,UAAW3H,KAAKmB,MAAMsC,MACtBiE,UAAU,IACVD,YAAY,IACZK,oBAAqB9H,KAAKmB,MAAM2G,wBAGxC,kBAACe,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,yBAAK/G,UAAU,wBAAf,2BAA8D,yBAAKA,UAAU,cAAf,WAAyC/B,KAAKmB,MAAM6H,mCAGtH,kBAACF,EAAA,EAAD,KACI,kBAAC,EAAD,CACI/G,UAAU,WACVyF,YAAY,WACZO,SAAS,UACTJ,UAAW3H,KAAKmB,MAAM8H,QACtBvB,UAAU,IACVD,YAAY,IACZK,oBAAqB9H,KAAKmB,MAAM2G,kCA3EhF,GAAmCR,aCFpB,SAAS4B,EAAS/H,GAAO,MAEiBA,EAAMA,MAAnDgI,EAF4B,EAE5BA,eAAgBC,EAFY,EAEZA,YAAa9C,EAFD,EAECA,YAC7B+C,EAA6DlI,EAA7DkI,aAAcC,EAA+CnI,EAA/CmI,SAAUC,EAAqCpI,EAArCoI,IAAKC,EAAgCrI,EAAhCqI,SAAUC,EAAsBtI,EAAtBsI,KAAMjC,EAAgBrG,EAAhBqG,YAW/CkC,EAAcC,YAAU,CAAEhO,MAAO2N,EAAWA,GAPlC,KAARC,EACO,EAEJ,IAI2D,IAAM,OAGtEK,EAAc,WAChB,OACI,yBAAK7H,UAAU,gBACX,yBAAKA,UAAU,YAAYyF,EAA3B,KAA0C8B,EAA1C,MAAuDC,GACvD,kBAACM,EAAD,QAMNA,EAAS,WACX,OAAO,kBAAC,IAASjE,IAAV,CAAc7D,UAAW,UAAYyH,EAAUrN,MAAOuN,KAmCjE,OAhCiB,SAACJ,GAGd,YAAqB/N,IAAb+N,EAA0B,2CAE9B,kBAACT,EAAA,EAAD,CAAK9G,UAAU,oDAEf,4BAAQ1C,KAAK,SAAS0C,UAAU,+BAA+B6F,SAAUtB,EAAalH,QAAS,WAC3F+J,EAAeE,KADnB,KAQA,kBAACO,EAAD,MAEA,4BAAQvK,KAAK,SAAS0C,UAAU,gCAAgC6F,SAAUtB,EAAalH,QAAS,WAC5FgK,EAAYC,EAAcI,EAAMF,KADpC,KAQA,yBAAKxH,UAAU,iBAAiB0H,EAAOtI,EAAM2I,6BAO9CC,CAAST,GC9DL,SAASU,EAAU7I,GAE9B,OACI,6BACI,yBAAKY,UAAU,eAKP,wBAAIA,UAAU,aAAd,aAEA,kBAACmH,EAAD,CAAU/H,MAAOA,EACLqG,YAAa,cACbiC,KAAMtI,EAAM8I,iBACZV,IAAK,GACLO,2BAA4B,IAE5BT,aAAc,cAEdC,SAAUnI,EAAM+I,UAAUC,YAC1BX,SAAU,UAItB,kBAACN,EAAD,CAAU/H,MAAOA,EACLqG,YAAa,aACbiC,KAAMtI,EAAMiJ,sBACZb,IAAK,GACLO,2BAA4B,IAE5BT,aAAc,mBAEdC,SAAUnI,EAAM+I,UAAUG,iBAC1Bb,SAAU,eAItB,kBAACN,EAAD,CAAU/H,MAAOA,EACLqG,YAAa,QACbiC,KAAMtI,EAAMmJ,iBACZf,IAAK,GACLO,2BAA4B,IAE5BT,aAAc,cAEdC,SAAUnI,EAAM+I,UAAUK,YAC1Bf,SAAU,Y,oBCsB3BgB,OAvEf,SAAerJ,GAMX,IAAMsJ,EAAiB,SAACC,GAEpB,YAAyBnP,IAAjBmP,GACIC,EAAWD,IAIrBC,EAAa,SAACD,GAEhB,OAAOA,EAAaE,MAAK,SAAAC,GAAK,OAAIA,EAAMxH,KAAOlC,EAAM0J,MAAMxH,OAI1DyH,EAAY,SAACC,GACX,OAAyB,IAArB5J,EAAM0J,MAAMG,KACJ,KACoB,IAArB7J,EAAM0J,MAAMG,KACX,OACoB,IAArB7J,EAAM0J,MAAMG,KACX,SACoB,IAArB7J,EAAM0J,MAAMG,KACX,gBADL,GAKTC,EAAeR,EAAetJ,EAAMuJ,cAAgB,WAAa,GAGvE,YAA+BnP,IAA3B4F,EAAM+J,cAAc,IACf/J,EAAM+J,cAAcC,MAAK,SAAAC,GAAU,OAAIA,EAAWpJ,OAASb,EAAM0J,MAAM7I,QAChE,yBAAKD,UAAW,wCACX,yBAAKA,UAAW,8BACZ,2BACA,2BAAO6F,UAAU,EAAMvI,KAAK,WAAWgM,SAAS,IAC3C,IAFL,IAEWP,EAAU3J,EAAM0J,MAAM7I,MAC5Bb,EAAM0J,MAAM7I,OAGrB,yBAAKD,UAAU,4CAA4CZ,EAAM0J,MAAMpB,OAMvF,yBAAK1H,UAAW,gCAAkCkJ,GAC9C,yBAAKlJ,UAAW,qBAAuBkJ,GACnC,2BACA,2BAAOrD,SAAUzG,EAAMmF,YAAajH,KAAK,WAAWgM,QAASZ,EAAetJ,EAAMuJ,cAE9ExI,SAAU,SAAA2F,GAGF1G,EAAMmK,uBAAuBnK,EAAM0J,MAAOhD,EAAEvK,OAAO+N,YAI1D,IAVL,IAUWP,EAAU3J,EAAM0J,MAAM7I,MAC5Bb,EAAM0J,MAAM7I,OAGrB,yBAAKD,UAAU,4CAA4CZ,EAAM0J,MAAMpB,QC9DpE,SAAS8B,GAAUpK,GAAO,IAAD,EACRE,oBAAS,GADD,mBAC7BwC,EAD6B,KACrB2H,EADqB,KAE9BzH,EAAS,kBAAMyH,GAAW3H,IAC1B4H,EAAoBtK,EAAMuK,OAAOjO,OAGnCkO,EAAe,EACI,YAAnBxK,EAAMyK,WACND,EAAexK,EAAM+J,cAAczN,QAIvC,IAKMiO,EAASvK,EAAMuK,OAAOvI,KAAI,SAAC0H,GAAD,OACxB,kBAAC,GAAD,CAAOlN,IAAKkN,EAAMxH,GAAIwH,MAAOA,EAAOS,uBAAwBnK,EAAMmK,uBAAwBhF,YAAanF,EAAMmF,YAAaoE,aAAcvJ,EAAMuJ,aAAcQ,cAAe/J,EAAM+J,mBAGzL,OACI,6BACQ,4BAAI,4BAAQnJ,UAAU,6BAA6B3C,QAAS2E,GAAQ,kBAAC,IAAD,CAAiB8H,KAAMhI,EAASiI,IAAcC,OAEjH5K,EAAMyK,SAFP,IAVezK,EAAMuJ,aAAasB,QAAO,SAAAnB,GAAK,OAAIA,EAAMoB,OAAS9K,EAAMyK,SAASM,iBAAezO,OAYjDkO,EAF9C,MAE+DF,EAE/D,4BAAQ1J,UAAU,8BAA8B3C,QAAS2E,GAAQ,kBAAC,IAAD,CAAiB8H,KAAMhI,EAASiI,IAAcC,QACnH,kBAAC9F,EAAA,EAAD,CAAUpC,OAAQA,GACb6H,I,uBChCF,SAASS,KACpB,IAD+C,EAIlB9K,mBAAS,IAJS,mBAIxCC,EAJwC,KAIjCC,EAJiC,OAKAF,oBAAS,GALT,mBAKxC+K,EALwC,KAKrBC,EALqB,OAMChL,oBAAS,GANV,mBAMxCM,EANwC,KAMpBC,EANoB,OAOPP,mBAAS,IAPF,mBAOxCiL,EAPwC,KAO1BC,EAP0B,KAS/CC,qBAAU,WACNC,SAASC,MAAQ,qBACjB,IAmBJ,OACI,6BACI,yBAAK3K,UAAU,2CACX,wBAAIA,UAAU,eAAd,qBAEKqK,GAAqB,yBAAKrK,UAAU,uBAAuB,UAAYuK,GAEvE3K,GAAsB,yBAAKI,UAAU,mCAAf,yJAErBJ,GACF,8CACO,2BAAOtC,KAAK,OAAO0C,UAAU,eAAeC,KAAK,QAAQC,MAAOX,EAAOY,SA5BrE,SAACC,GAAD,OAAWZ,EAAYY,EAAM7E,OAAO2E,UA8B7C,4BAAQF,UAAU,uCAAuC3C,QAAS,SAAC+C,GAAWA,EAAMwK,UA5BrE,SAACrL,GAErB3B,IAAMiN,KADHC,wDAEN,CAAE,MAASvL,IACVgB,MAAK,SAACwK,GACHxM,QAAQC,IAAIuM,GACZlL,GAAkB,GAClByK,GAAkB,MACnBxJ,OAAM,SAACkK,GACNR,EAAgBQ,EAAIC,SAASC,MAC7BZ,GAAkB,MAkBiFa,CAAuB5L,KAAtH,aAGA,uBAAGwB,KA5CHjD,wCA4CkBkC,UAAU,6CAA5B,sBC9CL,SAASoL,GAAqBhM,GACzC,IADgD,EAIbE,mBAAS,IAJI,mBAIzC3B,EAJyC,KAI/B8B,EAJ+B,OAKXH,mBAAS,IALE,mBAKzC+L,EALyC,KAK9BC,EAL8B,OAMDhM,oBAAS,GANR,mBAMzC+K,EANyC,KAMtBC,EANsB,OAOAhL,oBAAS,GAPT,mBAOzCM,EAPyC,KAOrBC,EAPqB,OAQRP,mBAAS,IARD,mBAQzCiL,EARyC,KAQ3BC,EAR2B,KAUhDC,qBAAU,WACNC,SAASC,MAAQ,uBACjB,IAKJpM,QAAQC,IAAIY,GAmBZ,OACI,6BACI,yBAAKY,UAAU,2CACf,wBAAIA,UAAU,eAAd,sBAESqK,GAAqB,yBAAKrK,UAAU,uBAAuB,UAAYuK,GAEvE3K,GAAsB,yBAAKI,UAAU,mCAAf,+DAErBJ,GACF,iDACU,2BAAOtC,KAAK,WAAW0C,UAAU,eAAeC,KAAK,WAAWC,MAAOvC,EAAUwC,SAjC/E,SAACC,GAAD,OAAWX,EAAeW,EAAM7E,OAAO2E,UAgCnD,qBAGkB,2BAAO5C,KAAK,WAAW0C,UAAU,eAAeC,KAAK,YAAYC,MAAOmL,EAAWlL,SAlCxF,SAACC,GAAD,OAAWkL,EAAgBlL,EAAM7E,OAAO2E,UAqCrD,4BAAQF,UAAU,uCAAuC3C,QAAS,SAAC+C,GAAWA,EAAMwK,UAjCzE,SAACjN,EAAU0N,GAE3BzN,IAAMiN,KADHC,8DACc1L,EAAMmM,MAAMC,OAAO3M,MACvC,CAAE,GAAMlB,EACJ,GAAM0N,IACT9K,MAAK,SAACwK,GACHxM,QAAQC,IAAIuM,GACZlL,GAAkB,GAClByK,GAAkB,MACnBxJ,OAAM,SAACkK,GACNR,EAAgBQ,EAAIC,SAASC,MAC7BZ,GAAkB,MAsBiFmB,CAAmB9N,EAAU0N,KAA5H,WAGA,uBAAGtK,KArDHjD,wCAqDkBkC,UAAU,6CAA5B,sBCvDL,SAAS0L,KACpB,IAD8C,EAIjBpM,mBAAS,IAJQ,mBAIvCC,EAJuC,KAIhCC,EAJgC,OAKCF,oBAAS,GALV,mBAKvC+K,EALuC,KAKpBC,EALoB,OAMEhL,oBAAS,GANX,mBAMvCM,EANuC,KAMnBC,EANmB,OAONP,mBAAS,IAPH,mBAOvCiL,EAPuC,KAOzBC,EAPyB,KAS9CC,qBAAU,WACNC,SAASC,MAAQ,oBACjB,IAmBJ,OACI,6BACI,yBAAK3K,UAAU,2CACf,wBAAIA,UAAU,eAAd,oBAESqK,GAAqB,yBAAKrK,UAAU,uBAAuB,UAAYuK,GAEvE3K,GAAsB,yBAAKI,UAAU,mCAAf,yHAErBJ,GACF,8CACO,2BAAOtC,KAAK,OAAO0C,UAAU,eAAeC,KAAK,QAAQC,MAAOX,EAAOY,SA5BrE,SAACC,GAAD,OAAWZ,EAAYY,EAAM7E,OAAO2E,UA8B7C,4BAAQF,UAAU,uCAAuC3C,QAAS,SAAC+C,GAAWA,EAAMwK,UA5BrE,SAACrL,GAErB3B,IAAMiN,KADHC,sDAEN,CAAE,MAASvL,IACVgB,MAAK,SAACwK,GACHxM,QAAQC,IAAIuM,GACZlL,GAAkB,GAClByK,GAAkB,MACnBxJ,OAAM,SAACkK,GACNR,EAAgBQ,EAAIC,SAASC,MAC7BZ,GAAkB,MAkBiFa,CAAuB5L,KAAtH,WAGJ,uBAAGwB,KA5CCjD,wCA4CckC,UAAU,6CAA5B,sB,iEC7C2D9G,EAAQ,KAA9DyS,I,GAAbC,Y,GAAaD,SAASE,G,GAAAA,QAASC,G,GAAAA,SAAUC,G,GAAAA,UAAWC,G,GAAAA,UAEtDC,GAAc,SAAAC,GAClB,OAAOA,EAAOC,QAAQC,OAAOT,GAAQU,GAAG,cAiBpCC,GAAsB,SAACJ,EAAQjM,GAEnC,OAhBoB,SAAAiM,GACpB,IAAMK,EAAWN,GAAYC,GAC7B,IAAKK,EAAU,MAAO,GAEtB,IAAMC,EAAYD,EAASE,YAAYd,GAAQU,GAAG,UAAWP,IAC7D,IAAKU,EAAW,MAAO,GAGvB,IADA,IAAME,EAAS,IAAIC,MAAMH,EAAU/F,QAC1BmG,EAAM,EAAGC,EAAML,EAAU/F,OAAQmG,EAAMC,EAAKD,IACnDF,EAAOE,GAAOJ,EAAUJ,OAAOQ,GAEjC,OAAOF,EAIYI,CAAcZ,GACf9C,MAAK,SAAA2D,GACrB,IAAMC,EAAYD,EAAUlP,IAAI8N,GAAQU,GAAG,MAC3C,QAASW,GAAaA,EAAU9M,QAAUD,MAmBtCgN,GAAc,SAACf,EAAQc,EAAWE,EAAMC,GAC5C,IAAMC,EAAQd,GAAoBJ,EAAQc,GAC1C,IAAKI,EAAO,MAAM,IAAIC,MAAJ,6BAAgCL,KAjB5B,SAEtBD,EAEAG,GAGAH,EAAUO,IAAI3B,GAAQU,GAAG,KAAML,GAAUK,GAAGa,IAC5CH,EAAUO,IAAI3B,GAAQU,GAAG,MAAON,GAAUM,GACxC,OAUFkB,CAAkBH,EAAOF,IAiBd,SAAeM,GAA9B,qC,gDAAe,WAAmCC,EAAOC,GAA1C,oCAAAC,EAAA,sEACUC,MAAM,gGAAgGrN,MAAK,SAAAwK,GAAG,OAAIA,EAAI8C,iBADhI,OAeX,IAdM3B,EADK,OAGMD,GAAYC,GACpBoB,IAAI3B,GAAQU,GAAG,mBAAoBR,GAAQiC,MAGpDb,GAAYf,EAAQ,gBAAiBuB,EAAMhM,eAC3CwL,GAAYf,EAAQ,OAAQuB,EAAM9L,MAClCsL,GAAYf,EAAQ,UAAWuB,EAAM/G,SACrCuG,GAAYf,EAAQ,SAAUuB,EAAMzG,QACpCiG,GAAYf,EAAQ,mBAAoBwB,GACxCT,GAAYf,EAAQ,QAASuB,EAAM/L,OAG1BlG,EAAI,EAAGA,EAAIiS,EAAMtF,UAAUC,YAAa5M,SAGrBhC,KAFpBuU,EACJzB,GAAoBJ,EAAQ,eAAiB1Q,EAAE,MAE3CuS,EAAgBT,IAAI3B,GAAQU,GAAG,KAAMV,GAAQU,GAAG,QAChD0B,EAAgBT,IAAI3B,GAAQU,GAAG,MAAOV,GAAQU,GAAG,SAIzD,IAAS7Q,EAAI,EAAGA,GAAKiS,EAAMtF,UAAUK,YAAahN,SAGtBhC,KAFpBwU,EACJ1B,GAAoBJ,EAAQ,SAAW1Q,EAAE,MAErCwS,EAAgBV,IAAI3B,GAAQU,GAAG,KAAMV,GAAQU,GAAG,QAChD2B,EAAgBV,IAAI3B,GAAQU,GAAG,MAAOV,GAAQU,GAAG,SAIzD,IAAS7Q,EAAI,EAAGA,GAAKiS,EAAMtF,UAAUC,YAAa5M,SAGjBhC,KAFzByU,EACJ3B,GAAoBJ,EAAQ,cAAgB1Q,MAExCyS,EAAqBX,IAAI3B,GAAQU,GAAG,KAAMV,GAAQU,GAAG,QACrD4B,EAAqBX,IAAI3B,GAAQU,GAAG,MAAOV,GAAQU,GAAG,SAI9D,IAASvD,KAAS2E,EAAM/E,oBAEHlP,KADb0U,EAAW5B,GAAoBJ,EAAQpD,EAAM7I,SAE7CiO,EAASZ,IAAI3B,GAAQU,GAAG,KAAMV,GAAQU,GAAG,QACzC6B,EAASZ,IAAI3B,GAAQU,GAAG,MAAOV,GAAQU,GAAG,SA9CvC,OAkDX9N,QAAQC,IAAI,0BAlDD,UAmDY0N,EAAOiC,OAnDnB,QAmDLC,EAnDK,OAqDLC,EAAO,IAAIC,KAAK,CAACF,GAAW,CAAC9Q,KAAM,oBAGzCiR,KAAUC,OAAOH,EAAM,UAxDZ,6C,0BChCTI,G,2MACFhB,MAAQ,CAaJnM,GAAI,GACJG,cAAe,GACfiF,QAAS,GACTM,OAAQ,GACRrF,KAAM,GACND,MAAO,EACPwF,QAAS,EAGTiC,cAAe,GAGfT,eAAgB,GAGhBvH,cAAe,GAGfyF,MAAO,GAGPR,UAAW,GAGX+B,UAAW,CACPC,YAAa,EACbI,YAAa,EACbF,iBAAkB,GAIlBJ,iBAAkB,EAGlBK,iBAAkB,GAClBF,sBAAuB,GAG3B7D,QAAQ,EAGRkK,eAAe,EAGfC,OAAQ,GACRC,QAAS,GACTC,WAAY,GACZC,YAAa,GACbC,MAAO,GACPC,OAAQ,GACRC,OAAQ,GACRC,WAAY,GACZC,WAAY,GACZC,YAAa,GACbC,YAAa,I,EA6DjBC,iBAAmB,SAAC3F,GAAY,IAAD,WAIlB/N,GAJkB,eAKdkN,GAEDlN,IAAQ+N,EAAOb,GAAOoB,MAEtB,EAAKqF,UAAS,SAAAC,GAAS,sBAClB5T,EADkB,sBACR4T,EAAU5T,IADF,CACQ+N,EAAOb,UAL9C,IAAK,IAAIA,KAASa,EAAS,EAAlBb,IADb,IAAK,IAAIlN,KAAO,EAAK6R,MAAQ,EAApB7R,I,EAab6T,mBAAqB,WAGjB,IAAIC,EAAS,EAAKjC,MAEdpM,EAAY,CACZI,cAAeiO,EAAOjO,cACtBuF,OAAQ0I,EAAO1I,OACfrF,KAAM+N,EAAO/N,KACb+E,QAASgJ,EAAOhJ,QAChBhF,MAAOgO,EAAOhO,MACdwF,QAASwI,EAAOxI,QAChBkB,YAAasH,EAAOvH,UAAUC,YAC9BI,YAAakH,EAAOvH,UAAUK,YAC9BF,iBAAkBoH,EAAOvH,UAAUG,iBACnCqB,OAAQ+F,EAAOhH,gBAGnBrK,aAAaC,QAAQ,YAAaqR,KAAKC,UAAUvO,K,EAGrDwO,mBAAqB,WAIjB,IAAIC,EAAwBH,KAAKI,MAAM1R,aAAaI,QAAQ,cAExD0J,EAAY,CACZC,YAAa0H,EAAsB1H,YACnCI,YAAasH,EAAsBtH,YACnCF,iBAAkBwH,EAAsBxH,kBAI5C,EAAKiH,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAGnB/N,cAAeqO,EAAsBrO,cACrCuF,OAAQ8I,EAAsB9I,OAC9BrF,KAAMmO,EAAsBnO,KAC5B+E,QAASoJ,EAAsBpJ,QAC/BhF,MAAOoO,EAAsBpO,MAC7BwF,QAAS4I,EAAsB5I,QAC/BiB,UAAWA,EACXO,eAAgBoH,EAAsBnG,a,EAI9C9I,kBAAoB,SAACf,GAQjB,OAAOlC,IAAM,CACToS,OAAQ,MACRC,IAHMnS,4DAILyC,MAAK,SAACwK,GACH,EAAKwE,UAAS,iBAAM,CAChBpO,cAAc,YAAK4J,EAAIG,aAI9BpK,OAAM,SAACkK,GAEJlL,EAAMW,KAAK,kCAAoCuK,EAAIC,SAASC,KAAKgF,OAAS,IAAMlF,EAAIC,SAASC,KAAKhO,QAAS,CAACwD,QAAS,IAAMpD,KAAM,c,EAKzI0H,cAAgB,SAAC1D,EAAIxB,GASrB,IAAI4P,EAAS,EAAKjC,MAEdpM,EAAY,CACZC,GAAIA,EACJG,cAAeiO,EAAOjO,cACtBuF,OAAQ0I,EAAO1I,OACfrF,KAAM+N,EAAO/N,KACb+E,QAASgJ,EAAOhJ,QAChBhF,MAAOgO,EAAOhO,MACdwF,QAASwI,EAAOxI,QAChBkB,YAAasH,EAAOvH,UAAUC,YAC9BI,YAAakH,EAAOvH,UAAUK,YAC9BF,iBAAkBoH,EAAOvH,UAAUG,iBACnCqB,OAAQ+F,EAAOhH,gBAInB,OAAO9K,IAAM,CACToS,OAAQ,OACRC,IAHMnS,yDAINoN,KAAM7J,IACLd,MAAK,SAACwK,GAGH,EAAKlK,kBAAkBf,GAGvBA,EAAMW,KAAK,kBAAmB,CAACC,QAAS,IAAMpD,KAAM,eACrDwD,OAAM,SAACkK,GAGNlL,EAAMW,KAAK,6BAA+BuK,EAAIC,SAASC,KAAKgF,OAAS,IAAMlF,EAAIC,SAASC,KAAKhO,QAAS,CAACwD,QAAS,IAAMpD,KAAM,c,EAKxI2H,cAAgB,SAAC3D,EAAIxB,GAIjB,OAAOlC,IAAM,CACToS,OAAQ,MACRC,IAHMnS,yDAIN0N,OAAQ,CAAC,GAAKlK,KACbf,MAAK,SAACwK,GAGH,IAAI5C,EAAY,CAACC,YAAa2C,EAAIG,KAAK9C,YACnBE,iBAAkByC,EAAIG,KAAK5C,iBAC/BE,YAAauC,EAAIG,KAAK1C,aAEtC,EAAK+G,UAAS,SAAAC,GAAS,sBAChBA,EADgB,CAGnBlO,GAAKyJ,EAAIG,KAAK5J,GACdG,cAAesJ,EAAIG,KAAKzJ,cACxBE,KAAMoJ,EAAIG,KAAKvJ,KACfqF,OAAQ+D,EAAIG,KAAKlE,OACjBN,QAASqE,EAAIG,KAAKxE,QAClBhF,MAAOqJ,EAAIG,KAAKxJ,MAChBwF,QAAS6D,EAAIG,KAAKhE,QAGlBiB,UAAWA,EAGXO,eAAgBqC,EAAIG,KAAKvB,YACzB,WACA1L,KAAKkS,iCAETrQ,EAAMW,KAAK,mBAAoB,CAACC,QAAS,IAAMpD,KAAM,eAExDwD,OAAM,SAACkK,GAEJlL,EAAMW,KAAK,8BAAgCuK,EAAIC,SAASC,KAAKgF,OAAS,IAAMlF,EAAIC,SAASC,KAAKhO,QAAS,CAACwD,QAAS,IAAMpD,KAAM,c,EAKzI4H,gBAAkB,SAAC5D,EAAIxB,GAEnB,OAAOlC,IAAM,CACToS,OAAQ,SACRC,IAHMnS,yDAIN0N,OAAQ,CAAC,GAAKlK,KACbf,MAAK,SAACwK,GAEH,EAAKlK,kBAAkBf,GACvBA,EAAMW,KAAK,oBAAqB,CAACC,QAAS,IAAMpD,KAAM,eAEzDwD,OAAM,SAACkK,GAEJlL,EAAMW,KAAK,+BAAiCuK,EAAIC,SAASC,KAAKgF,OAAS,IAAMlF,EAAIC,SAASC,KAAKhO,QAAS,CAACwD,QAAS,IAAMpD,KAAM,c,EAK1I8H,YAAc,WAMV,EAAKmK,SAAS,CAAE7G,eAAgB,GAChBP,UANK,CACjBC,YAAa,EACbI,YAAa,EACbF,iBAAkB,KAKtB,EAAKrB,gCACL,EAAK7H,MAAMU,MAAMW,KAAK,eAAgB,CAACC,QAAS,IAAMpD,KAAM,a,EAGhEyI,oBAAsB,SAACC,EAAUoK,GAI7B,EAAKb,SAAL,eAAgBvJ,EAAWoK,IAAc,WACrCnS,KAAKgJ,gCACLhJ,KAAKkS,kC,EAIbA,4BAA8B,WACP,EAAK1C,MAAM/E,eACV,EAAK+E,MAAMmB,QAE/B,OAAQ,EAAKnB,MAAM9L,MACf,IAAK,QACD,EAAK0O,iBAAiB,CAAC,KAC3B,MACA,IAAK,QACD,EAAKA,iBAAiB,CAAC,wBAC3B,MACA,IAAK,cACD,EAAKA,iBAAiB,CAAC,0BAC3B,MACA,IAAK,MACD,EAAKA,iBAAiB,CAAC,oBAC3B,MACA,IAAK,WACD,EAAKA,iBAAiB,CAAC,qBAC3B,MACA,IAAK,aACD,EAAKA,iBAAiB,CAAC,kBAAmB,qBAC9C,MACA,IAAK,kBACD,EAAKA,iBAAiB,CAAC,mBAAoB,qBAC/C,MACA,IAAK,eACD,EAAKA,iBAAiB,CAAC,uB,EAKnCA,iBAAmB,SAACC,GAChB,IAAIC,EAAmB,GACnBC,EAAgB,EAAK/C,MAAMmB,QAFQ,WAY9B6B,GACD,IAAIC,EAAoBF,EAAcpH,MAAK,SAAAN,GAAK,OAAIA,EAAM7I,OAASqQ,EAAmBG,WAE5DjX,IAAtBkX,GACAH,EAAiBI,KAAKD,IAJlC,IAAK,IAAID,KAAgBH,EAAqB,EAArCG,GAST,EAAKlB,UAAS,SAAAC,GAAS,MAAK,CACxBrG,cAAeoH,MAAqB,WAChC,IAAK,IAAIK,KAAQL,EACbtS,KAAK4S,YAAYN,EAAiBK,Q,EASlDE,yBAA2B,WAIvB,OAA4B,IAArB,EAAKrD,MAAM/L,MAAc,EAAwB,EAAnB,EAAK+L,MAAM/L,MAAa,G,EAIjEuF,8BAAgC,WAG5B,IAAI8J,EAA0B,EAAKD,2BAInC,OAFAC,GAA2B,EAAKC,6B,EAKpCA,0BAA4B,WAGxB,IAAIC,EAAQ,EACRtI,EAAe,EAAK8E,MAAM/E,eAC1BwI,EAAkB,EAAKzD,MAAMtF,UAEjC,IAAK,IAAIW,KAASH,EACdsI,GAAStI,EAAaG,GAAOpB,KAOjC,OAJAuJ,GAAUC,EAAgB1I,YAAc,EAAKiF,MAAMlF,iBAC1C2I,EAAgB5I,iBAAmB,EAAKmF,MAAMpF,sBAC9C6I,EAAgB9I,YAAc,EAAKqF,MAAMvF,kB,EAKtDiJ,kBAAoB,SAACrI,GAIjB,IAAIsI,EAAgBtI,EAAMuI,SAG1B,GAAsB,KAAlBD,GAA0C,OAAlBA,EACxB,OAAO,EAIX,IAAIE,EAAU,EAAK7D,MAAM/E,eAEzB,IAAK,IAAI6I,KAAUD,EAEf,GAAIF,EAAcI,SAASF,EAAQC,GAAQtR,MAEvC,OAAO,EAIf,OAAO,G,EAGXsJ,uBAAyB,SAACkI,EAAc3L,GASpC,OARAvH,QAAQC,IAAI,wCAQP,EAAK2S,kBAAkBM,GAOxB3L,EAGI,EAAKmB,gCAAkCwK,EAAa/J,KAAO,GAE3D,EAAKtI,MAAMU,MAAMW,KAAK,2CAA6CgR,EAAaxR,KAAM,CAACS,QAAS,IAAMpD,KAAM,WACrG,KAIN,EAAKoU,iCAAiCD,IAKpC,EAAKE,SAASF,KAKjB,EAAKG,gBAAgBH,IAKlB,EAAKZ,YAAYY,IA9BxB,EAAKrS,MAAMU,MAAMW,KAAK,wCAA0CgR,EAAaxR,KAAM,CAACS,QAAS,IAAMpD,KAAM,WAClG,I,EAiCfoU,iCAAmC,SAAC5I,GAKhC,IAAI+I,EAAiB,EAAKpE,MAAM/E,eAAeuB,QAAO,SAAAnB,GAAK,MAAmB,gBAAfA,EAAMoB,QAMrE,GAAqC,IAHT2H,EAAe5H,QAAO,SAAAnB,GAAK,OAAIA,EAAM7I,KAAKuR,SAAS,QAGrD9V,QAClBoN,EAAM7I,KAAKuR,SAAS,KAEpB,OADA,EAAKpS,MAAMU,MAAMW,KAAK,4DAA6D,CAACC,QAAS,IAAMpD,KAAM,WAClG,EAKf,IAAIwU,EAA0BD,EAAe5H,QAAO,SAAAnB,GAAK,OAAIA,EAAM7I,KAAKuR,SAAS,MAGjF,OAAuC,IAAnCM,EAAwBpW,SAGpBoN,EAAM7I,KAAKuR,SAAS,IAAyC,IAAnCM,EAAwBpW,SAClD,EAAK0D,MAAMU,MAAMW,KAAK,kEAAmE,CAACC,QAAS,IAAMpD,KAAM,WACxG,I,EAQnBsU,gBAAkB,SAAC9I,GAKf,IAAIwI,EAAU,EAAK7D,MAAM/E,eAEzB,IAAK,IAAI6I,KAAUD,EAAS,CAGxB,IAAIS,EAAyBT,EAAQC,GAAQF,SAG7C,GAA+B,KAA3BU,GAA4D,OAA3BA,GAG7BA,EAAuBP,SAAS1I,EAAM7I,MAAO,CAG7C,GAAG8R,EAAuBP,SAAS,KAG/B,IAAK,IAAIQ,KAAWV,EAGhB,GAA+B,KAA3BS,GAA4D,OAA3BA,GAM7BjJ,EAAM7I,OAASqR,EAAQU,GAAS/R,MAAQ8R,EAAuBP,SAASF,EAAQU,GAAS/R,MAEzF,OAAO,EAOnB,OADA,EAAKb,MAAMU,MAAMW,KAAK,iBAAmBqI,EAAM7I,KAAO,8BAAgCqR,EAAQC,GAAQtR,KAAM,CAACS,QAAS,IAAMpD,KAAM,WAC3H,GAMvB,OAAO,G,EAGX+J,YAAc,SAACC,EAAcI,EAAMF,GAG/B,GAAI,EAAKP,gCAAkCS,EAAO,EAE9C,OADA,EAAKtI,MAAMU,MAAMW,KAAK,sCAAuC,CAACnD,KAAK,WAC5D,EAIX,GAAI,EAAKmQ,MAAMtF,UAAUb,IAAiBE,EAElC,OAAO,EAIf,IAAIW,EAAY,EAAKsF,MAAMtF,UAa3B,OARIA,EAAUb,IADK,gBAAfA,EAC2B,EAEA,EAI/B,EAAKiI,SAAS,CAACpH,cAAY,WAAO,EAAKlB,oCAEhC,G,EAGXG,eAAiB,SAACE,GAGd,GAA2C,IAAvC,EAAKmG,MAAMtF,UAAUb,GAErB,OAAO,EAGX,IAAIa,EAAY,EAAKsF,MAAMtF,UAIvBA,EAAUb,IADK,gBAAfA,EAC2B,EAEA,EAG/B,EAAKiI,SAAS,CAACpH,e,EAGnBwJ,SAAW,SAAC7I,GAQR,OALA,EAAKyG,UAAS,SAAAC,GAAS,MAAK,CACxB9G,eAAe,GAAD,mBAAO8G,EAAU9G,gBAAjB,CAAiCI,QAAY,WACvD7K,KAAKgJ,oCAGN,G,EAGX4J,YAAc,SAAC/H,GAWX,OARA,EAAKyG,UAAS,SAAAC,GAAS,MAAK,CAExB9G,eAAgB8G,EAAU9G,eAAeuB,QAAO,SAAAgI,GAAQ,OAAIA,EAAShS,OAAS6I,EAAM7I,YACpF,WACAhC,KAAKgJ,oCAIF,G,EAIX1C,YAAc,WAGV,EAAKnF,MAAMU,MAAMW,KAAK,sBAAwB,EAAKgN,MAAMjJ,OAAS,MAAQ,KAAO,SAEjF,EAAK+K,UAAS,SAAAC,GAAS,MAAK,CAAChL,QAASgL,EAAUhL,WAEhD,EAAKyC,iC,EAGTiL,oBAAsB,WAClB1E,GAAoB,EAAKC,MAAO,EAAKxG,kC,mFA3mBpB,IAAD,OAChByD,SAASC,MAAQ,wCAMbtK,EAAsBnB,mBACtBmB,EAAsB3B,uBAAuBL,aAAaI,QAAQ,eAClER,KAAK4C,kBAAkB5C,KAAKmB,MAAMU,QAItC7B,KAAKsR,SAAS,CAACb,eAAe,IAE9B,IAAI/E,EAAS,GACb/L,IAAMC,IAAIC,uDACLyC,MAAK,SAAAwK,GAEFpB,EAAM,YAAOoB,EAAIG,MAEjB,EAAKoE,iBAAiB3F,GACtB,EAAK4F,SAAU,CAACb,eAAe,IAAS,WACpCzQ,KAAKkS,oCAIjB,IAAI/J,EAAY,GAChBxI,IAAMC,IAAIC,0DACLyC,MAAK,SAAAwK,GAEF3E,EAAS,YAAO2E,EAAIG,MACpB,EAAKqE,SAAS,CAACnJ,UAAWA,OAIlC,IAAIQ,EAAQ,GACZhJ,IAAMC,IAAIC,sDACLyC,MAAK,SAAAwK,GAEFnE,EAAK,YAAOmE,EAAIG,MAEhB,EAAKqE,SAAU,CAAC3I,MAAOA,IAAS,WAC5B3I,KAAKkS,oCAKyB,OAAtC9R,aAAaI,QAAQ,cACrBR,KAAK4R,uB,2CAMT5R,KAAKwR,uB,+BAwjBL,OACI,yBAAKzP,UAAU,OACX,kBAAC,KAAD,KACI,kBAAC,KAAD,KACI,kBAAC,KAAD,CAAOmS,OAAK,EAACC,KAAK,KACd,4BAAQ/U,QAASY,KAAKiU,qBAAtB,YAEA,kBAAC,EAAD,CACI3N,YAAatG,KAAKsG,YAClBa,YAAanH,KAAKmH,YAClBZ,OAAQvG,KAAKwP,MAAMjJ,OACnBQ,cAAe/G,KAAK+G,cACpBC,cAAehH,KAAKgH,cACpBC,gBAAiBjH,KAAKiH,gBACtB/D,cAAelD,KAAKwP,MAAMtM,cAC1BN,kBAAmB5C,KAAK4C,kBAExBwR,OAAQpU,KAAKwP,QAGjB,kBAAC,EAAD,CACI7G,MAAO3I,KAAKwP,MAAM7G,MAClBR,UAAWnI,KAAKwP,MAAMrH,UACtB1E,MAAOzD,KAAKwP,MAAM/L,MAClBD,cAAexD,KAAKwP,MAAMhM,cAC1BiF,QAASzI,KAAKwP,MAAM/G,QACpBM,OAAQ/I,KAAKwP,MAAMzG,OACnBrF,KAAM1D,KAAKwP,MAAM9L,KACjBuF,QAASjJ,KAAKwP,MAAMvG,QACpBnB,oBAAqB9H,KAAK8H,oBAC1BxB,YAAatG,KAAKwP,MAAMjJ,OACxByC,8BAA+BhJ,KAAKgJ,gCAGxC,kBAAC3B,EAAA,EAAD,KACKrH,KAAKwP,MAAMiB,cAAgB,+DAA4C,oCAExE,kBAACzG,EAAD,CACIE,UAAWlK,KAAKwP,MAAMtF,UACtBd,YAAapJ,KAAKoJ,YAClBD,eAAgBnJ,KAAKmJ,eACrB7C,YAAatG,KAAKwP,MAAMjJ,OACxB0D,iBAAkBjK,KAAKwP,MAAMvF,iBAC7BG,sBAAuBpK,KAAKwP,MAAMpF,sBAClCE,iBAAkBtK,KAAKwP,MAAMlF,mBAGjC,kBAACzB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAK/G,UAAU,aAEX,yBAAKA,UAAU,UACX,kBAACwJ,GAAD,CACIK,SAAS,SACTF,OAAQ1L,KAAKwP,MAAMkB,OACnBhG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,UAIhC,yBAAKxE,UAAU,WACX,kBAACwJ,GAAD,CACIK,SAAS,UACTF,OAAQ1L,KAAKwP,MAAMmB,QACnBjG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,UAEhC,yBAAKxE,UAAU,UACX,kBAACwJ,GAAD,CACIK,SAAS,SACTF,OAAQ1L,KAAKwP,MAAMwB,OACnBtG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,UAEhC,yBAAKxE,UAAU,cACX,kBAACwJ,GAAD,CACIK,SAAS,aACTF,OAAQ1L,KAAKwP,MAAMyB,WACnBvG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,WAIpC,kBAACuC,EAAA,EAAD,CAAK/G,UAAU,aAEX,yBAAKA,UAAU,cACP,kBAACwJ,GAAD,CACAK,SAAS,aACTF,OAAQ1L,KAAKwP,MAAMoB,WACnBlG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,UAGhC,yBAAKxE,UAAU,SACP,kBAACwJ,GAAD,CACAK,SAAS,QACTF,OAAQ1L,KAAKwP,MAAMsB,MACnBpG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,UAGhC,yBAAKxE,UAAU,UACX,kBAACwJ,GAAD,CACIK,SAAS,SACTF,OAAQ1L,KAAKwP,MAAMuB,OACnBrG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,WAIpC,kBAACuC,EAAA,EAAD,CAAK/G,UAAU,aAEX,yBAAKA,UAAU,eACX,kBAACwJ,GAAD,CACIK,SAAS,cACTF,OAAQ1L,KAAKwP,MAAMqB,YACnBnG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,UAGhC,yBAAKxE,UAAU,cACX,kBAACwJ,GAAD,CACIK,SAAS,aACTF,OAAQ1L,KAAKwP,MAAM0B,WACnBxG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,UAGhC,yBAAKxE,UAAU,eACX,kBAACwJ,GAAD,CACIK,SAAS,cACTF,OAAQ1L,KAAKwP,MAAM2B,YACnBzG,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,UAGhC,yBAAKxE,UAAU,eACX,kBAACwJ,GAAD,CACIK,SAAS,cACTF,OAAQ1L,KAAKwP,MAAM4B,YACnB1G,aAAc1K,KAAKwP,MAAM/E,eACzBS,cAAelL,KAAKwP,MAAMtE,cAC1BI,uBAAwBtL,KAAKsL,uBAC7BhF,YAAatG,KAAKwP,MAAMjJ,YA/HgC,OAuIhF,kBAAC,KAAD,CAAO4N,KAAK,YAAYD,OAAK,EAACG,UAAWlI,KAEzC,kBAAC,KAAD,CAAOgI,KAAK,UAAUD,OAAK,EAACG,UAAW5G,KAEvC,kBAAC,KAAD,CAAO0G,KAAK,iBAAiBD,OAAK,EAACG,UAAWlH,Y,GAp2BpDnS,IAAMsM,WA42BTgN,iBAAY9D,I,qBCt4BrBtR,GAAU,CAEZqV,SAAUC,IAAUC,WACpBhS,QAAS,IACTiS,OAAQ,OAERC,WAAYC,IAAYC,MAS5BC,iBAAO,mBANM,kBACT,kBAAC,IAAD,eAAeC,SAAUC,MAAmB9V,IACxC,kBAAC,GAAD,SAID,MAAUuN,SAASwI,eAAe,W","file":"static/js/main.931624d2.chunk.js","sourcesContent":["function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\r\n\r\nvar React = _interopDefault(require('react'));\r\n\r\nvar BaseIcon = function BaseIcon(_ref) {\r\n  var color = _ref.color,\r\n      _ref$pushRight = _ref.pushRight,\r\n      pushRight = _ref$pushRight === undefined ? true : _ref$pushRight,\r\n      children = _ref.children;\r\n  return React.createElement(\r\n    'svg',\r\n    {\r\n      xmlns: 'http://www.w3.org/2000/svg',\r\n      width: '24',\r\n      height: '24',\r\n      viewBox: '0 0 24 24',\r\n      fill: 'none',\r\n      stroke: color,\r\n      strokeWidth: '2',\r\n      strokeLinecap: 'round',\r\n      strokeLinejoin: 'round',\r\n      style: { marginRight: pushRight ? '20px' : '0', minWidth: 24 }\r\n    },\r\n    children\r\n  );\r\n};\r\n\r\nvar InfoIcon = function InfoIcon() {\r\n  return React.createElement(\r\n    BaseIcon,\r\n    { color: '#2E9AFE' },\r\n    React.createElement('circle', { cx: '12', cy: '12', r: '10' }),\r\n    React.createElement('line', { x1: '12', y1: '16', x2: '12', y2: '12' }),\r\n    React.createElement('line', { x1: '12', y1: '8', x2: '12', y2: '8' })\r\n  );\r\n};\r\n\r\nvar SuccessIcon = function SuccessIcon() {\r\n  return React.createElement(\r\n    BaseIcon,\r\n    { color: '#31B404' },\r\n    React.createElement('path', { d: 'M22 11.08V12a10 10 0 1 1-5.93-9.14' }),\r\n    React.createElement('polyline', { points: '22 4 12 14.01 9 11.01' })\r\n  );\r\n};\r\n\r\nvar ErrorIcon = function ErrorIcon() {\r\n  return React.createElement(\r\n    BaseIcon,\r\n    { color: '#FF0040' },\r\n    React.createElement('circle', { cx: '12', cy: '12', r: '10' }),\r\n    React.createElement('line', { x1: '12', y1: '8', x2: '12', y2: '12' }),\r\n    React.createElement('line', { x1: '12', y1: '16', x2: '12', y2: '16' })\r\n  );\r\n};\r\n\r\nvar CloseIcon = function CloseIcon() {\r\n  return React.createElement(\r\n    BaseIcon,\r\n    { color: '#FFFFFF', pushRight: false },\r\n    React.createElement('line', { x1: '18', y1: '6', x2: '6', y2: '18' }),\r\n    React.createElement('line', { x1: '6', y1: '6', x2: '18', y2: '18' })\r\n  );\r\n};\r\n\r\nvar _extends = Object.assign || function (target) {\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    var source = arguments[i];\r\n\r\n    for (var key in source) {\r\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\r\n        target[key] = source[key];\r\n      }\r\n    }\r\n  }\r\n\r\n  return target;\r\n};\r\n\r\nvar alertStyle = {\r\n  borderStyle: 'solid',\r\n  borderColor: 'black',\r\n  backgroundColor: '#333',\r\n  color: 'white',\r\n  padding: '10px',\r\n  borderRadius: '1px',\r\n  display: 'flex',\r\n  justifyContent: 'space-between',\r\n  alignItems: 'center',\r\n  boxShadow: '0px 2px 2px 2px rgba(0, 0, 0, 0.03)',\r\n  fontFamily: 'Arial',\r\n  width: '250px',\r\n  boxSizing: 'border-box'\r\n};\r\n\r\nvar buttonStyle = {\r\n  marginLeft: '20px',\r\n  border: 'none',\r\n  backgroundColor: 'transparent',\r\n  cursor: 'pointer',\r\n  color: '#FFFFFF'\r\n};\r\n\r\nvar AlertTemplate = function AlertTemplate(_ref) {\r\n  var message = _ref.message,\r\n      options = _ref.options,\r\n      style = _ref.style,\r\n      close = _ref.close;\r\n\r\n  return React.createElement(\r\n    'div',\r\n    { onClick: close, style: _extends({}, alertStyle, style) },\r\n    options.type === 'info' && React.createElement(InfoIcon, null),\r\n    options.type === 'success' && React.createElement(SuccessIcon, null),\r\n    options.type === 'error' && React.createElement(ErrorIcon, null),\r\n    React.createElement(\r\n      'span',\r\n      { style: { flex: 2, whiteSpace: 'initial', textAlign: 'center' } },\r\n      message\r\n    ),\r\n    React.createElement(\r\n      'button',\r\n      { style: buttonStyle },\r\n      React.createElement(CloseIcon, null)\r\n    )\r\n  );\r\n};\r\n\r\nmodule.exports = AlertTemplate;\r\n","import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_DOMAIN\r\n\r\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\r\n\r\nclass AuthenticationService {\r\n\r\n    executeBasicAuthenticationService(username, password) {\r\n        \r\n        return axios.get(`${API_URL}/auth`,\r\n            { headers: { authorization: this.createBasicAuthToken(username, password) } })\r\n    }\r\n\r\n    createBasicAuthToken(username, password) {\r\n        let basicAuth = 'Basic ' + window.btoa(username + \":\" + password)\r\n\r\n        return basicAuth\r\n    }\r\n\r\n    registerSuccessfulLogin(username, password) {\r\n\r\n        localStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\r\n        console.log(\"you are now logged in as: \")\r\n        console.log(localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME))\r\n        console.log(\"\\n\\n\\n\\n\\n\")\r\n        localStorage.setItem(\"USER_TOKEN\", this.createBasicAuthToken(username, password))\r\n        this.setupAxiosInterceptors(localStorage.getItem(\"USER_TOKEN\"))\r\n    }\r\n\r\n    logout() {\r\n        localStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        let user = localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return false\r\n        return true\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        let user = localStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\r\n        if (user === null) return ''\r\n        return user\r\n    }\r\n\r\n    setupAxiosInterceptors(token) {\r\n        axios.interceptors.request.use(\r\n            (config) => {\r\n                if (this.isUserLoggedIn()) {\r\n                    config.headers.authorization = token\r\n                }\r\n                return config\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()\r\n","import React, { useState } from 'react';\r\nimport AuthenticationService from '../services/AuthenticationService';\r\nimport { useAlert } from 'react-alert';\r\n\r\nfunction LoginComponent(props) {\r\n    const APP_URL = process.env.REACT_APP_DOMAIN\r\n\r\n    const [email, updateEmail] = useState('');\r\n    const [password, updatePassword] = useState('');\r\n    const [hasLoginFailed, setLoginFailed] = useState(false);\r\n    const [showSuccessMessage, setSuccessMessage] = useState(false);\r\n    const alert = useAlert();\r\n\r\n    const loginClicked = () => {\r\n        ///console.log(\"\\n\\n\\n\\n\\n\")\r\n        //console.log(\"attempting to login\")\r\n        //console.log(\"\\n\\n\\n\\n\\n\")\r\n\r\n        AuthenticationService\r\n            .executeBasicAuthenticationService(email, password)\r\n            .then(() => {\r\n                AuthenticationService.registerSuccessfulLogin(email, password)\r\n                alert.show(\"Login Successful\", {type:'success', timeout: 5000})\r\n                // this.props.history.push(`/courses`)\r\n\r\n                props.toggleModal();\r\n                props.getUserLoggedInProp(AuthenticationService.isUserLoggedIn());\r\n                props.loadCharacterList(alert);\r\n\r\n            }).catch(() => {\r\n                setSuccessMessage(false);\r\n                setLoginFailed(true);\r\n                //console.log(\"Login Failed. Likely invalid credentials (401)\")\r\n                //console.log(\"\\n\\n\\n\\n\\n\")\r\n            })\r\n    }\r\n\r\n    const eventUpdateEmail = (event) => updateEmail(event.target.value);\r\n    const eventUpdatePassword = (event) => updatePassword(event.target.value);\r\n\r\n    return (\r\n        <div>\r\n        {!props.isUserLoggedIn &&\r\n                <div className=\"container form-group d-flex flex-column\">\r\n                    <h1 className=\"text-center\">Login</h1>\r\n\r\n                    {hasLoginFailed && <div className=\"alert alert-warning\">Invalid Credentials</div>}\r\n\r\n                    {showSuccessMessage && <div className=\"alert alert-success text-center\">Login Successful</div>}\r\n\r\n                    Email: <input type=\"text\" className=\"form-control\" name=\"email\" value={email} onChange={eventUpdateEmail}/>\r\n\r\n                    Password: <input type=\"password\" className=\"form-control\" name=\"password\" value={password} onChange={eventUpdatePassword}/>\r\n\r\n                    <button className=\"btn btn-lg btn-success p-1 mt-3 mb-2\" onClick={loginClicked}>Login</button>\r\n                    <div>\r\n                        <a href={APP_URL + '/#/register'} className=\"btn btn-outline-secondary text-center\">Create account</a>\r\n                        <a href={APP_URL + '/#/forgot'} className=\"btn btn-outline-secondary text-center\">Forgot your password?</a>\r\n                        \r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginComponent","import React from 'react';\r\nimport AuthenticationService from '../services/AuthenticationService'\r\nimport { useAlert } from 'react-alert';\r\n\r\nexport default function LogoutComponent(props) {\r\n    const alert = useAlert();\r\n\r\n    const logout = () => {\r\n        AuthenticationService.logout()\r\n        alert.show('Logout Successful', {type:'success', timeout:5000})\r\n        props.getUserLoggedInProp(AuthenticationService.isUserLoggedIn())\r\n    }\r\n\r\n    return (\r\n        <div>\r\n                <button className=\"btn btn-danger\" onClick={logout}>Logout</button> \r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function NavCharacterList(props) {\r\n    // return a div map of all users characters by id\r\n    // on click, handleMethod, message, and characterId is passed to our confirmationModal\r\n    // to have the user confirm before losing/overwriting data\r\n    \r\n    return props.characterList.map((character) => {\r\n            \r\n            return <div className=\"character-list-slot btn-success btn-sm\"\r\n\r\n            id={character.id} \r\n\r\n            onClick={() => \r\n                {props.setCurrentConfirmationModal(\r\n                    // pass handle method (save/load/delete)\r\n                    props.handleCharacter, \r\n                    // pass related save/load/delete message with character name\r\n                    (props.message + character.characterName + \")\"), \r\n                    // pass character id if user confirms choice\r\n                    character.id)}}>\r\n\r\n                    {/* displayed as \"Charactername. level race */}\r\n                    {character.characterName}.&nbsp;<br />Level&nbsp;{character.level}&nbsp;{character.race}\r\n                \r\n            </div>\r\n        });\r\n}\r\n","import React from 'react'\r\nimport { Modal, ModalBody, ModalFooter, Button } from 'reactstrap'\r\n\r\nexport default function ConfirmationModal(props) {\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Modal isOpen={props.confirmationModalIsOpen} toggle={props.toggleConfirmationModalIsOpen}>\r\n                <ModalBody>\r\n                    {props.message}\r\n                </ModalBody>\r\n                <ModalFooter>\r\n                    <Button className=\" m-auto w-50 \" color=\"secondary\" onClick={props.toggleConfirmationModalIsOpen}>Cancel</Button>\r\n                    <Button className=\" m-auto w-50 \" color=\"success\" onClick={() => {props.handleCharacter(props.id, props.alert);props.toggleConfirmationModalIsOpen()}}>Confirm</Button>\r\n                </ModalFooter>\r\n            </Modal>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport LoginComponent from '../user_management/components/LoginComponent';\r\nimport LogoutComponent from '../user_management/components/LogoutComponent';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  Nav,\r\n  NavItem,\r\n  NavLink,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  DropdownMenu,\r\n  Modal,\r\n  ModalHeader,\r\n  ModalBody,\r\n  ModalFooter,\r\n  Button,\r\n    // NavbarText\r\n} from 'reactstrap';\r\nimport { animated } from 'react-spring';\r\nimport { Transition } from 'react-spring/renderprops';\r\nimport AuthenticationService from '../user_management/services/AuthenticationService';\r\nimport NavCharacterList from '../user_management/components/NavCharacterList';\r\nimport ConfirmationModal from '../user_management/components/ConfirmationModal';\r\nimport { useAlert } from 'react-alert';\r\n\r\n// Navigation is the house for our character / user management\r\n\r\nfunction Navigation(props) {\r\n  const [navbarIsOpen, setNavbarIsOpen] = useState(false);\r\n  const [loginModalIsOpen, setLoginModalIsOpen] = useState(false);\r\n  const [skillResetModalIsOpen, setSkillResetModalIsOpen] = useState(false);\r\n  const [confirmationModalIsOpen, setConfirmationModalIsOpen] = useState(false);\r\n\r\n  // alert popup system\r\n  const alert = useAlert();\r\n\r\n  // log state test button\r\n  // const logs = () => {console.log(props.staate)}\r\n\r\n  // navbar collapse/expand\r\n  const toggleNavbar = () => setNavbarIsOpen(!navbarIsOpen);\r\n\r\n  // login modal\r\n  const toggleLoginModal = () => setLoginModalIsOpen(isUserLoggedIn ? false : !loginModalIsOpen);\r\n\r\n  // skill reset modal\r\n  const toggleSkillResetModalIsOpen = () => {\r\n    setSkillResetModalIsOpen(!skillResetModalIsOpen)};\r\n\r\n  // confirmation modal\r\n  // the confirmationModal is setup to handle Save/Load/Delete based on the user \r\n  // clicking a character in one of our NavCharacterLists\r\n  const toggleConfirmationModalIsOpen = () => {\r\n    setConfirmationModalIsOpen(!confirmationModalIsOpen)};\r\n    \r\n    // handleMethod is Save/Load/Delete character, set by whichever list option is clicked\r\n    const [handleMethod, setHandleMethod] = useState(\"\");\r\n    // message is added to confirmationModal as \"are you sure you want to save/load/delete?\" similarly to the handleMethod\r\n    const [message, setMessage] = useState(\"\");\r\n    // id is added to confirmationModal, \r\n    const [id, setId] = useState(null);\r\n\r\n  // when the user clicks to save/load/delete a character,\r\n  // a confirmationModal is setup with the following args\r\n  // and then displayed to make sure the user meant to take that action \r\n  const setCurrentConfirmationModal = (handleMethod, message, id) => {\r\n    setHandleMethod(() => handleMethod);\r\n    setMessage(message);\r\n    setId(id);\r\n    toggleConfirmationModalIsOpen();\r\n  }\r\n\r\n  // local state isUserLoggedIn is a little clunky, but updating local State makes rendering changes\r\n  // to the buttons and lists easier\r\n  const [isUserLoggedIn, setUserLoggedIn] = useState(AuthenticationService.isUserLoggedIn());\r\n  const getUserLoggedInProp = (boolean) => {\r\n    setUserLoggedIn(boolean);\r\n  }\r\n\r\n  // using react-spring render-props API to make an animation transition\r\n  // this will hide the character list features when user is not logged in\r\n  const hideWhenNotLoggedInWrap = (content) => {\r\n      // Transition object controls opacity animation.\r\n      // Used to show/hide content on login/logout\r\n    return <div className=\"align-items-center d-flex\"><Transition\r\n        items={isUserLoggedIn}\r\n        from={{ opacity: 0 }}\r\n        enter={{ opacity: 1 }}\r\n        leave={{ opacity: 0 }}>\r\n        {isUserLoggedIn => isUserLoggedIn && ((transitionProps) => <animated.div style={transitionProps}> \r\n            \r\n            {/* below content arg is whatever element we want to show when user logs in */}\r\n            {content}\r\n\r\n    </animated.div>)}</Transition></div>\r\n  }\r\n\r\n  return (\r\n    <div>\r\n        <Navbar className=\"navbar navbar-dark\" light expand=\"md\">\r\n        <NavbarToggler onClick={toggleNavbar} />\r\n\r\n        <Collapse isOpen={navbarIsOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n\r\n            <NavItem className=\"align-items-center d-flex\">\r\n              <NavLink href=\"http://kingdomsofnovitas.net/\">kingdomsofnovitas.net</NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem className=\"align-items-center d-flex\">\r\n              <NavLink href=\"https://www.facebook.com/groups/KingdomsOfNovitas/\">Facebook</NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n                <NavLink>\r\n                     <button className=\"navButton\" onClick={toggleSkillResetModalIsOpen} >Reset Skills</button>\r\n                </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem>\r\n                <NavLink>\r\n                     <button className=\"navButton\" onClick={props.lockChanges} >{props.locked ? \"Unl\" : \"L\"}ock Editing</button>\r\n                </NavLink>\r\n            </NavItem>\r\n\r\n            <NavItem className=\"align-items-center d-flex\">\r\n                { isUserLoggedIn && <LogoutComponent getUserLoggedInProp={getUserLoggedInProp} /> }\r\n\r\n                { !isUserLoggedIn &&<Button color=\"success\" onClick={toggleLoginModal}>Login</Button>}\r\n            </NavItem>\r\n\r\n            {hideWhenNotLoggedInWrap(\r\n                <NavItem>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                    Save\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                    <NavCharacterList characterList={props.characterList} handleCharacter={props.saveCharacter} setCurrentConfirmationModal={setCurrentConfirmationModal} message={\"Are you sure you want to save this character? (Character in slot: \"}/>\r\n                    <div className=\"character-list-slot btn-success btn-sm\" onClick={()=>{setCurrentConfirmationModal(props.saveCharacter, \"Are you sure you want to save a new character?\")}}>New Character</div>\r\n                </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n            </NavItem>\r\n            )}\r\n            {hideWhenNotLoggedInWrap(\r\n            <NavItem>\r\n                <UncontrolledDropdown nav inNavbar>\r\n                <DropdownToggle nav caret>\r\n                    Load\r\n                </DropdownToggle>\r\n                <DropdownMenu right>\r\n                    <NavCharacterList characterList={props.characterList} handleCharacter={props.loadCharacter} setCurrentConfirmationModal={setCurrentConfirmationModal} message={\"Are you sure you want to load this character? (Character: \"}/>\r\n                </DropdownMenu>\r\n                </UncontrolledDropdown>\r\n            </NavItem>\r\n            )}\r\n            {hideWhenNotLoggedInWrap(\r\n            <NavItem>\r\n                    <UncontrolledDropdown nav inNavbar>\r\n                    <DropdownToggle nav caret>\r\n                        Delete\r\n                    </DropdownToggle>\r\n                    <DropdownMenu right>\r\n                        <NavCharacterList characterList={props.characterList} handleCharacter={props.deleteCharacter} setCurrentConfirmationModal={setCurrentConfirmationModal} message={\"Are you sure you want to load this character? (Character: \"}/>\r\n                    </DropdownMenu>\r\n                    </UncontrolledDropdown>\r\n            </NavItem>\r\n            )}\r\n          </Nav>\r\n        </Collapse>\r\n                \r\n                {/* // login modal */}\r\n                <Modal isOpen={loginModalIsOpen} toggle={toggleLoginModal}>\r\n                    <ModalHeader toggle={toggleLoginModal}>Login</ModalHeader>\r\n                    <ModalBody>\r\n                        <LoginComponent isUserLoggedIn={isUserLoggedIn} getUserLoggedInProp={getUserLoggedInProp} toggleModal={toggleLoginModal} loadCharacterList={props.loadCharacterList}/>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                            <Button className=\" m-auto w-50 \" color=\"secondary\" onClick={toggleLoginModal}>Cancel</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                {/* confirm skill reset modal */}\r\n                <Modal isOpen={skillResetModalIsOpen} toggle={toggleSkillResetModalIsOpen}>\r\n                    <ModalBody>\r\n                        <div>Are you sure you want to reset your skills? (Unsaved changes will be lost)</div>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button className=\" m-auto w-50 \" color=\"secondary\" onClick={props.toggleConfirmationModalIsOpen}>Cancel</Button>\r\n                        <Button className=\" m-auto w-50 \" color=\"success\" onClick={() => {props.resetSkills(); toggleSkillResetModalIsOpen();}}>Reset Skills</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n\r\n                {/* confirm save/load/delete modal */}\r\n                <ConfirmationModal confirmationModalIsOpen={confirmationModalIsOpen}\r\n                toggleConfirmationModalIsOpen={toggleConfirmationModalIsOpen}\r\n                handleCharacter={handleMethod} message={message} id={id} alert={alert} />\r\n               \r\n        </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport {Container} from 'reactstrap';\r\n\r\n// Header contains our title and the Navigation bar\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Container>\r\n                    <div className=\"header-title\">\r\n                        <h1>KINGDOMS OF NOVITAS</h1>\r\n                        <h2>Online Character Sheet | Skill Calculator</h2>\r\n                    </div>\r\n                    <Navigation \r\n                        lockChanges={this.props.lockChanges} \r\n                        resetSkills={this.props.resetSkills}\r\n                        locked={this.props.locked} \r\n                        saveCharacter={this.props.saveCharacter} \r\n                        loadCharacter={this.props.loadCharacter} \r\n                        deleteCharacter={this.props.deleteCharacter} \r\n                        characterList={this.props.characterList} \r\n                        loadCharacterList={this.props.loadCharacterList}\r\n                        // passed to button for testing\r\n                        // staate={this.props.staate}\r\n                        />\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// Nav.propTypes = {\r\n//     lockChanges: PropTypes.func.isRequired\r\n// }\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nfunction CharacterInfoInput(props) {\r\n    // the display for character info where the input should be text\r\n    return (\r\n        <div>\r\n            {props.displayName}:<br />&nbsp;\r\n        <input type=\"text\" \r\n            placeholder={props.placeholder} \r\n            maxLength={props.maxLength} \r\n            value={props.infoValue} \r\n            disabled={props.lockChanges} \r\n            onChange = {e => {\r\n                props.characterInfoChange(props.infoName, e.target.value)}}/>\r\n        </div>\r\n);\r\n\r\n}\r\n\r\nexport default CharacterInfoInput;","import React, { useState } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nexport default function CharacterInfoDropdownCountries(props) {\r\n    // the display for character info where the input should be a drop down\r\n    \r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    // countries placeholder\r\n    const countries = props.countries\r\n\r\n    const optionsMap = (countries === undefined ? <div>Loading countries...</div> : countries.map(i => ( <DropdownItem className=\"info-dropdown-item\" onClick={(e) => {props.characterInfoChange(\"country\", i.name)}}>{i.name}</DropdownItem> )))\r\n\r\n    const toggle = () => setDropdownOpen(dropdownOpen => !dropdownOpen);\r\n\r\n    return (\r\n        <div>Country:\r\n            <Dropdown isOpen={dropdownOpen} toggle={toggle} setActiveFromChild={true} size=\"md\">\r\n                <DropdownToggle caret className=\"navButton p-0 pl-2\">\r\n                    <span className={(props.country === \"\" ? \"\" : \"mock-input-dropdown\")}>\r\n                    {(props.country === \"\" ? \"Select a country\" : props.country)}\r\n                    </span>\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {optionsMap}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react';\r\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\r\n\r\nexport default function CharacterInfoDropdownRaces(props) {\r\n    // the display for character info where the input should be a drop down\r\n    \r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n\r\n    // races placeholder\r\n    const races = props.races\r\n\r\n    const optionsMap = (races === undefined ? <div>Loading races...</div> : races.map(i => ( <DropdownItem className=\"info-dropdown-item\" onClick={(e) => {props.characterInfoChange(\"race\", i.name)}}>{i.name}</DropdownItem> )))\r\n\r\n    const toggle = () => setDropdownOpen(dropdownOpen => !dropdownOpen);\r\n\r\n    return (\r\n        <div>Race:\r\n            <Dropdown isOpen={dropdownOpen} toggle={toggle} setActiveFromChild={true} size=\"md\">\r\n                <DropdownToggle caret className=\"navButton p-0 pl-2\">\r\n                    <span className={(props.race === \"\" ? \"\" : \"mock-input-dropdown\")}>\r\n                    {(props.race === \"\" ? \"Select a race\" : props.race)}</span>\r\n                </DropdownToggle>\r\n                <DropdownMenu>\r\n                    {optionsMap}\r\n                </DropdownMenu>\r\n            </Dropdown>\r\n        </div>\r\n    )\r\n}\r\n","import React, {Component} from 'react';\r\nimport { Container, Row, Col, } from 'reactstrap';\r\nimport CharacterInfoInput from './CharacterInfoInput';\r\nimport CharacterInfoDropdownCountries from './CharacterInfoDropdownCountries';\r\nimport CharacterInfoDropdownRaces from './CharacterInfoDropdownRaces';\r\n\r\nexport class CharacterInfo extends Component {\r\n    \r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Container>\r\n                        <Row>\r\n                            <Col>\r\n                                <div className=\"characterinfo-box\">\r\n                                <div className=\"characterinfo-content\">\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <CharacterInfoInput \r\n                                                className=\"inputbox\"\r\n                                                displayName=\"Character Name\"\r\n                                                infoName=\"characterName\" \r\n                                                infoValue={this.props.characterName}\r\n                                                maxLength=\"33\"\r\n                                                placeholder=\"Enter a Character Name\"\r\n                                                characterInfoChange={this.props.characterInfoChange}\r\n                                                lockChanges={this.props.lockChanges}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                                <CharacterInfoDropdownRaces \r\n                                                    characterInfoChange={this.props.characterInfoChange}\r\n                                                    race={this.props.race}\r\n                                                    races={this.props.races} />\r\n                                        </Col>\r\n\r\n                                        <Col>\r\n                                            <CharacterInfoDropdownCountries \r\n                                                characterInfoChange={this.props.characterInfoChange}\r\n                                                country={this.props.country}\r\n                                                countries={this.props.countries} />\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <CharacterInfoInput \r\n                                            className=\"inputbox\"\r\n                                            displayName=\"Player\"\r\n                                            infoName=\"player\" \r\n                                            infoValue={this.props.player}\r\n                                            maxLength=\"33\"\r\n                                            placeholder=\"Enter a player name\"\r\n                                            characterInfoChange={this.props.characterInfoChange}/>\r\n                                        </Col>\r\n                                        \r\n                                        <Col>\r\n                                            <CharacterInfoInput \r\n                                            className=\"inputbox\"\r\n                                            displayName=\"Level\"\r\n                                            infoName=\"level\" \r\n                                            infoValue={this.props.level}\r\n                                            maxLength=\"3\"\r\n                                            placeholder=\"1\"\r\n                                            characterInfoChange={this.props.characterInfoChange}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                            <div className=\"skillpointsremaining\">Skill Points Remaining: <div className=\"mock-input\">&nbsp;&nbsp;{this.props.calculateSkillPointsRemaining()}</div></div>\r\n                                        </Col>\r\n                                        \r\n                                        <Col>\r\n                                            <CharacterInfoInput \r\n                                                className=\"inputbox\"\r\n                                                displayName=\"Saved XP\"\r\n                                                infoName=\"savedXp\" \r\n                                                infoValue={this.props.savedXp}\r\n                                                maxLength=\"3\"\r\n                                                placeholder=\"0\"\r\n                                                characterInfoChange={this.props.characterInfoChange}/>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CharacterInfo","import React from 'react';\r\nimport {Row} from 'reactstrap';\r\nimport { useSpring, animated } from 'react-spring';\r\n\r\nexport default function Resource(props) {\r\n    // simplify prop drilling\r\n    const { removeResource, addResource, lockChanges } = props.props;\r\n    const { resourceName, resource, max, skillCss, cost, displayName } = props;\r\n    \r\n    // Resource bar step\r\n    const step = () => {\r\n        if (max === 20) {\r\n            return 5;\r\n        }\r\n        return 10;\r\n    }\r\n\r\n    // calculated width % string, send to Filler\r\n    const fillBarAnim = useSpring({ width: resource ? resource * step() + '%' : 0 + '%' })\r\n\r\n    // Resource ProgressBar\r\n    const ResourceBar = () => {\r\n        return (\r\n            <div className=\"progress-bar\">\r\n                <div className=\"bar-text\">{displayName}: {resource} / {max}</div>\r\n                <Filler />\r\n            </div>\r\n            )\r\n    }\r\n      \r\n    // ANIMATION CALL ON CLICKING TOO FAST LEAKING MEMORY?\r\n    const Filler = () => {\r\n        return <animated.div className={\"filler \" + skillCss} style={fillBarAnim} />\r\n    }\r\n\r\n    const isLoaded = (resource) => {\r\n        // if the props aren't loaded and they come back as undefined,\r\n        // render the component as \"Loading...\"\r\n        return (resource === undefined) ? <div>Loading...</div> : \r\n\r\n            <Row className=\"d-flex flex-nowrap justify-content-center rscrow\">\r\n\r\n            <button type=\"button\" className=\"btn btn-danger btn-sm rscbtn\" disabled={lockChanges} onClick={() => {\r\n                removeResource(resourceName)\r\n            }}>\r\n\r\n                -\r\n\r\n            </button>\r\n            \r\n            <ResourceBar />\r\n\r\n            <button type=\"button\" className=\"btn btn-success btn-sm rscbtn\" disabled={lockChanges} onClick={() => {\r\n                addResource(resourceName, cost, max)\r\n            }} >\r\n                \r\n                +\r\n                \r\n            </button>\r\n\r\n            <div className=\"resource-cost\">{cost * props.pointsGrantedPerSkillPoint}</div>\r\n\r\n            </Row>\r\n\r\n\r\n            };\r\n\r\n    return isLoaded(resource);\r\n}\r\n","import React from 'react'\r\nimport Resource from './Resource';\r\n// import Skilltree from '../skill_trees/SkillTree'\r\n// import PropTypes from 'prop-types';\r\n\r\nexport default function Resources(props) {\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"resourcebox\">\r\n\r\n\r\n                {/* With resources, the cost is set locally and not in the database, unlike skills. */}\r\n\r\n                    <h3 className=\"resources\">Resources</h3>\r\n                    {/* Magic Power */}\r\n                    <Resource props={props} \r\n                                displayName={\"Magic Power\"} \r\n                                cost={props.MAGIC_POINT_COST} \r\n                                max={20}\r\n                                pointsGrantedPerSkillPoint={\"1\"}\r\n                                \r\n                                resourceName={\"magicPoints\"}\r\n\r\n                                resource={props.resources.magicPoints}\r\n                                skillCss={\"magic\"}\r\n                    />\r\n                    \r\n                    {/* Production */}\r\n                    <Resource props={props} \r\n                                displayName={\"Production\"} \r\n                                cost={props.PRODUCTION_POINT_COST} \r\n                                max={20} \r\n                                pointsGrantedPerSkillPoint={\"2\"}\r\n\r\n                                resourceName={\"productionPoints\"}\r\n\r\n                                resource={props.resources.productionPoints}\r\n                                skillCss={\"production\"}\r\n                    />\r\n\r\n                    {/* Craft */}\r\n                    <Resource props={props}\r\n                                displayName={\"Craft\"} \r\n                                cost={props.CRAFT_POINT_COST} \r\n                                max={20}\r\n                                pointsGrantedPerSkillPoint={\"2\"} \r\n\r\n                                resourceName={\"craftPoints\"}\r\n\r\n                                resource={props.resources.craftPoints}\r\n                                skillCss={\"craft\"}\r\n                    />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nfunction Skill(props){\r\n\r\n    // local management. re-enable if skill checking is bugged,\r\n    // as well as lines 44 & 47\r\n    //const [isChecked, setIsChecked] = useState(false);\r\n\r\n    const playerHasSkill = (playerSkills) => { \r\n        // if state.playerskills are undefined, return false\r\n        return (playerSkills === undefined) ?\r\n            false : compareIds(playerSkills)\r\n    }\r\n    \r\n    // search playerskills for a match\r\n    const compareIds = (playerSkills) => {\r\n\r\n        return playerSkills.some(skill => skill.id === props.skill.id);\r\n\r\n    }\r\n\r\n   const addSpaces = (string) => {\r\n           if (props.skill.tier === 2) {\r\n                return '  ';\r\n           } else if (props.skill.tier === 3) {\r\n                return '    ';\r\n           } else if (props.skill.tier === 4) {\r\n                return '      ';\r\n           } else if (props.skill.tier === 5) {\r\n                return '        ';\r\n           }\r\n   }\r\n\r\n   const checkedStyle = playerHasSkill(props.playerSkills) ? \" checked\" : \"\";\r\n\r\n   // check if this skill was located in the free language array\r\n   if (props.freeLanguages[0] !== undefined){\r\n        if (props.freeLanguages.find(foundSkill => foundSkill.name === props.skill.name)) {\r\n            return <div className={\"skill row d-flex flex-nowrap checked\"}>\r\n                        <div className={\"skillBody col pl-1 checked\"}>\r\n                            <p>\r\n                            <input disabled={true} type=\"checkbox\" checked={true} /> \r\n                                {' '} {addSpaces(props.skill.name)}\r\n                                {props.skill.name}\r\n                            </p>\r\n                            </div>\r\n                        <div className=\"skillCost d-inline-flex flex-nowrap pr-1\">{props.skill.cost}</div>\r\n                    </div>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={\"skill row d-flex flex-nowrap \" + checkedStyle}>\r\n            <div className={\"skillBody col pl-1\" + checkedStyle}>\r\n                <p>\r\n                <input disabled={props.lockChanges} type=\"checkbox\" checked={playerHasSkill(props.playerSkills)} \r\n                \r\n                    onChange={e => {\r\n\r\n                        //(setIsChecked(\r\n                            props.playerCheckedASkillBox(props.skill, e.target.checked)\r\n                        ;\r\n                        //);\r\n                }}/> \r\n                    {' '} {addSpaces(props.skill.name)}\r\n                    {props.skill.name}\r\n                </p>\r\n                </div>\r\n            <div className=\"skillCost d-inline-flex flex-nowrap pr-1\">{props.skill.cost}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Skill\r\n","import React, { Component, useState } from 'react'\r\nimport { Collapse, Button } from 'reactstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faChevronDown, faChevronUp, faCheck } from '@fortawesome/free-solid-svg-icons'\r\nimport Skill from './Skill';\r\n\r\nexport default function SkillTree(props){\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const toggle = () => setIsOpen(!isOpen);\r\n    const numOfSkillsInTree = props.skills.length;\r\n\r\n    // add free languages to skills in tree calculation if the tree is general\r\n    var freeLangsNum = 0;\r\n    if (props.treeName === \"General\"){\r\n        freeLangsNum = props.freeLanguages.length;\r\n    }\r\n\r\n    // search playerskills for matching tree to this props.tree(toLowerCase, since it's used for display without it)\r\n    const numOfPlayerSkillsInTree = () => {\r\n        let playerTreeSkills = props.playerSkills.filter(skill => skill.tree === props.treeName.toLowerCase()).length\r\n        return playerTreeSkills\r\n    }\r\n\r\n    const skills = props.skills.map((skill) => (\r\n            <Skill key={skill.id} skill={skill} playerCheckedASkillBox={props.playerCheckedASkillBox} lockChanges={props.lockChanges} playerSkills={props.playerSkills} freeLanguages={props.freeLanguages} />\r\n        ))\r\n\r\n    return (\r\n        <div>\r\n                <h3><button className=\"btn-sm btn-dark float-left\" onClick={toggle}><FontAwesomeIcon icon={isOpen ? faChevronUp : faChevronDown} /></button>\r\n\r\n                {props.treeName} {numOfPlayerSkillsInTree() + freeLangsNum} / {numOfSkillsInTree}\r\n\r\n                <button className=\"btn-sm btn-dark float-right\" onClick={toggle}><FontAwesomeIcon icon={isOpen ? faChevronUp : faChevronDown} /></button></h3>\r\n            <Collapse isOpen={isOpen}>\r\n                {skills}\r\n            </Collapse>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default function RegisterNewUserComponent() {\r\n    const API_URL = process.env.REACT_APP_API_DOMAIN\r\n    const APP_URL = process.env.REACT_APP_DOMAIN\r\n\r\n    const [email, updateEmail] = useState('');\r\n    const [hasRegisterFailed, setRegisterFailed] = useState(false);\r\n    const [showSuccessMessage, setSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        document.title = \"Register Account\"\r\n     }, []);\r\n\r\n    const eventUpdateEmail = (event) => updateEmail(event.target.value);\r\n\r\n    const requestRegisterNewUser = (email) => {\r\n        let url = API_URL + '/register'\r\n        return axios.post(url,\r\n            { \"email\": email })\r\n            .then((res) => {\r\n                console.log(res)\r\n                setSuccessMessage(true)\r\n                setRegisterFailed(false)\r\n            }).catch((err) => {\r\n                setErrorMessage(err.response.data)\r\n                setRegisterFailed(true)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container form-group d-flex flex-column\">\r\n                <h1 className=\"text-center\">Register New User</h1>\r\n\r\n                    {hasRegisterFailed && <div className=\"alert alert-warning\">{\"Error: \" + errorMessage}</div>}\r\n\r\n                    {showSuccessMessage && <div className=\"alert alert-success text-center\">Registration Successful. A confirmation email has been sent to the provided email address. Please click the activation link in the email to continue</div>}\r\n\r\n                    {!showSuccessMessage &&\r\n                    <>\r\n                    Email: <input type=\"text\" className=\"form-control\" name=\"email\" value={email} onChange={eventUpdateEmail}/>\r\n\r\n                    <button className=\"btn btn-lg btn-success p-1 mt-3 mb-2\" onClick={(event) => {event.persist(); requestRegisterNewUser(email);}}>Register</button>\r\n                    </>\r\n                    }\r\n                    <a href={APP_URL} className=\"text-center m-auto w-50 btn btn-secondary\">Back to homepage</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default function NewPasswordComponent(props) {\r\n    const API_URL = process.env.REACT_APP_API_DOMAIN\r\n    const APP_URL = process.env.REACT_APP_DOMAIN\r\n\r\n    const [password, updatePassword] = useState('');\r\n    const [password2, updatePassword2] = useState('');\r\n    const [hasRegisterFailed, setRegisterFailed] = useState(false);\r\n    const [showSuccessMessage, setSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        document.title = \"Enter New Password\"\r\n     }, []);\r\n\r\n    const eventUpdatePassword = (event) => updatePassword(event.target.value);\r\n    const eventUpdatePassword2 = (event) => updatePassword2(event.target.value);\r\n\r\n    console.log(props)\r\n\r\n    const requestNewPassword = (password, password2) => {\r\n        let url = API_URL + '/confirm?token=';\r\n        return axios.post(url + props.match.params.token,\r\n            { \"p1\": password,\r\n                \"p2\": password2 })\r\n            .then((res) => {\r\n                console.log(res)\r\n                setSuccessMessage(true)\r\n                setRegisterFailed(false)\r\n            }).catch((err) => {\r\n                setErrorMessage(err.response.data)\r\n                setRegisterFailed(true)\r\n            })\r\n\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container form-group d-flex flex-column\">\r\n            <h1 className=\"text-center\">Enter New Password</h1>\r\n\r\n                    {hasRegisterFailed && <div className=\"alert alert-warning\">{\"Error: \" + errorMessage}</div>}\r\n\r\n                    {showSuccessMessage && <div className=\"alert alert-success text-center\">Password accepted. You may now log in normally. Thank you.</div>}\r\n\r\n                    {!showSuccessMessage &&\r\n                    <>\r\n                    Password: <input type=\"password\" className=\"form-control\" name=\"password\" value={password} onChange={eventUpdatePassword}/>\r\n\r\n                    Confirm Password: <input type=\"password\" className=\"form-control\" name=\"password2\" value={password2} onChange={eventUpdatePassword2}/>\r\n\r\n\r\n                    <button className=\"btn btn-lg btn-success p-1 mt-3 mb-2\" onClick={(event) => {event.persist(); requestNewPassword(password, password2);}}>Submit</button>\r\n                    </>\r\n                    }\r\n                    <a href={APP_URL} className=\"text-center m-auto w-50 btn btn-secondary\">Back to homepage</a>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default function ForgotPasswordComponent() {\r\n    const API_URL = process.env.REACT_APP_API_DOMAIN\r\n    const APP_URL = process.env.REACT_APP_DOMAIN\r\n\r\n    const [email, updateEmail] = useState('');\r\n    const [hasRegisterFailed, setRegisterFailed] = useState(false);\r\n    const [showSuccessMessage, setSuccessMessage] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n\r\n    useEffect(() => {\r\n        document.title = \"Forgot Password\"\r\n     }, []);\r\n\r\n    const eventUpdateEmail = (event) => updateEmail(event.target.value);\r\n\r\n    const requestRegisterNewUser = (email) => {\r\n        let url = API_URL + '/forgot'\r\n        return axios.post(url,\r\n            { \"email\": email })\r\n            .then((res) => {\r\n                console.log(res)\r\n                setSuccessMessage(true)\r\n                setRegisterFailed(false)\r\n            }).catch((err) => {\r\n                setErrorMessage(err.response.data)\r\n                setRegisterFailed(true)\r\n            })\r\n    }\r\n\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"container form-group d-flex flex-column\">\r\n            <h1 className=\"text-center\">Forgot Password?</h1>\r\n\r\n                    {hasRegisterFailed && <div className=\"alert alert-warning\">{\"Error: \" + errorMessage}</div>}\r\n\r\n                    {showSuccessMessage && <div className=\"alert alert-success text-center\">An email has been sent to the provided email address. Please click the forgot password link in the email to continue</div>}\r\n\r\n                    {!showSuccessMessage &&\r\n                    <>\r\n                    Email: <input type=\"text\" className=\"form-control\" name=\"email\" value={email} onChange={eventUpdateEmail}/>\r\n\r\n                    <button className=\"btn btn-lg btn-success p-1 mt-3 mb-2\" onClick={(event) => {event.persist(); requestRegisterNewUser(email);}}>Submit</button>\r\n                    </>\r\n                    }\r\n                <a href={APP_URL} className=\"text-center m-auto w-50 btn btn-secondary\">Back to homepage</a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","//const fs = require('fs');\r\nimport FileSaver from 'file-saver';\r\nimport Blob from 'blob';\r\n\r\nconst { PDFDocument, PDFName, PDFBool, PDFArray, PDFNumber, PDFString, } = require('pdf-lib');\r\n\r\nconst getAcroForm = pdfDoc => {\r\n  return pdfDoc.catalog.lookup(PDFName.of('AcroForm'));\r\n};\r\n\r\nconst getAcroFields = pdfDoc => {\r\n  const acroForm = getAcroForm(pdfDoc);\r\n  if (!acroForm) return [];\r\n\r\n  const fieldRefs = acroForm.lookupMaybe(PDFName.of('Fields'), PDFArray);\r\n  if (!fieldRefs) return [];\r\n\r\n  const fields = new Array(fieldRefs.size());\r\n  for (let idx = 0, len = fieldRefs.size(); idx < len; idx++) {\r\n    fields[idx] = fieldRefs.lookup(idx);\r\n  }\r\n  return fields;\r\n};\r\n\r\nconst findAcroFieldByName = (pdfDoc, name) => {\r\n  const acroFields = getAcroFields(pdfDoc);\r\n  return acroFields.find(acroField => {\r\n    const fieldName = acroField.get(PDFName.of('T'));\r\n    return !!fieldName && fieldName.value === name;\r\n  });\r\n};\r\n\r\nconst fillAcroTextField = (\r\n    // pdfDoc,\r\n    acroField,\r\n    // fontObject,\r\n    text,\r\n    // fontSize = 15,\r\n  ) => {\r\n    acroField.set(PDFName.of('V'), PDFString.of(text));\r\n    acroField.set(PDFName.of('Ff'), PDFNumber.of(\r\n      1 << 0 // Read Only\r\n      |\r\n      1 << 12 // Multiline\r\n    ));\r\n  };\r\n  \r\n  const fillInField = (pdfDoc, fieldName, text, fontSize) => {\r\n    const field = findAcroFieldByName(pdfDoc, fieldName);\r\n    if (!field) throw new Error(`Missing AcroField: ${fieldName}`);\r\n    // fillAcroTextField(pdfDoc, field, FontHelvetica, text, fontSize);\r\n    fillAcroTextField(field, text);\r\n  };\r\n\r\n// const logAcroFieldNames = pdfDoc => {\r\n//   const acroFields = getAcroFields(pdfDoc);\r\n//   acroFields.forEach(acroField => {\r\n//     console.log(\r\n//       '  Field Name:',\r\n//       acroField.get(PDFName.of('T')).value,\r\n//       '  Field Type:',\r\n//       acroField.get(PDFName.of('FT')).toString(),\r\n//     );\r\n//   });\r\n// };\r\n\r\n/******************************************************************************/\r\n\r\nexport default async function PrintCharacterSheet(state, savedSkillPoints) {\r\n    const pdfDoc = await fetch('https://github.com/BrettMCoding/koncsc-testing/raw/gh-pages/Novitas-Character-Sheet-2019.pdf').then(res => res.arrayBuffer())\r\n\r\n    const acroForm = getAcroForm(pdfDoc);\r\n    acroForm.set(PDFName.of('NeedAppearances'), PDFBool.True);\r\n\r\n    // fill in character info\r\n    fillInField(pdfDoc, 'CharacterName', state.characterName);\r\n    fillInField(pdfDoc, 'Race', state.race);\r\n    fillInField(pdfDoc, 'Country', state.country);\r\n    fillInField(pdfDoc, 'Player', state.player);\r\n    fillInField(pdfDoc, 'SavedSkillPoints', savedSkillPoints);\r\n    fillInField(pdfDoc, 'Level', state.level);\r\n\r\n    // fill resources\r\n    for (let i = 0; i < state.resources.magicPoints; i++) {\r\n        let magicPowerField =\r\n        findAcroFieldByName(pdfDoc, 'Magic Power ' + i+1);\r\n        if (magicPowerField !== undefined) {\r\n            magicPowerField.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            magicPowerField.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n    // craft and production count by 2, so divide i by half\r\n    for (let i = 0; i <= state.resources.craftPoints; i++) {\r\n        let craftPointField =\r\n        findAcroFieldByName(pdfDoc, 'Craft ' + i/2);\r\n        if (craftPointField !== undefined) {\r\n            craftPointField.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            craftPointField.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n\r\n    for (let i = 1; i <= state.resources.magicPoints; i++) {\r\n        let productionPointField =\r\n        findAcroFieldByName(pdfDoc, 'Production ' + i);\r\n        if (productionPointField !== undefined) {\r\n            productionPointField.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            productionPointField.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n\r\n    for (let skill in state.playerHasSkill) {\r\n        let skillBox = findAcroFieldByName(pdfDoc, skill.name);\r\n        if (skillBox !== undefined) {\r\n            skillBox.set(PDFName.of('V'), PDFName.of('Yes'));\r\n            skillBox.set(PDFName.of('AS'), PDFName.of('Yes'));\r\n        }\r\n    }\r\n\r\n    console.log('Saving modified PDF...');\r\n    const pdfBytes = await pdfDoc.save();\r\n    //fs.writeFileSync('./filled_form.pdf', pdfBytes);\r\n    const blob = new Blob([pdfBytes], {type: \"application/pdf\"})\r\n\r\n\t    // Trigger the browser to download the PDF document\r\n    FileSaver.saveAs(blob, \"cs.pdf\");\r\n};","// TODO: add CHECK YOUR SPAM WARNING to backend email confirmation\r\n// TODO: Rare language approval (v1 vs v2 implementation?)\r\n// TODO: Free appropriate racial language\r\n// TODO: dead skills removed for RP reasons\r\n\r\n// TODO: lock level to >0 <999?\r\n// TODO: resources are not calculating cost from state values\r\n// TODO: continue comment sweep\r\n// TODO: continue refactor sweep\r\n\r\n//  OPTIONAL\r\n    // TODO: pull skill descriptions?\r\n    // TODO: printable?\r\n    // TODO: admin mode?\r\n    // TODO: hide unused skills?\r\n    // TODO: further character info redisgn?\r\n\r\nimport React from 'react';\r\nimport { Container, Row, Col, } from 'reactstrap';\r\nimport Header from './site_layout/header/Header';\r\nimport CharacterInfo from './site_layout/character_info/CharacterInfo';\r\nimport Resources from './site_layout/resources/Resources';\r\nimport SkillTree from './site_layout/skill_trees/SkillTree';\r\nimport { HashRouter as Router, Route, Switch, Link } from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nimport UserLoginLogoutComponent from './site_layout/user_management/components/UserLoginLogoutComponent';\r\nimport RegisterNewUserComponent from './site_layout/user_management/components/RegisterNewUserComponent';\r\nimport NewPasswordComponent from './site_layout/user_management/components/NewPasswordComponent';\r\nimport ForgotPasswordComponent from './site_layout/user_management/components/ForgotPasswordComponent';\r\nimport AuthenticationService from './site_layout/user_management/services/AuthenticationService';\r\nimport PrintCharacterSheet from './site_layout/character_sheet/PrintCharacterSheet';\r\n\r\nimport { withAlert } from 'react-alert';\r\n\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        // TOP LEVEL REACT STATE:::\r\n        \r\n        // All of our character information is stored in state. It is overwritten with a localstorage character (if any),\r\n        // or a Database character when selected by the logged in user\r\n        \r\n        // All of a logged in user's characters are stored in characterList\r\n        \r\n        // All of our skills are loaded into skilltree arrays, and player skills are loaded into the playerHasSkill array\r\n        \r\n        // The switch for enabling/disabling skills is also stored here\r\n\r\n        // character info\r\n        id: \"\",\r\n        characterName: \"\",\r\n        country: \"\",\r\n        player: \"\",\r\n        race: \"\",\r\n        level: 1,\r\n        savedXp: 0,\r\n\r\n        // languages a character has for free (to be stored/retrieved from a relational table)\r\n        freeLanguages: [],\r\n\r\n        // character's owned skills\r\n        playerHasSkill: [],\r\n\r\n        // list of characters owned by logged in user\r\n        characterList: [],\r\n\r\n        // list of Races\r\n        races: [],\r\n\r\n        // list of Countries\r\n        countries: [],\r\n        \r\n        // RESOURCES\r\n        resources: {\r\n            magicPoints: 0,\r\n            craftPoints: 0,\r\n            productionPoints: 0,\r\n        },\r\n\r\n        // Cost is tracked in state instead of database using these constant values\r\n            MAGIC_POINT_COST: 1,\r\n        \r\n            // Costs 1 point to get 2 Skill points\r\n            CRAFT_POINT_COST: 0.5,\r\n            PRODUCTION_POINT_COST: 0.5,\r\n        \r\n        // LOCK BUTTONS TO PREVENT EDITING\r\n        locked: false,\r\n\r\n        // SKILLS BEING LOADED?\r\n        loadingSkills: false,\r\n\r\n        // SKILL TREES\r\n        combat: [],\r\n        general: [],\r\n        production: [],\r\n        roleplaying: [],\r\n        aegis: [],\r\n        battle: [],\r\n        nature: [],\r\n        necromancy: [],\r\n        compulsion: [],\r\n        restoration: [],\r\n        enchantment: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.title = \"Kingdoms of Novitas | Character Sheet\"\r\n        // componentDidMount is called when react successfully inserts a component into the DOM. \r\n        // We then check if the user is logged in to load their characters\r\n        // Then we load all of our skills from the database\r\n        // Then we load whatever the user had in localStorage, if anything\r\n\r\n        if (AuthenticationService.isUserLoggedIn()) {\r\n            AuthenticationService.setupAxiosInterceptors(localStorage.getItem(\"USER_TOKEN\"));\r\n            this.loadCharacterList(this.props.alert);\r\n        };\r\n\r\n        // loading skills flag for 'loading...' div\r\n        this.setState({loadingSkills: true});\r\n\r\n        let skills = [];\r\n        axios.get(process.env.REACT_APP_API_DOMAIN + '/skills')\r\n            .then(res => {\r\n                // an array of skill objects was obtained from the database\r\n                skills = [...res.data];\r\n                // sort them\r\n                this.sortSkillsByTree(skills);\r\n                this.setState(({loadingSkills: false}), function () {\r\n                    this.checkCharacterFreeLanguages();\r\n                })\r\n                });\r\n\r\n        let countries = [];\r\n        axios.get(process.env.REACT_APP_API_DOMAIN + '/countries')\r\n            .then(res => {\r\n                // country list obtained\r\n                countries = [...res.data];\r\n                this.setState({countries: countries});\r\n\r\n                });\r\n\r\n        let races = [];\r\n        axios.get(process.env.REACT_APP_API_DOMAIN + '/races')\r\n            .then(res => {\r\n                // race list obtained\r\n                races = [...res.data];\r\n\r\n                this.setState(({races: races}), function () {\r\n                    this.checkCharacterFreeLanguages();\r\n                    });\r\n                \r\n                });\r\n\r\n        if (localStorage.getItem(\"character\") !== null){\r\n            this.loadLocalCharacter()\r\n        }\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // Called when state or props update, so we use it to update the localStorage character\r\n        this.saveLocalCharacter()\r\n    }\r\n\r\n    sortSkillsByTree = (skills) => {\r\n        // Called in componentDidUpdate. Called when we get skills from database\r\n\r\n        // keys in state currently empty arrays\r\n        for (let key in this.state) {\r\n            for (let skill in skills) {\r\n                // if state key is the same as skill tree\r\n                if (key === skills[skill].tree) {\r\n                    // state is immutable, and batches updates. We spread the previous state (prevState) and then add the skill so that the correct previous value + new value is added\r\n                    this.setState(prevState => ({\r\n                        [key]: [...prevState[key], skills[skill]]\r\n                    }));\r\n                }\r\n            }\r\n        } \r\n    };\r\n\r\n    saveLocalCharacter = () => {\r\n        // called by componentDidUpdate\r\n\r\n        let values = this.state\r\n\r\n        let character = {\r\n            characterName: values.characterName,\r\n            player: values.player,\r\n            race: values.race,\r\n            country: values.country,\r\n            level: values.level,\r\n            savedXp: values.savedXp,\r\n            magicPoints: values.resources.magicPoints,\r\n            craftPoints: values.resources.craftPoints,\r\n            productionPoints: values.resources.productionPoints,\r\n            skills: values.playerHasSkill\r\n        }\r\n\r\n        localStorage.setItem(\"character\", JSON.stringify(character))\r\n    }\r\n\r\n    loadLocalCharacter = () => {\r\n        // CALLED BY: componentDidMount\r\n        // load character from localStorage, if any\r\n\r\n        var localStorageCharacter = JSON.parse(localStorage.getItem(\"character\"));\r\n\r\n        let resources = {\r\n            magicPoints: localStorageCharacter.magicPoints,\r\n            craftPoints: localStorageCharacter.craftPoints,\r\n            productionPoints: localStorageCharacter.productionPoints\r\n\r\n        }\r\n        \r\n        this.setState(prevState =>({\r\n            ...prevState,\r\n            \r\n            characterName: localStorageCharacter.characterName,\r\n            player: localStorageCharacter.player,\r\n            race: localStorageCharacter.race,\r\n            country: localStorageCharacter.country,\r\n            level: localStorageCharacter.level,\r\n            savedXp: localStorageCharacter.savedXp,\r\n            resources: resources,\r\n            playerHasSkill: localStorageCharacter.skills\r\n        }))\r\n    }\r\n    \r\n    loadCharacterList = (alert) => {\r\n        // CALLED BY: componentDidMount, saveCharacter, loadCharacter,\r\n                    // loginClicked (Header -> Navigation -> LoginComponent)\r\n        // load all characters owned by current user\r\n\r\n        debugger;\r\n        \r\n        let url = process.env.REACT_APP_API_DOMAIN + '/characters'\r\n        return axios({\r\n            method: 'get',\r\n            url: url})\r\n            .then((res) => {\r\n                this.setState(() =>({\r\n                    characterList: [...res.data]\r\n                }))\r\n                \r\n            })\r\n            .catch((err) => {\r\n                //console.log(err.response.data)\r\n                alert.show(\"Error loading character list.\\n\" + err.response.data.status + \" \" + err.response.data.message, {timeout: 5000, type: 'error'})\r\n            })\r\n        }\r\n    \r\n        \r\n        saveCharacter = (id, alert) => {\r\n            // CALLED BY: Navigation(onClick(new Character)) (Header -> Navigation) \r\n            // CALLED BY: ConfirmationModal(onClick) (Header -> Navigation -> ConfirmationModal)\r\n            // Save character to database. If an ID is provided, it will overwrite the database character with the matching ID\r\n            // Ownership of the character is checked on the backend, so the user cannot overwrite a character that does not\r\n            // belong to them\r\n        \r\n            // alert is passed in, because App.js this.props.alert is not accessible.\r\n\r\n        let values = this.state\r\n\r\n        let character = {\r\n            id: id,\r\n            characterName: values.characterName,\r\n            player: values.player,\r\n            race: values.race,\r\n            country: values.country,\r\n            level: values.level,\r\n            savedXp: values.savedXp,\r\n            magicPoints: values.resources.magicPoints,\r\n            craftPoints: values.resources.craftPoints,\r\n            productionPoints: values.resources.productionPoints,\r\n            skills: values.playerHasSkill\r\n        }\r\n\r\n        let url = process.env.REACT_APP_API_DOMAIN + '/character'\r\n        return axios({\r\n            method: 'post',\r\n            url: url,\r\n            data: character })\r\n            .then((res) => {\r\n                \r\n                // reload the character list on success\r\n                this.loadCharacterList(alert);\r\n\r\n                // alert arg use\r\n                alert.show(\"Character Saved\", {timeout: 5000, type: 'success'})\r\n            }).catch((err) => {\r\n\r\n                // console.log(err.response.data)\r\n                alert.show(\"Error saving character. \\n\" + err.response.data.status + \" \" + err.response.data.message, {timeout: 5000, type: 'error'})\r\n            })\r\n        \r\n    }\r\n    \r\n    loadCharacter = (id, alert) => {\r\n        // load a user selected character from the database\r\n        \r\n        let url = process.env.REACT_APP_API_DOMAIN + '/character'\r\n        return axios({\r\n            method: 'get',\r\n            url: url,\r\n            params: {\"id\":id}})\r\n            .then((res) => {\r\n                // react doesnt like nested state, so we need to make a nest for our resources first\r\n                // due to the way we stored them in this.state\r\n                var resources = {magicPoints: res.data.magicPoints,\r\n                                    productionPoints: res.data.productionPoints,\r\n                                craftPoints: res.data.craftPoints}\r\n\r\n                this.setState(prevState =>({\r\n                    ...prevState,\r\n\r\n                    id : res.data.id,\r\n                    characterName: res.data.characterName,\r\n                    race: res.data.race,\r\n                    player: res.data.player,\r\n                    country: res.data.country,\r\n                    level: res.data.level,\r\n                    savedXp: res.data.savedXp,\r\n\r\n                    // resource nest made above\r\n                    resources: resources,\r\n\r\n                    // list of user skills\r\n                    playerHasSkill: res.data.skills\r\n                }), function () {\r\n                    this.checkCharacterFreeLanguages();\r\n                })\r\n                alert.show(\"Character Loaded\", {timeout: 5000, type: 'success'})\r\n            })\r\n            .catch((err) => {\r\n                // console.log(err.response.data)\r\n                alert.show(\"Error loading character. \\n\" + err.response.data.status + \" \" + err.response.data.message, {timeout: 5000, type: 'error'})\r\n            })\r\n\r\n    }\r\n\r\n    deleteCharacter = (id, alert) => {\r\n        let url = process.env.REACT_APP_API_DOMAIN + '/character'\r\n        return axios({\r\n            method: 'delete',\r\n            url: url,\r\n            params: {\"id\":id}})\r\n            .then((res) => {\r\n                // console.log(res.data)\r\n                this.loadCharacterList(alert)\r\n                alert.show(\"Character Deleted\", {timeout: 5000, type: 'success'})\r\n            })\r\n            .catch((err) => {\r\n                // console.log(err.response.data)\r\n                alert.show(\"Error deleting character. \\n\" + err.response.data.status + \" \" + err.response.data.message, {timeout: 5000, type: 'error'})\r\n            })\r\n\r\n    }\r\n\r\n    resetSkills = () => {\r\n        let resetResources = {\r\n            magicPoints: 0,\r\n            craftPoints: 0,\r\n            productionPoints: 0 }\r\n            \r\n        this.setState({ playerHasSkill: [],\r\n                        resources: resetResources\r\n                    });\r\n        this.calculateSkillPointsRemaining();\r\n        this.props.alert.show(\"Skills Reset\", {timeout: 5000, type: 'success'})\r\n    }\r\n\r\n    characterInfoChange = (infoName, updatedInfo) => {\r\n        // CALLED BY:\r\n        // CharacterInfo -> CharacterInfoInput(onChange)\r\n        // if the infoName is \"level\", we need to update players skill points remaining.\r\n        this.setState({[infoName]: updatedInfo}, function() {\r\n            this.calculateSkillPointsRemaining();\r\n            this.checkCharacterFreeLanguages();\r\n        });  \r\n    }\r\n\r\n    checkCharacterFreeLanguages = () => {\r\n        let playerSkills = this.state.playerHasSkill;\r\n        let generalSkills = this.state.general\r\n\r\n        switch (this.state.race) {\r\n            case \"Human\":\r\n                this.addFreeLanguages([\"\"]);\r\n            break;\r\n            case \"Drake\":\r\n                this.addFreeLanguages([\"Language: Draconian\"]);\r\n            break;\r\n            case \"Snow Goblin\":\r\n                this.addFreeLanguages([\"Language: Snow Goblin\"]);\r\n            break;\r\n            case \"Elf\":\r\n                this.addFreeLanguages([\"Language: Elven\"]);\r\n            break;\r\n            case \"Earthkin\":\r\n                this.addFreeLanguages([\"Language: Terran\"]);\r\n            break;\r\n            case \"Faekin Elf\":\r\n                this.addFreeLanguages([\"Language: Elven\", \"Language: Sylvan\"]);\r\n            break;\r\n            case \"Faekin Earthkin\":\r\n                this.addFreeLanguages([\"Language: Terran\", \"Language: Sylvan\"]);\r\n            break;\r\n            case \"Faekin Human\":\r\n                this.addFreeLanguages([\"Language: Sylvan\"]);\r\n            break;\r\n        }\r\n    }\r\n\r\n    addFreeLanguages = (languageNamesArray) => {\r\n        let hasFreeLanguages = [];\r\n        let generalSkills = this.state.general\r\n\r\n        // if playerHasSkill so we can refund maybe?\r\n        // for (let languageName in languageNamesArray) {\r\n        //     let languageFound = this.state.playerHasSkill.find(skill => skill.name === languageName)\r\n        //     if (languageFound !== undefined) {\r\n        //         hasFreeLanguages.push(languageFound);\r\n        //     };\r\n        // }\r\n\r\n        for (let languageName in languageNamesArray) {\r\n                let getLanguageByName = generalSkills.find(skill => skill.name === languageNamesArray[languageName])\r\n                \r\n                if (getLanguageByName !== undefined) {\r\n                    hasFreeLanguages.push(getLanguageByName);\r\n                }\r\n        }\r\n\r\n\r\n        this.setState(prevState => ({\r\n            freeLanguages: hasFreeLanguages }), function() {\r\n                for (let lang in hasFreeLanguages) {\r\n                    this.removeSkill(hasFreeLanguages[lang]);\r\n                }\r\n        });  \r\n\r\n        \r\n        \r\n        // if player has skill, refund it? lock it? check it?\r\n    }\r\n    \r\n    calculateBaseSkillPoints = () => { \r\n        // CALLED BY: calculateSkillPointsRemaining\r\n        // a level 1 character has 4 skill points. Every level after that is +2\r\n\r\n        return this.state.level === 1 ? 6 : (this.state.level * 2) + 4\r\n    }\r\n\r\n\r\n    calculateSkillPointsRemaining = () => {\r\n        // used anytime our skill points need to be updated or checked\r\n\r\n        var newSkillPointsRemaining = this.calculateBaseSkillPoints();\r\n\r\n        newSkillPointsRemaining -= this.calculateSpentSkillPoints();\r\n\r\n        return newSkillPointsRemaining;\r\n    }\r\n\r\n    calculateSpentSkillPoints = () => {\r\n        // CALLED BY: calculateSkillPointsRemaining\r\n        // this function is used to determine the total accumulated cost of the characters skills + resources\r\n        var spent = 0;\r\n        var playerSkills = this.state.playerHasSkill;\r\n        var playerResources = this.state.resources;\r\n\r\n        for (let skill in playerSkills) {\r\n            spent += playerSkills[skill].cost;\r\n        }\r\n\r\n        spent += (playerResources.craftPoints * this.state.CRAFT_POINT_COST) + \r\n                (playerResources.productionPoints * this.state.PRODUCTION_POINT_COST) + \r\n                (playerResources.magicPoints * this.state.MAGIC_POINT_COST);\r\n\r\n        return spent;\r\n    }\r\n\r\n    checkRequirements = (skill) => {\r\n        // return true if player meets requirements for skill\r\n    \r\n        // skill.requires is a string that is equal to anotherSkill.name required for skill\r\n        let requiredSkill = skill.requires\r\n\r\n        // skill does not have a required skill\r\n        if (requiredSkill === \"\" || requiredSkill === null) {\r\n            return true; \r\n        }\r\n\r\n        // player's skills array\r\n        let pSkills = this.state.playerHasSkill;\r\n\r\n        for (let pSkill in pSkills) {\r\n            // if one of the player's skill contains the required skill name\r\n            if (requiredSkill.includes(pSkills[pSkill].name)) {\r\n                // we're good\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n    \r\n    playerCheckedASkillBox = (checkedSkill, e) => {\r\n        console.log(\"pulled branch from remote-testing OK\")\r\n        // CALLED BY Skill.js(checkBox onChange) (SkillTree.js -> Skill.js)\r\n\r\n        // add or remove a skill on checkbox change\r\n            // make sure enough skill points are available\r\n            // make sure requirements are met?\r\n            // add skill to playerHasSkill Array, or remove it\r\n\r\n        if (!this.checkRequirements(checkedSkill)) {\r\n            // console.log(\"You do not meet the requirements for \" + checkedSkill.name)\r\n            this.props.alert.show(\"You do not meet the requirements for \" + checkedSkill.name, {timeout: 5000, type: 'error'})\r\n            return false;\r\n        };\r\n \r\n        // if adding a checkbox was detected\r\n        if (e) {\r\n\r\n            // check the cost        \r\n            if (this.calculateSkillPointsRemaining() - checkedSkill.cost < 0) {\r\n                // console.log(\"You do not have enough skill points for \" + checkedSkill.name);\r\n                this.props.alert.show(\"You do not have enough skill points for \" + checkedSkill.name, {timeout: 5000, type: 'error'})\r\n                return false;\r\n            };\r\n\r\n            // roleplaying skill rules\r\n            if (!this.canPlayerGetThisRoleplayingSkill(checkedSkill)) {\r\n                return false;\r\n            }\r\n\r\n            // add skill\r\n            return this.addSkill(checkedSkill);\r\n            \r\n        } else {\r\n\r\n            // if the skill is required, don't remove it\r\n            if (this.skillIsRequired(checkedSkill)) {\r\n                return true;\r\n            }\r\n\r\n            // remove\r\n            return this.removeSkill(checkedSkill);\r\n        }\r\n    }\r\n\r\n    canPlayerGetThisRoleplayingSkill = (skill) => {\r\n    // A Character can only have 5 levels in one roleplaying skill tree,\r\n    // And 2 levels in another maximum\r\n\r\n        // filter for player RP skills\r\n        let playerRPSkills = this.state.playerHasSkill.filter(skill => skill.tree === \"roleplaying\");\r\n\r\n        // filter for tier one skills\r\n        let tierOnePlayerRPSkills = playerRPSkills.filter(skill => skill.name.includes(\"1\"))\r\n\r\n        // if the player has two tier ones already, he is inelligible for another tier one\r\n        if (tierOnePlayerRPSkills.length === 2) {\r\n            if (skill.name.includes(\"1\")) {\r\n                this.props.alert.show(\"You cannot have more than two types of roleplaying skills\", {timeout: 5000, type: 'error'})\r\n                return false;\r\n            }\r\n        }\r\n\r\n        // filter for tier three skills\r\n        let tierThreePlayerRPSkills = playerRPSkills.filter(skill => skill.name.includes(3))\r\n\r\n        // if player has any\r\n        if (tierThreePlayerRPSkills.length !== 0) {\r\n\r\n            // if player has one already, inelligible for another\r\n            if (skill.name.includes(3) && tierThreePlayerRPSkills.length === 1) {\r\n                this.props.alert.show(\"You cannot have more than one roleplaying skill above 2nd level\", {timeout: 5000, type: 'error'})\r\n                return false;\r\n            }\r\n\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    skillIsRequired = (skill) => {\r\n        // don't allow player to remove a skillpoint if it's a necessary requirement for another skill the player has\r\n\r\n        // THIS FUNCTION IS ATROCIOUS\r\n\r\n        let pSkills = this.state.playerHasSkill;\r\n\r\n        for (let pSkill in pSkills) {\r\n\r\n            // current iterations required skills\r\n            let requirementSkillString = pSkills[pSkill].requires\r\n\r\n            // if the current playerskill has a prerequisite skill\r\n            if (requirementSkillString !== \"\" && requirementSkillString !== null) {\r\n\r\n                // if it includes the skill we are trying to remove, it's a requirement\r\n                if (requirementSkillString.includes(skill.name)) {\r\n\r\n                    // if it includes a pipe, there's another prerequisite\r\n                    if(requirementSkillString.includes(\"|\")) {\r\n\r\n                        // iterate again\r\n                        for (let pSkill2 in pSkills) {\r\n\r\n                            // if the current playerskill has a prerequisite skill\r\n                            if (requirementSkillString !== \"\" && requirementSkillString !== null) {\r\n\r\n                                // if the NEW FOUND SKILL is required by the FIRST FOUND SKILL\r\n                                // but it does not equal the SKILL BEING REMOVED\r\n                                // the player still meets the requirements\r\n                                // (this took me way too long and it seems overcomplicated)\r\n                                if (skill.name !== pSkills[pSkill2].name && requirementSkillString.includes(pSkills[pSkill2].name)) {\r\n                                    //console.log(skill.name + \" is a prerequisite for \" + pSkills[pSkill].name + \", but player has \" + pSkills[pSkill2].name + \", which is also a prerequisite\")\r\n                                    return false;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                        // console.log(\"Cannot remove \" + skill.name + \". It is a prerequisite for \" + pSkills[pSkill].name)\r\n                        this.props.alert.show(\"Cannot remove \" + skill.name + \". It is a prerequisite for \" + pSkills[pSkill].name, {timeout: 5000, type: 'error'})\r\n                        return true;    \r\n                }\r\n            }\r\n\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    addResource = (resourceName, cost, max) => {\r\n        // CALLED BY: Resources.js -> Resource.js(onClick)\r\n\r\n        if (this.calculateSkillPointsRemaining() - cost < 0) {\r\n            this.props.alert.show(\"You do not have enough skill points\", {type:'error'});\r\n            return false;\r\n        };\r\n\r\n        // check if player maxed out resource amount already\r\n        if (this.state.resources[resourceName] >= max) {\r\n                // console.log(resourceName + \" limit reached\")\r\n                return false;\r\n        };\r\n\r\n        // local resources variable\r\n        let resources = this.state.resources\r\n        \r\n        // add to this resource\r\n        // hard coded rule to give non magic points +2 per skill\r\n        if (resourceName===\"magicPoints\"){\r\n            resources[resourceName] += 1;\r\n        } else {\r\n            resources[resourceName] += 2;\r\n        }\r\n\r\n        // add new resources to state and calc SPR\r\n        this.setState({resources}, () => {this.calculateSkillPointsRemaining()});\r\n\r\n        return true;\r\n    }\r\n\r\n    removeResource = (resourceName) => {\r\n         // CALLED BY: Resources.js -> Resource.js(onClick)\r\n\r\n        if (this.state.resources[resourceName] === 0) {\r\n            // console.log(\"you can't go below 0, you idiot\")\r\n            return false;\r\n        }\r\n\r\n        let resources = this.state.resources\r\n        \r\n        // hard coded rule to give non magic points +2 per skill\r\n        if (resourceName===\"magicPoints\"){\r\n            resources[resourceName] -= 1;\r\n        } else {\r\n            resources[resourceName] -= 2;\r\n        }\r\n\r\n        this.setState({resources});\r\n    }\r\n\r\n    addSkill = (skill) => {\r\n        // called by playerCheckedASkillBox\r\n\r\n        this.setState(prevState => ({\r\n            playerHasSkill: ([...prevState.playerHasSkill, skill]) }), function ()   {\r\n                this.calculateSkillPointsRemaining()\r\n        });\r\n        // console.log(\"You have added the \" + skill.name + \" skill\")\r\n        return true;\r\n        }\r\n   \r\n    removeSkill = (skill) => {\r\n        // called by playerCheckedASkillBox\r\n\r\n        this.setState(prevState => ({\r\n            // filter previous state.playerhasskill array to return a new array without matching skill\r\n            playerHasSkill: prevState.playerHasSkill.filter(arrSkill => arrSkill.name !== skill.name)\r\n        }), function () {\r\n            this.calculateSkillPointsRemaining()\r\n        })\r\n\r\n        // console.log(\"You have removed the \" + skill.name + \" skill\")\r\n        return false;\r\n    }\r\n\r\n\r\n    lockChanges = () => {\r\n        // disable inputs on playerInfo, resources, and skill checkboxes\r\n        \r\n        this.props.alert.show(\"Character editing \" + (this.state.locked ? \"unl\" : \"l\") + \"ocked\")\r\n\r\n        this.setState(prevState => ({locked: !prevState.locked}));\r\n\r\n        this.calculateSkillPointsRemaining();\r\n    }\r\n\r\n    printCharacterSheet = () => {\r\n        PrintCharacterSheet(this.state, this.calculateSkillPointsRemaining())\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <Router>\r\n                    <Switch>\r\n                        <Route exact path=\"/\">\r\n                            <button onClick={this.printCharacterSheet}>print me</button>\r\n\r\n                            <Header \r\n                                lockChanges={this.lockChanges}\r\n                                resetSkills={this.resetSkills}\r\n                                locked={this.state.locked} \r\n                                saveCharacter={this.saveCharacter} \r\n                                loadCharacter={this.loadCharacter} \r\n                                deleteCharacter={this.deleteCharacter} \r\n                                characterList={this.state.characterList} \r\n                                loadCharacterList={this.loadCharacterList}\r\n                                // pass state to a button for testing\r\n                                staate={this.state} >\r\n                            </Header>\r\n\r\n                            <CharacterInfo\r\n                                races={this.state.races}\r\n                                countries={this.state.countries}\r\n                                level={this.state.level}\r\n                                characterName={this.state.characterName}\r\n                                country={this.state.country}\r\n                                player={this.state.player}\r\n                                race={this.state.race}\r\n                                savedXp={this.state.savedXp}\r\n                                characterInfoChange={this.characterInfoChange}\r\n                                lockChanges={this.state.locked}\r\n                                calculateSkillPointsRemaining={this.calculateSkillPointsRemaining}\r\n                            />\r\n\r\n                            <Container>\r\n                                {this.state.loadingSkills ? <div>Loading skills. Please wait...</div> : <>\r\n                                \r\n                                <Resources \r\n                                    resources={this.state.resources}\r\n                                    addResource={this.addResource} \r\n                                    removeResource={this.removeResource} \r\n                                    lockChanges={this.state.locked} \r\n                                    MAGIC_POINT_COST={this.state.MAGIC_POINT_COST}\r\n                                    PRODUCTION_POINT_COST={this.state.PRODUCTION_POINT_COST}\r\n                                    CRAFT_POINT_COST={this.state.CRAFT_POINT_COST}\r\n                                />\r\n                                \r\n                                <Row>\r\n                                    <Col className=\"skilltree\">\r\n\r\n                                        <div className=\"combat\">\r\n                                            <SkillTree \r\n                                                treeName=\"Combat\"\r\n                                                skills={this.state.combat} \r\n                                                playerSkills={this.state.playerHasSkill}\r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} \r\n                                            />\r\n                                        </div>\r\n\r\n                                        <div className=\"general\">\r\n                                            <SkillTree \r\n                                                treeName=\"General\"\r\n                                                skills={this.state.general} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                        <div className=\"nature\">\r\n                                            <SkillTree \r\n                                                treeName=\"Nature\"\r\n                                                skills={this.state.nature} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                        <div className=\"necromancy\">\r\n                                            <SkillTree \r\n                                                treeName=\"Necromancy\"\r\n                                                skills={this.state.necromancy} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    <Col className=\"skilltree\">\r\n\r\n                                        <div className=\"production\">\r\n                                                <SkillTree \r\n                                                treeName=\"Production\"\r\n                                                skills={this.state.production} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                        \r\n                                        <div className=\"aegis\">\r\n                                                <SkillTree \r\n                                                treeName=\"Aegis\"\r\n                                                skills={this.state.aegis} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n\r\n                                        <div className=\"battle\">\r\n                                            <SkillTree \r\n                                                treeName=\"Battle\"\r\n                                                skills={this.state.battle} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                    </Col>\r\n\r\n                                    <Col className=\"skilltree\">\r\n\r\n                                        <div className=\"roleplaying\">\r\n                                            <SkillTree \r\n                                                treeName=\"Roleplaying\"\r\n                                                skills={this.state.roleplaying} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n\r\n                                        <div className=\"compulsion\">\r\n                                            <SkillTree \r\n                                                treeName=\"Compulsion\"\r\n                                                skills={this.state.compulsion} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                    \r\n                                        <div className=\"restoration\">\r\n                                            <SkillTree \r\n                                                treeName=\"Restoration\"\r\n                                                skills={this.state.restoration} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n\r\n                                        <div className=\"enchantment\">\r\n                                            <SkillTree \r\n                                                treeName=\"Enchantment\"\r\n                                                skills={this.state.enchantment} \r\n                                                playerSkills={this.state.playerHasSkill} \r\n                                                freeLanguages={this.state.freeLanguages}\r\n                                                playerCheckedASkillBox={this.playerCheckedASkillBox} \r\n                                                lockChanges={this.state.locked} />\r\n                                        </div>\r\n                                    </Col>\r\n                                </Row> </>\r\n                                }\r\n                            </Container>\r\n                        </Route>\r\n\r\n                        <Route path=\"/register\" exact component={RegisterNewUserComponent} />\r\n\r\n                        <Route path=\"/forgot\" exact component={ForgotPasswordComponent} />\r\n\r\n                        <Route path=\"/newpass:token\" exact component={NewPasswordComponent} /> \r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withAlert()(App);\r\n","import 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport React from 'react';\r\nimport {render} from 'react-dom';\r\nimport App from './App';\r\n\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\r\nimport AlertTemplate from './react-alert-template-basic'\r\n\r\n// optional cofiguration\r\nconst options = {\r\n    // you can also just use 'bottom center'\r\n    position: positions.TOP_CENTER,\r\n    timeout: 3000,\r\n    offset: '30px',\r\n    // you can also just use 'scale'\r\n    transition: transitions.FADE\r\n  }\r\n  \r\nconst Root = () => (\r\n    <AlertProvider template={AlertTemplate} {...options}>\r\n        <App />\r\n    </AlertProvider>\r\n)\r\n\r\nrender(<Root />, document.getElementById('root'));\r\n\r\n"],"sourceRoot":""}